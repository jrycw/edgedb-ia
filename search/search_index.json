{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u7c21\u4ecb","text":"<p>\u300a\u6d85\u69c3\u7d93\u300b\u7b2c\u5341\u4e5d\u5377</p> <p>\u516b\u5927\u5730\u7344\u4e4b\u6700\uff0c\u7a31\u70ba\u7121\u9593\u5730\u7344\uff0c\u70ba\u7121\u9593\u65b7\u906d\u53d7\u5927\u82e6\u4e4b\u610f\uff0c\u6545\u6709\u6b64\u540d\u3002</p> <p> </p> \u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053"},{"location":"#_2","title":"\u7de3\u8d77","text":"<p>\u9019\u500bproject\u7684\u6982\u5ff5\u6e90\u81eaEasy EdgeDB\u3002\u66f8\u5167\u7528\u5438\u8840\u9b3c\u70ba\u4e3b\u984c\uff0c\u5e36\u9818\u8b80\u8005\u4e00\u6b65\u6b65\u8ddf\u8457\u6545\u4e8b\uff0c\u4f7f\u7528EdgeDB\u4f86\u6a21\u64ec\uff0c\u662f\u4e00\u4efd\u76f8\u7576\u597d\u7684\u5b78\u7fd2\u8cc7\u6e90\u3002</p> <p>\u5728\u95b1\u8b80\u5b8cEasy EdgeDB\u4e4b\u5f8c\uff0c\u56e0\u70ba\u592a\u559c\u6b61\u9019\u7a2e\u5b78\u7fd2\u65b9\u5f0f\uff0c\u6240\u4ee5\u6211\u6c7a\u5b9a\u627e\u4e00\u90e8\u5f88\u559c\u6b61\u7684\u96fb\u5f71\uff0c\u7121\u9593\u9053\u7cfb\u5217\u7b2c\u4e00\u96c6\uff0c\u4ee5\u985e\u4f3c\u7684\u6280\u5de7\u4f86\u7df4\u7fd2EdgeDB\u3002</p> <p>\u5982\u679c\u60a8\u5728\u5c0b\u627eEdgeDB\u7684\u6b63\u9ad4\u4e2d\u6587\u6559\u6750\uff0c\u76f8\u4fe1\u9019\u500bproject\u61c9\u8a72\u80fd\u5e36\u7d66\u60a8\u4e9b\u8a31\u6536\u7372\u3002</p>"},{"location":"#_3","title":"\u4f7f\u7528\u65b9\u5f0f","text":"<p>\u4f5b\u66f0</p> <p>\u53d7\u8eab\u7121\u9593\u8005\u6c38\u9060\u4e0d\u6b7b\uff0c\u58fd\u9577\u4e43\u7121\u9593\u5730\u7344\u4e2d\u4e4b\u5927\u52ab\u3002</p> <p>\u65e2\u540d\u7121\u9593\u9053\uff0c\u8868\u793a\u6642\u9593\u8207\u7a7a\u9593\u90fd\u662f\u6a21\u7cca\u7684\u3002\u4e09\u90e8\u66f2\u9593\uff0c\u6709\u76f8\u5bb9\u4ea6\u6709\u885d\u7a81\uff0c\u6216\u8a31\u6bcf\u4e00\u500b\u5206\u652f\u90fd\u662f\u4e00\u500b\u5e73\u884c\u6642\u7a7a\u3002\u5982\u82e5\u771f\u7684\u60f3\u6df1\u5165\u4e86\u89e3\uff0c\u53ef\u4ee5\u53c3\u8003\u77e5\u4e4e\u7db2\u53cb\u6240\u5beb\u7684\u56db\u5341\u7bc7\u7121\u9593\u9053\u7cfb\u5217\u5287\u60c5\u68b3\u7406\u3002</p> <p>\u9019\u500bproject\u525b\u958b\u59cb\u6642\uff0c\u672c\u4f86\u6253\u7b97\u4eff\u6548Easy EdgeDB\uff0c\u4f7f\u7528\u4e00\u6b65\u6b65\u5efa\u69cbschema\u7684\u65b9\u5f0f\u4f86\u5beb\u3002\u4f46\u7531\u65bc\u5287\u60c5\u904e\u65bc\u8907\u96dc\uff0c\u5982\u679c\u5168\u90e8\u9806\u8457\u6545\u4e8b\u7dda\u524d\u9032\uff0c\u53ea\u6703\u9677\u5165\u7121\u6b62\u5883\u7684migration\u8f2a\u8ff4\u4e2d\u3002</p> <p>\u6240\u4ee5\u6700\u5f8c\u6c7a\u5b9a\u5148\u5efa\u7acb\u4e00\u500b\u521d\u59cbschema\uff0c\u88e1\u9762\u5305\u542b\u4e86\u57fa\u672c\u7684\u4eba\u6642\u5730\u4e8b\u3002</p> <p>\u63a5\u8457\u518d\u5f9e\u5287\u4e2d\u9078\u51fa\u5341\u5e55\uff0c\u65bc\u6bcf\u5e55\u4e2d\u4ea4\u5f85\u5287\u60c5\uff0c\u719f\u6089query\u5beb\u6cd5\u3001\u9010\u6b65\u6539\u5584schema\u4e26\u9032\u884cmigration\u3002</p> <p>\u6bcf\u4e00\u5e55\u7684\u6700\u4e0a\u9762\u90fd\u6703\u6709\u4e00\u500b<code>Full schema preview</code>\uff0c\u88e1\u9762\u6709\u6bcf\u4e00\u6b21migration\u6240\u4f7f\u7528\u7684schema\uff0c\u4e26\u4ee5\u984f\u8272\u6a19\u6ce8\u4e86\u8a72migration\u8207\u524d\u6b21\u7684\u5dee\u7570\u4e4b\u8655\u3002\u6bcf\u4e00\u5e55\u7684\u6700\u4e0b\u9762\u5247\u6709\u4e00\u500b<code>Query review</code>\uff0c\u88e1\u9762\u5305\u542b\u4e86\u8a72\u5e55\u6240\u6709\u57f7\u884c\u7684query\u3002</p> <p>EdgeDB is awesome!</p> <p>\u671f\u8a31\u60a8\u65bc\u95b1\u8b80\u5b8c\u9019\u500bproject\u5f8c\uff0c\u53ef\u4ee5\u4e00\u8d77\u5229\u7528EdgeDB\u8b93\u4e16\u754c\u8b8a\u5f97\u66f4\u9177\u4e00\u9ede\u3002</p>"},{"location":"practice_time/","title":"\u7df4\u7fd2","text":"<p>\u7df4\u7fd21</p> <p>\u8acb\u5beb\u4e00\u6bb5query\u5217\u51fa\u6bcf\u500b\u5834\u666f\u7684<code>scene_number</code>\u3001<code>title</code>\u53ca <code>title</code>\u7684\u9577\u5ea6\uff08\u547d\u540d\u70ba<code>title_len</code>\uff09\uff0c\u4e26\u5c0d<code>title_len</code>\u4f5c\u5347\u51aa\u6392\u5e8f\u3002</p> \u7df4\u7fd21\u53c3\u8003\u89e3\u7b54 <p><pre><code>select Scene {\n    scene_number, \n    title, \n    title_len:= len(.title)} \norder by .title_len;\n</code></pre> <pre><code>{\n    default::Scene {scene_number: 7, title: '\u4e92\u731c\u5e95\u724c', title_len: 4},\n    default::Scene {scene_number: 8, title: '\u8ab0\u662f\u5167\u9b3c', title_len: 4},\n    default::Scene {scene_number: 3, title: '\u9ed1\u767d\u985b\u5012', title_len: 4},\n    default::Scene {scene_number: 1, title: '\u97d3\u741b\u521d\u73fe', title_len: 4},\n    default::Scene {scene_number: 9, title: '\u771f\u76f8\u5927\u767d', title_len: 4},\n    default::Scene {scene_number: 2, title: '\u6211\u60f3\u8ddf\u4ed6\u63db', title_len: 5},\n    default::Scene {scene_number: 10, title: '\u6211\u60f3\u505a\u500b\u597d\u4eba', title_len: 6},\n    default::Scene {scene_number: 4, title: '\u88ab\u907a\u5fd8\u7684\u6642\u5149', title_len: 6},\n    default::Scene {scene_number: 6, title: '\u6709\u5167\u9b3c\u7d42\u6b62\u4ea4\u6613', title_len: 7},\n    default::Scene {scene_number: 5, title: '\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74', title_len: 7},\n}\n</code></pre></p> <p>\u7df4\u7fd22</p> <p>\u8acb\u5beb\u4e00\u500b\u540d\u70ba<code>is_higher_policerank</code>\u7684<code>function</code>\uff0c\u5176\u63a5\u6536<code>id1</code>\u53ca<code>id2</code>\u5169\u500b<code>&lt;uuid&gt;</code>\u578b\u614b\u7684\u8b8a\u6578\u3002\u7576<code>id1</code>\u6240\u5c6c<code>object</code>\u7684<code>police_rank</code>\u9ad8\u65bc<code>id2</code>\u6240\u5c6c<code>object</code>\u7684<code>police_rank</code>\u6642\uff0c\u8fd4\u56de<code>true</code>\uff0c\u5426\u5247\u70ba<code>false</code>\u3002\u6b64\u5916\uff1a</p> <ul> <li>\u7576<code>id1</code>\u53ca<code>id2</code>\u4e26\u975e\u6709\u6548\u7684<code>uuid</code>\u578b\u614b\u6642\uff0c\u61c9\u8a72<code>raise InvalidValueError</code>\u3002</li> <li>\u7576<code>id1</code>\u53ca<code>id2</code>\u6240\u5c6c<code>object</code>\u6c92\u6709\u5177\u6709<code>police_rank</code> <code>property</code>\u6642\uff0c\u61c9\u8a72<code>raise CardinalityViolationError</code>\u3002</li> </ul> \u7df4\u7fd22\u53c3\u8003\u89e3\u7b54 <pre><code>function is_higher_policerank(id1: uuid, id2: uuid) -&gt; bool\nusing (     \n    with p1:= (select &lt;IsPolice&gt;id1),\n         p2:= (select &lt;IsPolice&gt;id2),\n    select p1.police_rank ?? PoliceRank.Protected &gt; \n           p2.police_rank ?? PoliceRank.Protected\n);\n</code></pre>"},{"location":"initial_schema/entity/entity/","title":"\u4e8b","text":"Full schema preview initial_schema/entity/entity.esdl<pre><code># scalar types\nscalar type SceneNumber extending sequence;\n\n# abstract object types\nabstract type Event {\n    detail: str;\n    multi who: Character;\n    multi `when`: FuzzyTime;\n    multi where: Place;\n}\n\n# object types\ntype Scene extending Event {\n    title: str;\n    remarks: str;\n    references: array&lt;tuple&lt;str, str&gt;&gt;;\n    required scene_number: SceneNumber {\n        constraint exclusive;\n        default := sequence_next(introspect SceneNumber);\n    }\n    index on (.scene_number);\n}\n</code></pre>","tags":["sequence","index","array","tuple"]},{"location":"initial_schema/entity/entity/#scalar-types","title":"Scalar types","text":"","tags":["sequence","index","array","tuple"]},{"location":"initial_schema/entity/entity/#scenenumber","title":"SceneNumber","text":"<p><code>SceneNumber</code> <code>extending</code> <code>sequence</code>\u800c\u4f86\uff0c\u4f5c\u70ba\u5834\u666f\u7684\u8a08\u6578\u5668\u3002\u9700\u8981\u7559\u610f\u7684\u662f\u6bcf\u4e00\u500b<code>sequence</code>\u53ef\u4ee5\u88ab\u591a\u500b<code>property</code>\u547c\u53eb\uff0c\u5171\u4eab\u540c\u4e00\u500b\u8a08\u6578\u5668\u3002\u5982\u679c\u55ae\u4e00<code>property</code>\u9700\u8981\u7368\u7acb\u7684\u8a08\u6578\u5668\uff0c\u9700\u8981\u5404\u5225<code>extending</code> <code>sequence</code>\u751f\u6210\u7279\u5b9a\u7684<code>sequence</code>\u3002</p> <pre><code>scalar type SceneNumber extending sequence;\n</code></pre>","tags":["sequence","index","array","tuple"]},{"location":"initial_schema/entity/entity/#abstract-object-types","title":"Abstract Object types","text":"","tags":["sequence","index","array","tuple"]},{"location":"initial_schema/entity/entity/#event","title":"Event","text":"<p><code>Event</code>\u6709\u4e00\u500b<code>detail</code> <code>property</code>\u53ca\u4e09\u500b<code>multi</code> <code>link</code>\u7528\u4f86\u5354\u52a9\u8a18\u9304\u76f8\u95dc\u7684\u4eba\u6642\u5730\u3002\u7531\u65bc<code>when</code>\u662f<code>EdgeDB</code>\u8a9e\u6cd5\u7684\u95dc\u9375\u5b57\uff0c\u6240\u4ee5\u5fc5\u9808\u4f7f\u7528\u52a0\u4e0abacktick\u7684`when`\u3002</p> <pre><code>abstract type Event {\n    detail: str;\n    multi who: Character;\n    multi `when`: FuzzyTime;\n    multi where: Place;\n}\n</code></pre>","tags":["sequence","index","array","tuple"]},{"location":"initial_schema/entity/entity/#object-types","title":"Object types","text":"","tags":["sequence","index","array","tuple"]},{"location":"initial_schema/entity/entity/#scene","title":"Scene","text":"<p><code>Scene</code> <code>extending</code> <code>Event</code>\u800c\u4f86\uff0c\u7528\u4f86\u8a18\u9304\u5404\u5834\u666f\u8cc7\u8a0a\uff0c\u5176\u6709\u56db\u500b<code>property</code>\uff1a</p> <ul> <li><code>title</code> <code>property</code>\u70ba\u6a19\u984c\u3002</li> <li><code>remarks</code> <code>property</code>\u70ba\u8a3b\u89e3\u3002</li> <li><code>references</code> <code>property</code>\u70ba\u53c3\u8003\u8cc7\u6599\u9023\u7d50\u3002</li> <li><code>scene_number</code> <code>property</code>\u70ba\u81ea\u52d5\u7522\u751f\u7de8\u865f\u7684\u8a08\u6578\u5668\u3002<ul> <li><code>constraint exclusive</code>\u78ba\u4fdd\u4e0d\u6703\u6709\u91cd\u8986\u7684\u7de8\u865f\u3002</li> <li><code>sequence_next()</code>\u4f5c\u70ba<code>scene_number</code>\u7684<code>default</code>\uff0c\u53ef\u4ee5\u5728\u6bcf\u6b21<code>insert</code>\u65b0<code>Scene</code>\u6642\uff0c\u81ea\u52d5\u7522\u751f\u7de8\u865f\u3002\u5176\u4e2d<code>introspect</code>\u662f\u4e0d\u53ef\u7701\u7565\u7684\u95dc\u9375\u5b57\uff0c\u539f\u56e0\u662f<code>sequence_next()</code>\u63a5\u6536\u7684\u53c3\u6578\u5fc5\u9808\u662f<code>ScalarType</code>\u3002\u8a73\u7d30\u7684\u8aaa\u660e\u53ef\u4ee5\u53c3\u8003Easy EdgeDB chapter13\u3002</li> </ul> </li> </ul> <p>\u6b64\u5916\uff0c\u7531\u65bc\u6211\u5011\u53ef\u80fd\u6703\u5e38\u9806\u5411\u6216\u9006\u5411\u5b58\u53d6<code>Scene</code>\uff0c\u6240\u4ee5\u66ff<code>scene_number</code>\u52a0\u4e0a\u4e86<code>index</code>\u3002</p> <pre><code>type Scene extending Event {\n    title: str;\n    remarks: str;\n    references: array&lt;tuple&lt;str, str&gt;&gt;;\n    required scene_number: SceneNumber {\n        constraint exclusive;\n        default := sequence_next(introspect SceneNumber);\n    }\n    index on (.scene_number);\n}\n</code></pre>","tags":["sequence","index","array","tuple"]},{"location":"initial_schema/person/person/","title":"\u4eba","text":"Full schema preview initial_schema/person/person.esdl<pre><code># scalar types\nscalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\nscalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n\n# abstract object types\nabstract type Person {\n    required name: str;\n    nickname: str;\n    eng_name: str;\n}\n\nabstract type IsPolice {\n    police_rank: PoliceRank{\n        default:= PoliceRank.Cadet;\n    };\n    dept: str;\n    is_officer:= .police_rank &gt;= PoliceRank.PI;\n}\n\nabstract type IsGangster {\n    gangster_rank: GangsterRank {\n        default:= GangsterRank.Nobody;\n    };\n    gangster_boss: GangsterBoss;\n}\n\nabstract type IsSpy extending IsPolice, IsGangster;\n\n# object types\ntype Character extending Person {\n    classic_lines: array&lt;str&gt;;\n    lover: Character;\n    multi actors: Actor;\n}\n\ntype Actor extending Person;\ntype Police extending Character, IsPolice;\ntype Gangster extending Character, IsGangster;\n\ntype GangsterBoss extending Gangster {\n    overloaded gangster_rank: GangsterRank {\n        default:= GangsterRank.Boss;\n        constraint expression on (__subject__ = GangsterRank.Boss);\n    };\n\n    # excluding self\n    constraint expression on (__subject__ != .gangster_boss) { \n        errmessage := \"The boss can't be his/her own boss.\";\n    }\n}\n\ntype PoliceSpy extending Character, IsSpy;\ntype GangsterSpy extending Character, IsSpy;\n</code></pre>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#scalar-types","title":"Scalar types","text":"","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#policerank","title":"PoliceRank","text":"<p><code>PoliceRank</code>\u5171\u6709\u5341\u4e03\u500b\u968e\u7d1a\uff0c\u5176\u4e2d\u5341\u4e94\u500b\u968e\u7d1a\u70ba\u4f9d\u64da\u7dad\u57fa\u767e\u79d1\u6240\u5b9a\u7fa9\u3002\u5269\u9918\u5169\u500b\u968e\u7d1a\u5206\u5225\u70ba<code>Protected</code>\uff08\u81e5\u5e95\uff09\u53ca<code>Cadet</code>\uff08\u8b66\u6821\u5b78\u751f\uff09\u3002 <pre><code>scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#gangsterrank","title":"GangsterRank","text":"<p><code>GangsterRank</code>\u5171\u6709\u4e09\u500b\u968e\u7d1a\u3002 <pre><code>scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#abstract-object-types","title":"Abstract object types","text":"","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#person","title":"Person","text":"<p><code>Person</code>\u4f5c\u70ba\u4e00\u500b\u62bd\u8c61\u7684\u4eba\u7269<code>abstract object type</code>\uff0c\u76ee\u7684\u662f\u5e0c\u671b\u80fd\u5920\u88ab\u771f\u5be6\u4e16\u754c\u7684\u6f14\u54e1\uff08<code>Actor</code>\uff09\u4ee5\u53ca\u5287\u4e2d\u89d2\u8272\uff08<code>Character</code>\uff09\u6240<code>extending</code>\u3002\u4e0d\u8ad6\u662f\u6f14\u54e1\u6216\u89d2\u8272\uff0c\u6709\u4e09\u500b<code>property</code>\u662f\u5169\u8005\u7686\u5177\u5099\u7684\uff1a</p> <ul> <li><code>name</code> <code>property</code>\u70ba\u4e00\u5fc5\u586b\u7684<code>property</code>\uff0c\u70ba\u6f14\u54e1\u6216\u5287\u4e2d\u89d2\u8272\u540d\u5b57\u3002</li> <li><code>nickname</code> <code>property</code>\u8a18\u9304\u7dbd\u865f\u3002</li> <li><code>eng_name</code> <code>property</code>\u8a18\u9304\u82f1\u6587\u540d\u5b57\u3002</li> </ul> <pre><code>abstract type Person {\n    required name: str;\n    nickname: str;\n    eng_name: str;\n}\n</code></pre>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#ispolice","title":"IsPolice","text":"<p><code>IsPolice</code>\u6709\u4e09\u500b<code>property</code>\uff1a</p> <ul> <li><code>police_rank</code> <code>property</code>\u4ee3\u8868\u8b66\u5bdf\u5b98\u968e\uff0c\u9810\u8a2d\u70ba\u8b66\u6821\u5b78\u751f\uff08<code>PoliceRank.Cadet</code>\uff09\u3002</li> <li><code>dept</code> <code>property</code>\u4ee3\u8868\u8b66\u5bdf\u90e8\u9580\u3002</li> <li><code>is_officer</code> <code>property</code>\u662f\u4e00<code>computed property</code>\uff08\u7559\u610f<code>is_officer</code>\u5f8c\u4f7f\u7528\u7684\u662f<code>:=</code>\uff0c\u4e0d\u662f<code>:</code>\uff09\uff0c\u6703\u6839\u64da<code>police_rank</code>\u662f\u5426\u70ba\u8f03\u9ad8\u968e\u7d1a\uff0c\u4f86\u986f\u793a<code>true</code>\u6216<code>false</code>\uff08<code>enum</code>\u7684\u503c\u662f\u53ef\u4ee5\u6bd4\u8f03\u7684\uff0c\u6240\u4ee5\u9019\u908a\u53ef\u4ee5\u4f7f\u7528<code>&gt;=</code>\uff09\u3002</li> </ul> <pre><code>abstract type IsPolice {\n    police_rank: PoliceRank{\n        default:= PoliceRank.Cadet;\n    };\n    dept: str;\n    is_officer:= .police_rank &gt;= PoliceRank.PI;\n}\n</code></pre>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#isgangster","title":"IsGangster","text":"<p><code>IsGangster</code>\u6709\u4e00\u500b<code>property</code>\u53ca\u4e00\u500b<code>link</code>\uff1a</p> <ul> <li><code>gangster_rank</code> <code>property</code>\u4ee3\u8868\u9ed1\u793e\u6703\u968e\u7d1a\uff0c\u9810\u8a2d\u70ba\u5c0f\u5f1f\uff08<code>GangsterRank.Nobody</code>\uff09\u3002</li> <li><code>gangster_boss</code> <code>link</code>\u4ee3\u8868\u6b64\u89d2\u8272\u7684\u8001\u5927\u3002</li> </ul> <pre><code>abstract type IsGangster {\n    gangster_rank: GangsterRank {\n        default:= GangsterRank.Nobody;\n    };\n    gangster_boss: GangsterBoss;\n}\n</code></pre>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#isspy","title":"IsSpy","text":"<p><code>IsSpy</code>\u540c\u6642<code>extending</code> <code>IsPolice</code>\u53ca<code>IsGangster</code>\u7528\u4f86\u8868\u793a\u81e5\u5e95\u3002 <pre><code>abstract type IsSpy extending IsPolice, IsGangster;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#object-types","title":"Object types","text":"","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#character","title":"Character","text":"<p><code>Character</code> <code>extending</code> <code>Person</code>\u7528\u4f86\u8868\u793a\u5287\u4e2d\u89d2\u8272\uff0c\u6709\u4e00\u500b<code>property</code>\u8207\u5169\u500b<code>link</code>\uff1a</p> <ul> <li><code>classic_lines</code> <code>property</code>\u70ba\u4e00<code>array&lt;str&gt;</code>\uff0c\u7528\u4f86\u8a18\u9304\u89d2\u8272\u65bc\u5287\u4e2d\u7684\u540d\u8a00\u3002</li> <li><code>lover</code> <code>link</code>\u70ba\u5287\u4e2d\u89d2\u8272\u7684\u6200\u4eba\u3002</li> <li><code>actors</code> <code>multi link</code>\u70ba\u98fe\u6f14\u5287\u4e2d\u89d2\u8272\u7684\u6f14\u54e1\uff08\u4f7f\u7528<code>multi</code>\uff0c\u56e0\u70ba\u4e00\u500b\u89d2\u8272\u53ef\u80fd\u7531\u4e00\u500b\u4ee5\u4e0a\u6f14\u54e1\u8a6e\u91cb\uff09\u3002</li> </ul> <pre><code>type Character extending Person {\n    classic_lines: array&lt;str&gt;;\n    lover: Character;\n    multi actors: Actor;\n}\n</code></pre>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#actor","title":"Actor","text":"<p><code>Actor</code> <code>extending</code> <code>Person</code>\u7528\u4f86\u8868\u793a\u6f14\u54e1\u3002 <pre><code>type Actor extending Person;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#police","title":"Police","text":"<p><code>Police</code>\u540c\u6642<code>extending</code> <code>Character</code>\u53ca<code>IsPolice</code>\u7528\u4f86\u8868\u793a\u8b66\u5bdf\u3002 <pre><code>type Police extending Character, IsPolice;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#gangster","title":"Gangster","text":"<p><code>Gangster</code>\u540c\u6642<code>extending</code> <code>Character</code>\u53ca<code>IsGangster</code>\u7528\u4f86\u8868\u793a\u9ed1\u793e\u6703\u3002 <pre><code>type Gangster extending Character, IsGangster;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#gangsterboss","title":"GangsterBoss","text":"<p><code>GangsterBoss</code> <code>extending</code> <code>Gangster</code>\u800c\u4f86\u3002 <pre><code>type GangsterBoss extending Gangster {\n    overloaded gangster_rank: GangsterRank {\n        default:= GangsterRank.Boss;\n        constraint expression on (__subject__ = GangsterRank.Boss);\n    };\n\n    # excluding self\n    constraint expression on (__subject__ != .gangster_boss) { \n        errmessage := \"The boss can't be his/her own boss.\";\n    }\n}\n</code></pre></p> <p><code>GangsterBoss</code>\u4e5f\u7b97\u662f<code>Gangster</code>\uff0c\u53ea\u4e0d\u904e\u5176<code>gangster_rank</code>\u4f4d\u968e\u8f03\u5176\u5b83\u9ed1\u793e\u6703\u6210\u54e1\u9ad8\u3002\u70ba\u4e86\u8868\u793a\u9019\u4e00\u7279\u6027\uff0c\u6211\u5011\u4f7f\u7528<code>overloaded</code> <code>gangster_rank</code>\u4f86\u52a0\u4e0a\u5169\u500b\u9650\u5236\uff1a</p> <ul> <li> <p>\u9810\u8a2d\u5176<code>gangster_rank</code>\u70ba<code>GangsterRank.Boss</code>\uff1a <pre><code>default:= GangsterRank.Boss;\n</code></pre></p> </li> <li> <p>\u7121\u8ad6\u662f<code>insert</code>\u6216<code>update</code> <code>GangsterBoss</code>\uff0c\u5176<code>gangster_rank</code>\u90fd\u53ea\u80fd\u6307\u5b9a\u70ba<code>GangsterRank.Boss</code>\uff1a     <pre><code>constraint expression on (__subject__ = GangsterRank.Boss);\n</code></pre> <code>constraint expression on</code> \u53ef\u63a5\u53d7\u4e00\u500b<code>expression</code>\u4f86\u8fd4\u56de<code>true</code>\u6216<code>false</code>\uff0c\u5982\u679c\u8fd4\u56de\u7684\u662f<code>true</code>\u7684\u8a71\uff0c\u624d\u80fd\u5141\u8a31\u76f8\u95dc\u64cd\u4f5c\u3002\u800c<code>__subject__</code>\u4ee3\u8868\u6b64\u8655\u5c07\u53d7\u9650\u5236\u7684\u503c\uff08\u4e00\u500b<code>GangsterRank scalar</code>\uff09\u3002</p> </li> </ul> <p>\u6b64\u5916\uff0c\u6211\u5011\u91dd\u5c0d<code>GangsterBoss</code>\u9019\u500b<code>object type</code>\u4e5f\u52a0\u4e0a\u4e00\u500b<code>constraint</code>\u4f86\u9650\u5236\u81ea\u5df1\u4e0d\u80fd\u662f\u81ea\u5df1\u7684<code>gangster_boss</code>\u3002\u5176\u4e2d<code>.gangster_boss</code>\u7684<code>.</code>\u4ee3\u8868\u5f15\u7528\u7684\u662f\u81ea\u8eab\u7684<code>gangster_boss</code> <code>property</code>\uff08\u5b9a\u7fa9\u65bc<code>Gangster</code>\u4e2d\uff09\uff0c\u800c<code>__subject__</code>\u5247\u4ee3\u8868\u81ea\u5df1\uff08\u4e00\u500b<code>GangsterBoss object</code>\uff09\u3002 <pre><code>constraint expression on (__subject__ != .gangster_boss) { \n    errmessage := \"The boss can't be his/her own boss.\";\n}\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#policespy","title":"PoliceSpy","text":"<p><code>PoliceSpy</code>\u540c\u6642<code>extending</code> <code>Character</code>\u53ca<code>IsSpy</code>\uff0c\u70ba\u8b66\u65b9\u6d3e\u81f3\u9ed1\u793e\u6703\u4e4b\u81e5\u5e95\u3002 <pre><code>type PoliceSpy extending Character, IsSpy;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/person/person/#gangsterspy","title":"GangsterSpy","text":"<p><code>GangsterSpy</code>\u540c\u6642<code>extending</code> <code>Character</code>\u53ca<code>IsSpy</code>\uff0c\u70ba\u9ed1\u793e\u6703\u6d3e\u81f3\u8b66\u65b9\u4e4b\u81e5\u5e95\u3002 <pre><code>type GangsterSpy extending Character, IsSpy;\n</code></pre></p>","tags":["abstract object type","computed property","overloaded","constraint"]},{"location":"initial_schema/place/place/","title":"\u5730","text":"Full schema preview initial_schema/place/place.esdl<pre><code># abstract object types\nabstract type Place {\n    required name: str {\n        delegated constraint exclusive;\n    };\n}\n\n# object types\ntype Landmark extending Place;\ntype Location extending Place;\ntype Store extending Place;\n</code></pre>","tags":["required","delegated"]},{"location":"initial_schema/place/place/#abstract-object-types","title":"Abstract object types","text":"<p><code>Place</code>\u70ba\u4e00\u62bd\u8c61\u6982\u5ff5\u7684<code>abstract object type</code>\uff0c\u53ea\u6709\u4e00\u500b\u5fc5\u586b\u7684<code>name</code> <code>property</code>\u3002\u5176\u6709\u4e00\u500b<code>delegated constraint exclusive</code>\u7684<code>constraint</code>\uff0c\u9019\u8207<code>constraint exclusive</code>\u4e0d\u540c\u3002\u5982\u679c\u52a0\u4e0a<code>delegated</code>\uff0c\u4ee3\u8868<code>exclusive</code>\u662f\u6703\u65bd\u52a0\u5728\u5f8c\u7e8c\u5404\u500b<code>extending</code> <code>Place</code>\u7684<code>object type</code>\u4e0a\u3002</p> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u5047\u5982<code>Landmark</code>\u548c<code>Location</code>\u90fd<code>extending</code> <code>Place</code>\uff0c\u800c\u6211\u5011\u60f3\u751f\u6210\u4e00\u500b\u540d\u53eb<code>\u6709\u9593\u5ba2\u68e7</code>\u7684<code>object</code>\u3002</p> <ul> <li> <p>\u4f7f\u7528<code>delegated constraint exclusive</code>\uff0c\u53ef\u4ee5\u8b93\u6211\u5011\u540c\u6642\u751f\u6210\u4e00\u500b<code>name</code>\u70ba<code>\u6709\u9593\u5ba2\u68e7</code>\u7684<code>Landmark</code>\u53ca\u4e00\u500b<code>name</code>\u70ba<code>\u6709\u9593\u5ba2\u68e7</code>\u7684<code>Location</code>\u3002</p> </li> <li> <p>\u4f7f\u7528<code>constraint exclusive</code>\uff0c\u53ea\u80fd\u751f\u6210\u4e00\u500b<code>name</code>\u70ba<code>\u6709\u9593\u5ba2\u68e7</code>\u7684<code>Landmark</code>\u6216\u4e00\u500b<code>name</code>\u70ba<code>\u6709\u9593\u5ba2\u68e7</code>\u7684<code>Location</code>\u3002</p> </li> </ul>","tags":["required","delegated"]},{"location":"initial_schema/place/place/#place","title":"Place","text":"<pre><code>abstract type Place {\n    required name: str {\n        delegated constraint exclusive;\n    };\n}\n</code></pre>","tags":["required","delegated"]},{"location":"initial_schema/place/place/#object-types","title":"Object types","text":"","tags":["required","delegated"]},{"location":"initial_schema/place/place/#landmark","title":"Landmark","text":"<p><code>Landmark</code>\u7528\u4f86\u4ee3\u8868\u77e5\u540d\u5ea6\u8f03\u9ad8\u7684\u5730\u6a19\u3002 <pre><code>type Landmark extending Place;\n</code></pre></p>","tags":["required","delegated"]},{"location":"initial_schema/place/place/#location","title":"Location","text":"<p><code>Location</code>\u7528\u4f86\u4ee3\u8868\u4e00\u822c\u5730\u9ede\u3002 <pre><code>type Location extending Place;\n</code></pre></p>","tags":["required","delegated"]},{"location":"initial_schema/place/place/#store","title":"Store","text":"<p><code>Store</code>\u7528\u4f86\u4ee3\u8868\u5e97\u92ea\u3002 <pre><code>type Store extending Place;\n</code></pre></p>","tags":["required","delegated"]},{"location":"initial_schema/time/time/","title":"\u6642","text":"Full schema preview initial_schema/time/time.esdl<pre><code># scalar types\nscalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\nscalar type FuzzyYear extending int64;\nscalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\nscalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\nscalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\nscalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\nscalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n\n# object types\ntype FuzzyTime {\n    fuzzy_year: FuzzyYear;\n    fuzzy_month: FuzzyMonth;\n    fuzzy_day: FuzzyDay;\n    fuzzy_hour: FuzzyHour;\n    fuzzy_minute: FuzzyMinute;\n    fuzzy_second: FuzzySecond;\n    fuzzy_dow: DayOfWeek; \n    fuzzy_fmt:= (\n        with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n        select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                dow       \n    );\n\n    trigger fuzzy_month_day_check after insert, update for each \n    when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n    do ( \n        assert_exists(\n            cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n            ) \n    );\n    constraint exclusive on (.fuzzy_fmt);\n}\n</code></pre>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#scalar-types","title":"Scalar types","text":"","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#dayofweek","title":"DayOfWeek","text":"<p><code>DayOfWeek</code>\u4ee3\u8868\u4e00\u661f\u671f\u5167\u4e03\u5929\u3002 <pre><code>scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n</code></pre></p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzyyear","title":"FuzzyYear","text":"<p><code>FuzzyYear</code>\u76f4\u63a5<code>extending</code> <code>int64</code>\u3002 <pre><code>scalar type FuzzyYear extending int64;\n</code></pre></p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzymonth","title":"FuzzyMonth","text":"<p><code>FuzzyMonth</code> <code>extending</code> <code>int64</code>\u5f8c\uff0c\u518d\u52a0\u4e0a\u4e00\u500b<code>constraint</code>\uff0c\u9650\u5236\u5176\u503c\u53ea\u80fd\u70ba1~12\u3002 <pre><code>scalar type FuzzyMonth extending int64 {\n    constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)\n}\n</code></pre></p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzyday","title":"FuzzyDay","text":"<p><code>FuzzyDay</code> <code>extending</code> <code>int64</code>\u5f8c\uff0c\u518d\u52a0\u4e0a\u4e00\u500b<code>constraint</code>\uff0c\u9650\u5236\u5176\u503c\u53ea\u80fd\u70ba1~31\u3002 <pre><code>scalar type FuzzyDay extending int64 {\n    constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)\n}\n</code></pre></p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzyhour","title":"FuzzyHour","text":"<p><code>FuzzyHour</code> <code>extending</code> <code>int64</code>\u5f8c\uff0c\u518d\u52a0\u4e0a\u4e00\u500b<code>constraint</code>\uff0c\u9650\u5236\u5176\u503c\u53ea\u80fd\u70ba0~23\u3002 <pre><code>scalar type FuzzyHour extending int64 {\n    constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)\n}\n</code></pre></p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzyminute","title":"FuzzyMinute","text":"<p><code>FuzzyMinute</code> <code>extending</code> <code>int64</code>\u5f8c\uff0c\u518d\u52a0\u4e0a\u4e00\u500b<code>constraint</code>\uff0c\u9650\u5236\u5176\u503c\u53ea\u80fd\u70ba0~59\u3002 <pre><code>scalar type FuzzyMinute extending int64 {\n    constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)\n}\n</code></pre></p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzysecond","title":"FuzzySecond","text":"<p><code>FuzzySecond</code> <code>extending</code> <code>int64</code>\u5f8c\uff0c\u518d\u52a0\u4e0a\u4e00\u500b<code>constraint</code>\uff0c\u9650\u5236\u5176\u503c\u53ea\u80fd\u70ba0~59\u3002 <pre><code>scalar type FuzzySecond extending int64 {\n    constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)\n}\n</code></pre></p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#object-types","title":"Object types","text":"","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzytime","title":"FuzzyTime","text":"<p><code>FuzzyTime</code>\u9664\u4e86\u5305\u542b\u524d\u8ff0\u4e03\u500b<code>scalar type</code>\u70ba<code>property</code>\u5916\uff0c\u9084\u52a0\u4e86\u4e00\u500b<code>fuzzy_fmt</code> <code>property</code>\uff0c\u4e00\u500b<code>trigger</code>\u53ca\u4e00\u500b<code>constraint</code>\u3002</p> <pre><code>type FuzzyTime {\n    fuzzy_year: FuzzyYear;\n    fuzzy_month: FuzzyMonth;\n    fuzzy_day: FuzzyDay;\n    fuzzy_hour: FuzzyHour;\n    fuzzy_minute: FuzzyMinute;\n    fuzzy_second: FuzzySecond;\n    fuzzy_dow: DayOfWeek; \n    fuzzy_fmt:= (\n        with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n             m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n             m:= m if len(m) &gt; 1 else \"0\" ++ m,\n             d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n             d:= d if len(d) &gt; 1 else \"0\" ++ d,\n             H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n             H:= H if len(H) &gt; 1 else \"0\" ++ H,\n             M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n             M:= M if len(M) &gt; 1 else \"0\" ++ M,\n             S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n             S:= S if len(S) &gt; 1 else \"0\" ++ S,\n             dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n        select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n               H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n               dow       \n    );\n\n    trigger fuzzy_month_day_check after insert, update for each \n    when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n    do ( \n        assert_exists(\n            cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n            ) \n    );\n    constraint exclusive on (.fuzzy_fmt);\n}\n</code></pre>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#fuzzy_fmt","title":"fuzzy_fmt","text":"<p><code>fuzzy_fmt</code>\u70ba<code>computed property</code>\uff0c\u70ba\u4e00\u7279\u6b8a\u7684<code>str</code>\u683c\u5f0f\u4f86\u8868\u9054\u6bcf\u500b<code>FuzzyTime object</code>\u3002\u5176\u4e2d<code>??</code>\u662f\u6307\u7576\u8a72<code>scalar type</code>\u70ba\u7a7a\u7684<code>set</code>\u6642\uff08\u5373<code>&lt;str&gt;{}</code>\uff09\uff0c\u6240\u7d66\u4e88\u7684\u9810\u8a2d\u503c\u3002</p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#trigger","title":"trigger","text":"<p>\u7576\u540c\u6642\u7d66\u5b9a<code>fuzzy_month</code>\u53ca<code>fuzzy_day</code>\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u900f\u904e<code>cal::to_local_date</code>\u4f86\u9a57\u8b49\u9019\u6a23\u7684\u6708\u4efd\u8207\u65e5\u671f\uff0c\u662f\u5426\u70ba\u4e00\u6709\u6548\u7684\u7d44\u5408\u3002</p> <p>\u9010\u6b65\u62c6\u89e3\u5404\u90e8\u4efd\u8a9e\u6cd5\uff1a</p> <ul> <li> <p><code>fuzzy_month_day_check</code>\u70ba\u6b64<code>trigger</code>\u540d\u5b57\uff0c\u53ef\u81ea\u884c\u5b9a\u7fa9\u3002<code>after</code>\u81f3<code>for each</code>\u4e2d\u9593\uff0c\u8f38\u5165\u60f3\u8981<code>trigger</code>\u7684\u985e\u578b\u3002\u672c\u4f8b\u4e2d\u662f\u60f3\u8981\u7576\u5c0d<code>FuzzyTime</code>\u9032\u884c<code>insert</code>\u53ca<code>update</code>\u6642\uff0c\u624d\u6703\u89f8\u767c<code>trigger</code>\u3002 <pre><code>trigger fuzzy_month_day_check after insert, update for each\n</code></pre></p> </li> <li> <p><code>when</code>\u70ba\u9078\u64c7\u6027\u689d\u4ef6\uff0c\u7576\u5176\u5f8c<code>expression</code>\u70ba<code>true</code>\u6642\uff0c\u624d\u6703\u89f8\u767c<code>trigger</code>\u3002\u5176\u4e2d<code>__new__</code>\u662f\u6307\u6211\u5011\u60f3\u8981<code>insert</code>\u6216<code>update</code>\u7684<code>object</code>\u3002 <pre><code>when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n</code></pre></p> </li> <li> <p><code>do</code>\u70ba\u9019\u500b<code>trigger</code>\u60f3\u8981\u57f7\u884c\u7684\u5167\u5bb9\u3002\u6211\u5011\u9019\u88e1\u4f7f\u7528<code>assert_exists</code>\u642d\u914d<code>cal::to_local_date</code>\u4f86\u9a57\u8b49\u7d66\u5b9a\u7684\u6708\u4efd\u53ca\u65e5\u671f\u7d44\u5408\u662f\u5426\u5408\u7406\u3002\u7576\u6c92\u6709\u7d66\u5b9a\u5e74\u4efd\u6642\uff0c\u4f7f\u7528<code>??</code>\u8a9e\u6cd5\u6307\u5b9a\u70ba\u7121\u9593\u9053\u4e3b\u8981\u5287\u60c5\u6642\u9593\u76842002\u5e74\u3002\u7531\u65bc\u6211\u5011\u7684<code>fuzzy_day</code>\u5df2\u7d93\u88ab<code>FuzzyDay</code>\u9650\u5236\u57281~31\u4e4b\u9593\uff0c\u6240\u4ee5\u9019\u500b<code>trigger</code>\u53ef\u4ee5\u5e6b\u6211\u5011\u53bb\u9664\u6389<code>2/30</code>\u3001<code>2/31</code>\u3001<code>4/31</code>\u3001<code>6/31</code>\u3001<code>9/31</code>\u3001<code>11/31</code>\u7b49\u4e0d\u5408\u7406\u7684\u6642\u9593\uff0c\u81f3\u65bc\u6c92\u6709\u7d66\u5b9a\u5e74\u4efd\u7684<code>2/29</code>\u662f\u7121\u6cd5\u751f\u6210\u7684\uff08\u56e0\u70ba2002\u5e74\u4e0d\u662f\u958f\u5e74\uff09\u3002\u5982\u679c\u771f\u7684\u8981\u751f\u6210<code>2/29</code>\u9019\u9ebc\u7279\u5225\u7684\u65e5\u5b50\uff0c\u9700\u5f37\u5236\u52a0\u4e0a\u5e74\u4efd\u4f86\u9452\u5225\u5176\u662f\u5426\u70ba\u4e00\u5408\u7406\u7684\u6642\u9593\u3002 <pre><code>do ( \n    assert_exists(\n        cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n        ) \n);\n</code></pre> \u53e6\u5916\uff0c\u7576\u60a8\u4f7f\u7528\u7565\u70ba\u8d85\u904e\u5408\u7406\u6642\u9593\u7684\u65e5\u671f(\u5982<code>4/31</code>)\uff0c<code>cal::to_local_date</code>\u5831\u932f\u8a0a\u606f\u6703\u548c\u4e00\u822c\u60c5\u6cc1\u4e0d\u592a\u4e00\u6a23\uff0c\u6703\u8cbc\u5fc3\u5730\u63d0\u793a\u60a8\u9019\u500b\u65e5\u671f\u525b\u597d\u8d85\u51fa\u5408\u7406\u5340\u9593\u3002</p> </li> </ul> <p><code>cal::to_local_date</code>\u5831\u932f\u8a0a\u606f</p> 4/314/40 <pre><code>  edgedb error: InvalidValueError: cal::local_date field value out of range: 2002-04-31\n</code></pre> <pre><code>  edgedb error: ConstraintViolationError: invalid FuzzyDay\n    Detail: invalid scalar type 'default::FuzzyDay'\n</code></pre>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"initial_schema/time/time/#constraint","title":"constraint","text":"<p>\u91dd\u5c0d<code>fuzzy_fmt</code> <code>property</code>\u52a0\u4e0a<code>exclusive</code>\u5f8c\uff0c\u53ef\u4ee5\u78ba\u4fdd\u7576\u4f7f\u7528<code>FuzzyTime</code>\u6642\uff0c\u4e0d\u6703\u751f\u6210\u4e00\u500b\u4ee5\u4e0a\u53ef\u4ee5\u8868\u9054\u540c\u4e00\u6a21\u7cca\u6642\u9593\u7684<code>FuzzyTime object</code>\u3002</p>","tags":["constraint","trigger","exists","assert_exists"]},{"location":"scenes/scene01/scene01/","title":"01 - \u97d3\u741b\u521d\u73fe","text":"","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#full-schema-preview","title":"Full schema preview","text":"Full schema preview startend migration scenes/scene01/initial_schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n}\n</code></pre> scenes/scene01/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n}\n</code></pre>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053\u2162\u7d42\u6975\u7121\u9593 <p>\u97d3\u741b\u6e96\u5099\u6d3e\u9063\u591a\u500b\u8eab\u5bb6\u8f03\u70ba\u6e05\u767d\u7684\u5c0f\u5f1f\u81e5\u5e95\u81f3\u9999\u6e2f\u8b66\u968a\uff0c\u5305\u62ec\u5efa\u660e\u3002\u4ed6\u5411\u5c0f\u5f1f\u5011\u8b1b\u8ff0\u8457\u81ea\u5df1\u7684\u904e\u53bb\uff0c\u4e26\u8aaa\u81ea\u5df1\u4e0d\u76f8\u4fe1\u7b97\u547d\u5148\u751f\u6240\u8aaa\u7684\u300c\u4e00\u5c07\u529f\u6210\u842c\u9aa8\u67af\u300d\u3002\u4ed6\u8a8d\u70ba\u51fa\u4f86\u6df7\u7684\uff0c\u672a\u4f86\u7684\u8def\u600e\u9ebc\u8d70\u61c9\u8a72\u7531\u81ea\u5df1\u6c7a\u5b9a\u3002</p>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#edgeql-query","title":"EdgeQL query","text":"","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#_2","title":"01 - \u97d3\u741b\u521d\u73fe","text":"<p>make start migration here\uff08<code>scenes/scene01/initial_schema.esdl</code>\uff09</p> <p>\u5728\u958b\u59cb\u9032\u884c\u6240\u6709query\u524d\uff0c\u6211\u5011\u9700\u8981\u5148\u544a\u77e5EdgeDB\u521d\u59cb\u7684schema\u3002</p> <ul> <li>\u5982\u679c\u60a8\u662f\u5728\u547d\u4ee4\u5217\uff0c\u9700\u8981\u8f38\u5165<code>edgedb migration create</code>\u5f8c\uff0c\u518d\u8f38\u5165<code>edgedb migrate</code>\u3002</li> <li>\u5982\u679c\u60a8\u662f\u5728<code>EdgeDB REPL</code>\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u4fbf\u6377\u7684<code>\\migration create</code>\u53ca<code>\\migrate</code>\u6307\u4ee4\u3002</li> </ul>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#insert1992","title":"<code>insert</code>\u6b64\u5834\u666f\u6642\u95931992\u5e74","text":"scenes/scene01/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 1992};\n</code></pre>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#insert","title":"<code>insert</code>\u97d3\u741b\u53ca\u5176\u6f14\u54e1\u66fe\u5fd7\u5049","text":"<p>\u97d3\u741b\u65bc\u958b\u982d\u5c31\u8aaa\u51fa\u300c\u4e00\u5c07\u529f\u6210\u842c\u9aa8\u67af\u300d\u7684\u7d93\u5178\u53e5\uff0c\u6211\u5011\u5c07\u6b64\u53e5\u6536\u9304\u5728<code>classic_lines</code> <code>property</code>\u4e2d\u3002</p> <p>\u6b64\u5916\uff0c\u96d6\u7136<code>actors</code>\u70ba<code>multi link</code>\uff0c\u53ef\u4ee5\u5305\u62ec\u591a\u500b\u6f14\u54e1\u3002\u4f46\u662f\u6211\u5011\u53ef\u4ee5\u4f7f\u7528<code>assert_single()</code>\u4f86\u78ba\u4fdd\u6700\u591a\u53ea\u6703\u63a5\u6536\u5230\u4e00\u500b\u66fe\u5fd7\u5049<code>Actor object</code>\u3002\u9019\u9ebc\u4e00\u4f86\uff0c\u5982\u679c\u8cc7\u6599\u5eab\u5167\u5df2\u7d93\u6709\u5169\u500b<code>Actor object</code>\u7684<code>name</code>\u90fd\u53eb\u66fe\u5fd7\u5049\u6642\uff0c\u9019\u500bquery\u5c31\u6703\u5831\u932f\u3002 scenes/scene01/query.edgeql<pre><code>insert Actor {\n     name:= \"\u66fe\u5fd7\u5049\",\n     eng_name:= \"Eric\",\n     nickname:= \"\u734e\u8001\",\n};\n\ninsert GangsterBoss {\n    name:= \"\u97d3\u741b\",\n    nickname:= \"\u741b\u54e5\",\n    classic_lines:= [\"\u4e00\u5c07\u529f\u6210\u842c\u9aa8\u67af\"],\n    actors := assert_single((select Actor filter .name = \"\u66fe\u5fd7\u5049\")),\n};\n</code></pre></p>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#insert_1","title":"<code>insert</code>\u5289\u5efa\u660e\u53ca\u5176\u5c11\u5e74\u6642\u671f\u6f14\u54e1\u9673\u51a0\u5e0c","text":"<p>\u8a9e\u6cd5\u8207\u524d\u9762\u985e\u4f3c\uff0c\u7559\u610f<code>filter</code>\u6642\u4e5f\u53ef\u7528<code>in {}</code>\u7684\u5beb\u6cd5\u3002 scenes/scene01/query.edgeql<pre><code>insert Actor {\n    name:= \"\u9673\u51a0\u5e0c\",\n    eng_name:= \"Edison\",\n};\n\ninsert GangsterSpy {\n   name:= \"\u5289\u5efa\u660e\",\n   nickname:= \"\u5289\u4ed4\",\n   gangster_boss:= assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")),\n   dept:= \"\u8b66\u6821\u5b78\u751f\",\n   actors := assert_single((select Actor filter .name in {\"\u9673\u51a0\u5e0c\"})),\n};\n</code></pre></p>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#alias","title":"\u5efa\u7acb<code>alias</code>","text":"<p>\u7531\u65bc\u6bcf\u6b21\u90fd\u8981\u4f7f\u7528<code>(select ... filter ... .xxx=ooo)</code>\u7684\u8a9e\u6cd5\u4f86\u9078\u64c7<code>object</code>\u9817\u70ba\u9ebb\u7169\uff0c\u91dd\u5c0d\u5e38\u7528\u5230\u7684<code>object</code>\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728schema\u4e2d\u5b9a\u7fa9<code>alias</code>\uff0c\u65b9\u4fbf\u53d6\u7528\u3002\u6211\u5011\u9019\u908a\u5b9a\u7fa9\u4e86\u4e00\u500b<code>hon</code>\uff08\u97d3\u741b\uff09\u3001<code>lau</code>\uff08\u5289\u5efa\u660e\uff09\u53ca<code>year_1992</code>\uff081992\u5e74\uff09\u7684<code>alias</code>\u3002 scenes/scene01/schema.esdl<pre><code>alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\nalias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n\nalias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                    filter .fuzzy_year = 1992 \n                                    and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                    and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                    and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                    and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                    and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                    and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n);\n</code></pre> \u65bc<code>year_1992</code>\u4e2d\uff0c\u6211\u5011\u7528\u5230\u4e86?=<code>operator</code>\u3002<code>?=</code>\u9664\u4e86\u50cf<code>=</code>\u53ef\u4ee5\u6bd4\u8f03\u5169\u500b<code>set</code>\u5916\uff0c\u9084\u53ef\u4ee5\u6bd4\u8f03\u7a7a<code>set</code>\u3002\u7576\u5169\u500b<code>set</code>\u90fd\u70ba\u7a7a\u6642\uff0c\u6703\u8fd4\u56de<code>true</code>\u3002\u7576\u6709\u4e9b<code>property</code>\u53ef\u4ee5\u70ba\u7a7a<code>set</code>\u6642\uff0c<code>?=</code>\u662f\u500b\u975e\u5e38\u597d\u7528\u7684\u5de5\u5177\u3002</p> <p>\u7a7a<code>set</code>\u9700\u8981\u578b\u5225</p> <p>\u7a7a<code>set</code>\u524d\u5225\u5fd8\u4e86\u52a0\u4e0a\u578b\u5225\u4f86<code>casting</code>\u3002</p> alias year_1992\u7684\u53e6\u4e00\u7a2e\u5beb\u6cd5 <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>fuzzy_fmt</code>\u9019\u500b<code>computed property</code>\u4f86\u505a\u70ba<code>filter</code>\u7684\u689d\u4ef6\u3002 <pre><code>alias year_1992:= assert_exists(assert_single((select FuzzyTime filter .fuzzy_fmt=\"1992/MM/DD_HH24:MI:SS_ID\")));\n</code></pre> \u9019\u7a2e\u5beb\u6cd5\u6bd4\u8f03\u5feb\u901f\uff0c\u662f\u6211\u5be6\u969b\u5bebquery\u6703\u7528\u7684\u65b9\u6cd5\u3002\u4f46\u5728\u5b9a\u7fa9schema\u6642\uff0c\u6211\u53cd\u800c\u6bd4\u8f03\u559c\u6b61\u539f\u5148\u90a3\u7a2e\u76f4\u63a5\u4e86\u7576\u7684\u5beb\u6cd5\u3002</p>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#aliasfunction","title":"\u7de8\u5beb\u6e2c\u8a66<code>alias</code>\u7684<code>function</code>","text":"<p>\u6211\u5011\u5728<code>alias</code>\u524d\u90fd\u52a0\u4e0a\u4e86<code>assert_exists()</code>\u53ca<code>assert_single()</code>\uff0c\u9019\u6a23\u53ef\u4ee5\u78ba\u4fdd\u6bcf\u500b<code>alias</code>\u53ea\u6703\u8fd4\u56de\u525b\u597d\u4e00\u500b<code>object</code>\u3002\u6211\u81ea\u5df1\u6703\u7fd2\u6163\u5beb\u4e00\u500b\u540d\u70ba<code>test_alias</code>\u7684<code>function</code>\u4f86\u505a\u6e2c\u8a66\uff1a scenes/scene01/schema.esdl<pre><code>function test_alias() -&gt; bool\nusing (all({\n        test_scene01_alias(),\n    })\n);\n\nfunction test_scene01_alias() -&gt; bool\nusing (all({\n        (exists hon),          \n        (exists lau),\n        (exists year_1992),   \n    })\n);\n</code></pre></p> <p><code>function</code>\u7684\u8a9e\u6cd5</p> <p>\u7fd2\u6163\u5bebPython\u7684\u670b\u53cb\uff0c\u5e38\u5e38\u6703\u5728\u5b9a\u7fa9<code>function</code>\u6642\uff0c\u5728<code>()</code>\u5f8c\u52a0\u4e0a<code>:</code>\u3002</p> <p><code>test_alias</code>\u4e2d\u6703\u5305\u542b\u591a\u500b\u5834\u666f\u7684sub-test\uff08\u5982<code>test_scene01_alias</code>\uff09\uff0c\u7576\u6bcf\u4e00\u500b\u5834\u666f\u7684<code>sub-test</code>\u90fd\u8fd4\u56de<code>true</code>\u6642\uff0c<code>all</code>\u6703\u8fd4\u56de<code>true</code>\uff0c\u5426\u5247\u6703\u5831\u932f\u3002\u800c\u6211\u5011\u5229\u7528<code>exists</code>\u6aa2\u67e5\u5404\u5834\u666f\u4e2d\u7684<code>alias</code>\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5168\u90e8\u90fd\u5b58\u5728\u7684\u8a71\uff0c<code>all</code>\u6703\u8fd4\u56de<code>true</code>\uff0c\u5426\u5247\u6703\u5831\u932f\u3002</p> <p>\u5831\u932f\u8a0a\u606f</p> <pre><code>edgedb error: CardinalityViolationError: assert_exists violation: expression returned an empty set\n</code></pre> <p>\u9019\u9ebc\u4e00\u4f86\u7576\u6211\u5011\u5728\u64cd\u4f5c\u8cc7\u6599\u5eab\u6642\uff0c\u53ef\u4ee5\u96a8\u6642\u900f\u904e<code>test_alias</code>\u4f86\u78ba\u8a8d\u6bcf\u4e00\u500b<code>alias</code>\uff0c\u662f\u5426\u90fd\u5982\u9810\u671f\u5730\u8fd4\u56de\u4e86\u525b\u597d\u4e00\u500b<code>object</code>\u3002</p> make end migration here\uff08<code>scenes/scene01/schema.esdl</code>\uff09 <pre><code>did you create alias 'default::hon'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create alias 'default::lau'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create alias 'default::year_1992'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_scene01_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#test_alias","title":"\u6e2c\u8a66<code>test_alias</code>","text":"scenes/scene01/query.edgeql<pre><code># end migration needs to be applied before running this query\nselect test_alias();\n</code></pre>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"<p>\u56e0\u70ba\u525b\u525b\u5df2\u7d93\u900f\u904e<code>test_alias</code>\u6e2c\u8a66\u4e86\u6240\u6709<code>alias</code>\uff0c\u6240\u4ee5\u9019\u88e1\u6211\u5011\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u5011\u5728<code>insert</code>\u9019\u500b<code>scene</code>\u6642\uff0c\u9664\u4e86\u540c\u6642<code>insert</code> <code>\u4f5b\u5802</code>\u9019\u500b<code>Location</code> <code>object</code>\u5916\uff0c\u4e5f\u540c\u6642\u5c07\u5176\u6307\u5b9a\u70ba<code>where</code> <code>multi link</code>\u7684\u503c\u3002\u9019\u6a23\u7684\u6a21\u5f0f\u5728<code>EdgeQL</code>\u7a31\u70banested inserts\uff0c\u662f\u76f8\u7576\u5e38\u898b\u4e14\u5be6\u7528\u7684\u3002</p> scenes/scene01/query.edgeql<pre><code>insert Scene {\n    title:= \"\u97d3\u741b\u521d\u73fe\",\n    detail:= \"\u97d3\u741b\u6e96\u5099\u6d3e\u9063\u591a\u500b\u8eab\u5bb6\u8f03\u70ba\u6e05\u767d\u7684\u5c0f\u5f1f\u81e5\u5e95\u81f3\u9999\u6e2f\u8b66\u968a\uff0c\u5305\u62ec\u5efa\u660e\u3002\" ++\n             \"\u4ed6\u5411\u5c0f\u5f1f\u5011\u8b1b\u8ff0\u8457\u81ea\u5df1\u7684\u904e\u53bb\uff0c\u4e26\u8aaa\u81ea\u5df1\u4e0d\u76f8\u4fe1\u7b97\u547d\u5148\u751f\u6240\u8aaa\u7684\" ++\n             \"\u300c\u4e00\u5c07\u529f\u6210\u842c\u9aa8\u67af\u300d\u3002\u4ed6\u8a8d\u70ba\u51fa\u4f86\u6df7\u7684\uff0c\u672a\u4f86\u7684\u8def\u600e\u9ebc\u8d70\u61c9\u8a72\u7531\u81ea\u5df1\u6c7a\u5b9a\u3002\",\n    remarks:= \"1.\u5047\u8a2d\u6b64\u5834\u666f\u70ba1992\u5e74\u3002\",  \n    who:= {hon, lau},\n    `when`:= year_1992,\n    where:= (insert Location {name:= \"\u4f5b\u5802\"}) ,   \n    references:= [(\"\u7dad\u57fa\u767e\u79d1-\u7121\u9593\u9053\", \"https://zh.wikipedia.org/zh-tw/%E7%84%A1%E9%96%93%E9%81%93\"),\n                  (\"\u9999\u6e2f\u8b66\u5bdf\u8077\u7d1a\", \"https://zh.wikipedia.org/zh-tw/%E9%A6%99%E6%B8%AF%E8%AD%A6%E5%AF%9F%E8%81%B7%E7%B4%9A\")]\n};\n</code></pre>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#query-review","title":"Query review","text":"Query review scenes/scene01/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 1992};\n\ninsert Actor {\n     name:= \"\u66fe\u5fd7\u5049\",\n     eng_name:= \"Eric\",\n     nickname:= \"\u734e\u8001\",\n};\n\ninsert GangsterBoss {\n    name:= \"\u97d3\u741b\",\n    nickname:= \"\u741b\u54e5\",\n    classic_lines:= [\"\u4e00\u5c07\u529f\u6210\u842c\u9aa8\u67af\"],\n    actors := assert_single((select Actor filter .name = \"\u66fe\u5fd7\u5049\")),\n};\n\ninsert Actor {\n    name:= \"\u9673\u51a0\u5e0c\",\n    eng_name:= \"Edison\",\n};\n\ninsert GangsterSpy {\n   name:= \"\u5289\u5efa\u660e\",\n   nickname:= \"\u5289\u4ed4\",\n   gangster_boss:= assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")),\n   dept:= \"\u8b66\u6821\u5b78\u751f\",\n   actors := assert_single((select Actor filter .name in {\"\u9673\u51a0\u5e0c\"})),\n};\n\nselect test_alias();\n\ninsert Scene {\n    title:= \"\u97d3\u741b\u521d\u73fe\",\n    detail:= \"\u97d3\u741b\u6e96\u5099\u6d3e\u9063\u591a\u500b\u8eab\u5bb6\u8f03\u70ba\u6e05\u767d\u7684\u5c0f\u5f1f\u81e5\u5e95\u81f3\u9999\u6e2f\u8b66\u968a\uff0c\u5305\u62ec\u5efa\u660e\u3002\" ++\n             \"\u4ed6\u5411\u5c0f\u5f1f\u5011\u8b1b\u8ff0\u8457\u81ea\u5df1\u7684\u904e\u53bb\uff0c\u4e26\u8aaa\u81ea\u5df1\u4e0d\u76f8\u4fe1\u7b97\u547d\u5148\u751f\u6240\u8aaa\u7684\" ++\n             \"\u300c\u4e00\u5c07\u529f\u6210\u842c\u9aa8\u67af\u300d\u3002\u4ed6\u8a8d\u70ba\u51fa\u4f86\u6df7\u7684\uff0c\u672a\u4f86\u7684\u8def\u600e\u9ebc\u8d70\u61c9\u8a72\u7531\u81ea\u5df1\u6c7a\u5b9a\u3002\",\n    remarks:= \"1.\u5047\u8a2d\u6b64\u5834\u666f\u70ba1992\u5e74\u3002\",  \n    who:= {hon, lau},\n    `when`:= year_1992,\n    where:= (insert Location {name:= \"\u4f5b\u5802\"}) ,   \n    references:= [(\"\u7dad\u57fa\u767e\u79d1-\u7121\u9593\u9053\", \"https://zh.wikipedia.org/zh-tw/%E7%84%A1%E9%96%93%E9%81%93\"),\n                  (\"\u9999\u6e2f\u8b66\u5bdf\u8077\u7d1a\", \"https://zh.wikipedia.org/zh-tw/%E9%A6%99%E6%B8%AF%E8%AD%A6%E5%AF%9F%E8%81%B7%E7%B4%9A\")]\n};\n</code></pre>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#_3","title":"\u7121\u9593\u5047\u8a2d","text":"<p>\u7406\u8ad6\u4e0a\uff0c\u6211\u5011\u61c9\u8a72\u8655\u7406\u5efa\u660e\u7531<code>Gangster object</code>\u8f49\u8b8a\u5230<code>GangsterSpy object</code>\u7684\u904e\u7a0b\uff0c\u4f46\u9019\u5c0d\u65bc<code>scene01</code>\u4f86\u8aaa\uff0c\u53ef\u80fd\u592a\u904e\u8907\u96dc\uff0c\u6240\u4ee5\u5728\u6b64\u8655\u76f4\u63a5<code>insert</code>\u5efa\u660e\u70ba<code>GangsterSpy object</code>\u3002\u540c\u7406\uff0c\u6211\u5011\u5c07\u65bc<code>scene02</code>\u76f4\u63a5<code>insert</code>\u6c38\u4ec1\u70ba<code>PoliceSpy object</code>\uff0c\u800c\u4e0d\u8655\u7406\u5176\u7531<code>Police object</code>\u8f49\u8b8a\u5230<code>PoliceSpy object</code>\u7684\u904e\u7a0b\u3002</p>","tags":["alias","function"]},{"location":"scenes/scene01/scene01/#_4","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u4f5b\u5802\u524d\u516d\u500b\u9aa8\u7070\u7f48\u6697\u6307\u7576\u5e74\u97d3\u741b\u6b7b\u65bc\u5c6f\u9580\u7684\u516d\u500b\u5144\u5f1f\u3002\u4ed6\u85c9\u796d\u62dc\u70ba\u7531\uff0c\u65bc\u4e00\u773e\u5c0f\u5f1f\u9762\u524d\u5c55\u73fe\u5176\u300c\u4ec1\u7fa9\u4e4b\u98a8\u300d\u3002</p>","tags":["alias","function"]},{"location":"scenes/scene02/scene02/","title":"02 - \u6211\u60f3\u8ddf\u4ed6\u63db","text":"","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#full-schema-preview","title":"Full schema preview","text":"Full schema preview start1st migrationend migration scenes/scene01/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n}\n</code></pre> scenes/scene02/schema_1st_migration.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n}\n</code></pre> scenes/scene02/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n}\n</code></pre>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u8449\u6821\u9577\u8207\u9ec3sir\u6e96\u5099\u65bc\u8b66\u6821\u65b0\u751f\u4e2d\uff0c\u6311\u9078\u9069\u5408\u7684\u65b0\u4eba\u81e5\u5e95\u81f3\u9ed1\u793e\u6703\u3002\u6c38\u4ec1\u5929\u8cc7\u512a\u7570\uff0c\u89c0\u5bdf\u5165\u5fae\uff0c\u70ba\u81e5\u5e95\u7684\u4e0d\u4e8c\u4eba\u9078\u3002\u5169\u4eba\u6307\u793a\u6c38\u4ec1\u5047\u88dd\u9b27\u4e8b\u4e26\u8d81\u6a5f\u5c07\u5176\u8d95\u51fa\u8b66\u6821\uff0c\u800c\u5efa\u660e\u6b64\u6642\u525b\u597d\u5165\u5b78\uff0c\u770b\u8457\u6c38\u4ec1\u80cc\u5f71\u5583\u5583\u81ea\u8a9e\u9053\uff1a\u300c\u6211\u60f3\u8ddf\u4ed6\u63db\u300d\u3002\u6216\u8a31\u5efa\u660e\u5f9e\u4e00\u958b\u59cb\u5c31\u771f\u7684\u60f3\u505a\u500b\u597d\u4eba\uff1f</p>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#edgeql-query","title":"EdgeQL query","text":"","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#insert","title":"<code>insert</code>\u9673\u6c38\u4ec1\u53ca\u5176\u5c11\u5e74\u6642\u671f\u6f14\u54e1\u4f59\u6587\u6a02","text":"<p>\u7df4\u7fd2\u4f7f\u7528<code>nested inserts</code>\u4f86\u540c\u6642<code>insert</code>\u9673\u6c38\u4ec1\u53ca\u6f14\u54e1\u4f59\u6587\u6a02\u3002 scenes/scene02/query.edgeql<pre><code>insert PoliceSpy {\n      name:=\"\u9673\u6c38\u4ec1\",\n      nickname:= \"\u4ec1\u54e5\",\n      police_rank:= PoliceRank.Protected,\n      gangster_boss:= hon,\n      actors := (insert Actor {\n                  name:= \"\u4f59\u6587\u6a02\",\n                  eng_name:= \"Shawn\",\n                  nickname:= \"\u516d\u53d4\",\n      }),\n};\n</code></pre></p>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#insert_1","title":"<code>insert</code>\u9ec3\u5fd7\u8aa0\u53ca\u5176\u6f14\u54e1\u9ec3\u79cb\u751f","text":"<p>\u7df4\u7fd2\u4f7f\u7528<code>nested inserts</code>\u4f86\u540c\u6642<code>insert</code>\u9ec3\u5fd7\u8aa0\u53ca\u6f14\u54e1\u9ec3\u79cb\u751f\u3002 scenes/scene02/query.edgeql<pre><code>insert Police {\n      name:= \"\u9ec3\u5fd7\u8aa0\",\n      nickname:= \"\u9ec3sir\",\n      police_rank:= PoliceRank.SIP, \n      actors := (insert Actor {\n                  name:= \"\u9ec3\u79cb\u751f\",\n                  eng_name:= \"Anthony\",\n                  nickname:= \"\u5927\u98db\u54e5\",\n      }),\n};\n</code></pre></p>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#aliasaliasfunction","title":"\u5efa\u7acb<code>alias</code>\u53ca\u7de8\u5beb\u6e2c\u8a66<code>alias</code>\u7684<code>function</code>","text":"<p>\u5efa\u7acb\u4e00\u500b<code>chen</code>\uff08\u9673\u6c38\u4ec1\uff09\u53ca<code>wong</code>\uff08\u9ec3\u5fd7\u8aa0\uff09\u7684<code>alias</code>\u3002 scenes/scene02/schema_1st_migration.esdl<pre><code>alias chen:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u9673\u6c38\u4ec1\")));\nalias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n</code></pre> \u65b0\u589e<code>test_scene02_alias</code> <code>function</code>\uff0c\u4e26\u66f4\u65b0<code>test_alias</code>\u3002 scenes/scene02/schema_1st_migration.esdl<pre><code>function test_alias() -&gt; bool\nusing (all({\n        test_scene01_alias(),\n        test_scene02_alias(),\n    })\n);\n\nfunction test_scene02_alias() -&gt; bool\nusing (all({\n        (exists chen),          \n        (exists wong), \n    })\n);\n</code></pre></p> make 1st migration here\uff08<code>scenes/scene02/schema_1st_migration.esdl</code>\uff09 <pre><code>did you create alias 'default::chen'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create alias 'default::wong'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_scene02_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you alter function 'default::test_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#test_alias","title":"\u6e2c\u8a66<code>test_alias</code>","text":"scenes/scene02/query.edgeql<pre><code># 1st migration needs to be applied before running this query\nselect test_alias();\n</code></pre>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#chenlaucontact","title":"\u5efa\u7acb<code>ChenLauContact</code>","text":"<p>\u7531\u65bc\u5efa\u660e\u8207\u6c38\u4ec1\u65bc\u8b66\u6821\u9580\u53e3\u5c31\u5df2\u898b\u904e\u5f7c\u6b64\uff0c\u9019\u52fe\u8d77\u6211\u5011\u7684\u597d\u5947\u5fc3\uff0c\u60f3\u77e5\u9053\u5169\u4eba\u7a76\u7adf\u65bc\u5287\u4e2d\u898b\u9762\u6216\u806f\u7d61\u4e86\u5e7e\u6b21\uff1f \u65bc\u662f\u6211\u5011\u9078\u64c7\u5efa\u7acb\u4e00\u500b<code>ChenLauContact</code>\u7684<code>object type</code>\u4f86\u8a18\u9304\u3002 <code>ChenLauContact</code> <code>extending</code> <code>Event</code>\u800c\u4f86\uff1a</p> <ul> <li>\u65b0\u589e\u4e00\u500b<code>how</code> <code>property</code>\u4f86\u63cf\u8ff0\u806f\u7d61\u65b9\u5f0f\u3002</li> <li><code>overloaded</code>\u4e86<code>who</code>\u9019\u500b<code>multi link</code>\uff0c\u7d66\u4e88\u9810\u8a2d\u503c<code>{chen, lau}</code>\u3002</li> </ul> scenes/scene02/schema.esdl<pre><code>type ChenLauContact extending Event {\n    how: str;\n    overloaded who: Character {default:= {chen, lau}}\n}\n</code></pre> make end migration here\uff08<code>scenes/scene02/schema.esdl</code>\uff09 <pre><code>did you create object type 'default::ChenLauContact'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#insert-chenlaucontact","title":"<code>insert</code> <code>ChenLauContact</code>","text":"scenes/scene02/query.edgeql<pre><code># end migration needs to be applied before running this query\ninsert ChenLauContact {\n      how:= \"\u9762\u5c0d\u9762\",\n      detail:= \"\u6c38\u4ec1\u5047\u88dd\u9b27\u4e8b\u88ab\u8d95\u51fa\u8b66\u6821\u6642\uff0c\u8207\u5efa\u660e\u5728\u9580\u53e3\u6709\u4e00\u9762\u4e4b\u7de3\u3002\",\n      `when`:= year_1992,\n      where:= (insert Landmark {name:= \"\u8b66\u6821\"}),\n};\n</code></pre>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene02/query.edgeql<pre><code>insert Scene {\n      title:= \"\u6211\u60f3\u8ddf\u4ed6\u63db\",\n      detail:= \"\u8449\u6821\u9577\u8207\u9ec3sir\u6e96\u5099\u65bc\u8b66\u6821\u65b0\u751f\u4e2d\uff0c\u6311\u9078\u9069\u5408\u7684\u65b0\u4eba\u81e5\u5e95\u81f3\u9ed1\u793e\u6703\u3002\" ++\n               \"\u6c38\u4ec1\u5929\u8cc7\u512a\u7570\uff0c\u89c0\u5bdf\u5165\u5fae\uff0c\u70ba\u81e5\u5e95\u7684\u4e0d\u4e8c\u4eba\u9078\u3002\u5169\u4eba\u6307\u793a\u6c38\u4ec1\u5047\u88dd\u9b27\" ++\n               \"\u4e8b\u4e26\u8d81\u6a5f\u5c07\u5176\u8d95\u51fa\u8b66\u6821\uff0c\u800c\u5efa\u660e\u6b64\u6642\u525b\u597d\u5165\u5b78\uff0c\u770b\u8457\u6c38\u4ec1\u80cc\u5f71\u5583\u5583\u81ea\" ++\n               \"\u8a9e\u9053\uff1a\u300c\u6211\u60f3\u8ddf\u4ed6\u63db\u300d\u3002\u6216\u8a31\u5efa\u660e\u5f9e\u4e00\u958b\u59cb\u5c31\u771f\u7684\u60f3\u505a\u500b\u597d\u4eba\uff1f\",\n      remarks:= \"1.\u5047\u8a2d\u9ec3Sir\u65bc1992\u5e74\u5b98\u968e\u70ba`SIP`\u3002\",     \n      who:= {wong, chen, lau},\n      `when`:= year_1992,\n      where:= assert_single((select Landmark filter .name=\"\u8b66\u6821\")),    \n};\n</code></pre>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#query-review","title":"Query review","text":"Query review scenes/scene02/query.edgeql<pre><code>insert PoliceSpy {\n      name:=\"\u9673\u6c38\u4ec1\",\n      nickname:= \"\u4ec1\u54e5\",\n      police_rank:= PoliceRank.Protected,\n      gangster_boss:= hon,\n      actors := (insert Actor {\n                  name:= \"\u4f59\u6587\u6a02\",\n                  eng_name:= \"Shawn\",\n                  nickname:= \"\u516d\u53d4\",\n      }),\n};\n\ninsert Police {\n      name:= \"\u9ec3\u5fd7\u8aa0\",\n      nickname:= \"\u9ec3sir\",\n      police_rank:= PoliceRank.SIP, \n      actors := (insert Actor {\n                  name:= \"\u9ec3\u79cb\u751f\",\n                  eng_name:= \"Anthony\",\n                  nickname:= \"\u5927\u98db\u54e5\",\n      }),\n};\n\nselect test_alias();\n\ninsert ChenLauContact {\n      how:= \"\u9762\u5c0d\u9762\",\n      detail:= \"\u6c38\u4ec1\u5047\u88dd\u9b27\u4e8b\u88ab\u8d95\u51fa\u8b66\u6821\u6642\uff0c\u8207\u5efa\u660e\u5728\u9580\u53e3\u6709\u4e00\u9762\u4e4b\u7de3\u3002\",\n      `when`:= year_1992,\n      where:= (insert Landmark {name:= \"\u8b66\u6821\"}),\n};\n\ninsert Scene {\n      title:= \"\u6211\u60f3\u8ddf\u4ed6\u63db\",\n      detail:= \"\u8449\u6821\u9577\u8207\u9ec3sir\u6e96\u5099\u65bc\u8b66\u6821\u65b0\u751f\u4e2d\uff0c\u6311\u9078\u9069\u5408\u7684\u65b0\u4eba\u81e5\u5e95\u81f3\u9ed1\u793e\u6703\u3002\" ++\n               \"\u6c38\u4ec1\u5929\u8cc7\u512a\u7570\uff0c\u89c0\u5bdf\u5165\u5fae\uff0c\u70ba\u81e5\u5e95\u7684\u4e0d\u4e8c\u4eba\u9078\u3002\u5169\u4eba\u6307\u793a\u6c38\u4ec1\u5047\u88dd\u9b27\" ++\n               \"\u4e8b\u4e26\u8d81\u6a5f\u5c07\u5176\u8d95\u51fa\u8b66\u6821\uff0c\u800c\u5efa\u660e\u6b64\u6642\u525b\u597d\u5165\u5b78\uff0c\u770b\u8457\u6c38\u4ec1\u80cc\u5f71\u5583\u5583\u81ea\" ++\n               \"\u8a9e\u9053\uff1a\u300c\u6211\u60f3\u8ddf\u4ed6\u63db\u300d\u3002\u6216\u8a31\u5efa\u660e\u5f9e\u4e00\u958b\u59cb\u5c31\u771f\u7684\u60f3\u505a\u500b\u597d\u4eba\uff1f\",\n      remarks:= \"1.\u5047\u8a2d\u9ec3Sir\u65bc1992\u5e74\u5b98\u968e\u70ba`SIP`\u3002\",     \n      who:= {wong, chen, lau},\n      `when`:= year_1992,\n      where:= assert_single((select Landmark filter .name=\"\u8b66\u6821\")),    \n};\n</code></pre>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene02/scene02/#_2","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u8449\u6821\u9577\u65bc1991\u5e74\uff0c\u5e74\u7d0442\u6b72\uff0c\u4e14\u5df2\u64d4\u4efb\u8b66\u6821\u6821\u9577\u5341\u5e74\uff08\u7531\u7121\u9593\u9053\u2161\u5f97\u77e5\uff09\u3002\u53c3\u8003\u7dad\u57fa\u767e\u79d1\u6240\u8ff0\uff0c\u73fe\u5728\u9999\u6e2f\u8b66\u5bdf\u5b78\u9662\u6821\u9577\u7684\u5b98\u968e\u7d04\u70ba\u52a9\u7406\u8655\u9577\u3002\u5373\u4f7f\u662f\u524d\u8eab\u7684\u8b66\u5bdf\u8a13\u7df4\u5b78\u6821\uff0c\u6821\u9577\u5b98\u968e\u4e5f\u61c9\u6700\u5c11\u70ba\u8b66\u53f8\u7d1a\u5225\u4ee5\u4e0a\u3002\u9019\u9ebc\u4e00\u4f86\uff0c\u5c31\u4ee3\u8868\u8449\u6821\u957732\u6b72\u6642\uff0c\u5df2\u7d93\u8eab\u5c45\u9ad8\u4f4d\uff0c\u5347\u8077\u7684\u901f\u5ea6\u582a\u6bd4\u5750\u706b\u7bad\u4e00\u822c\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5287\u4e2d\u9ec3\u5fd7\u8aa0\u65bc2002\u5e74\u6642\uff0c\u5e74\u7d0446\u6b72\uff0c\u4e5f\u50c5\u64d4\u4efb\u8b66\u53f8\u3002</p>","tags":["nested inserts","overloaded"]},{"location":"scenes/scene03/scene03/","title":"03 - \u9ed1\u767d\u985b\u5012","text":"","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#full-schema-preview","title":"Full schema preview","text":"Full schema preview start1st migrationend migration scenes/scene02/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n}\n</code></pre> scenes/scene03/schema_1st_migration.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n}\n</code></pre> scenes/scene03/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n}\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u6c38\u4ec1\u7559\u4e0b\u591a\u6b21\u6848\u5e95\uff0c\u4e26\u66fe\u7d93\u88ab\u5efa\u660e\u902e\u6355\uff0c\u4f46\u4e5f\u9010\u6f38\u53d6\u5f97\u9ed1\u793e\u6703\u7684\u4fe1\u4efb\u3002\u5efa\u660e\u7562\u696d\u5f8c\u5247\u7531\u8b66\u54e1\uff08<code>PC</code>\uff09\u505a\u8d77\uff0c\u8868\u73fe\u512a\u7570\uff0c\u7372\u9762\u8a66\u6649\u965e\u898b\u7fd2\u7763\u5bdf\uff08<code>PI</code>\uff09\u7684\u6a5f\u6703\u3002\u5169\u4eba\u7684\u8def\u5c31\u50cf\u9ed1\u767d\u985b\u5012\u4e00\u822c\uff0c\u8ab0\u662f\u597d\u4eba\uff0c\u8ab0\u53c8\u662f\u58de\u4eba\u5462\uff1f</p>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#edgeql-query","title":"EdgeQL query","text":"","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#insert1994","title":"<code>insert</code>\u6b64\u5834\u666f\u6642\u95931994\u5e74","text":"scenes/scene03/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 1994};\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#insert","title":"<code>insert</code>\u5730\u6a19\u8b66\u5bdf\u5c40","text":"scenes/scene03/query.edgeql<pre><code>insert Landmark {name:= \"\u8b66\u5bdf\u5c40\"};\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#aliasaliasfunction","title":"\u5efa\u7acb<code>alias</code>\u53ca\u7de8\u5beb\u6e2c\u8a66<code>alias</code>\u7684<code>function</code>","text":"<p>\u5b9a\u7fa9\u4e00\u500b<code>year_1994</code>\uff081994\u5e74\uff09\u53ca<code>police_station</code>\uff08\u8b66\u5bdf\u5c40\uff09\u7684<code>alias</code>\u3002 scenes/scene03/schema_1st_migration.esdl<pre><code>alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                    filter .fuzzy_year = 1994 \n                                    and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                    and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                    and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                    and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                    and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                    and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n);\n\nalias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n</code></pre> \u65b0\u589e<code>test_scene03_alias</code> <code>function</code>\uff0c\u4e26\u66f4\u65b0<code>test_alias</code>\u3002 scenes/scene03/schema_1st_migration.esdl<pre><code>function test_alias() -&gt; bool\nusing (all({\n        test_scene01_alias(),\n        test_scene02_alias(),\n        test_scene03_alias(),\n    })\n);\n\nfunction test_scene03_alias() -&gt; bool\nusing (all({\n        (exists year_1994),   \n        (exists police_station),   \n    })\n);\n</code></pre></p> make 1st migration here\uff08<code>scenes/scene03/schema_1st_migration.esdl</code>\uff09 <pre><code>did you create alias 'default::police_station'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create alias 'default::year_1994'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_scene03_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you alter function 'default::test_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#test_alias","title":"\u6e2c\u8a66<code>test_alias</code>","text":"scenes/scene03/query.edgeql<pre><code># 1st migration needs to be applied before running this query\nselect test_alias();\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#update-lau","title":"<code>update</code> <code>lau</code>","text":"<p>\u5047\u8a2d\u5efa\u660e\u7531\u5b78\u6821\u7562\u696d\u81f31994\u5e74\u9593\uff0c\u5b98\u968e\u70ba<code>PC</code>\u3002 scenes/scene03/query.edgeql<pre><code>update lau set { \n    police_rank:= PoliceRank.PC\n};\n</code></pre></p>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#insert-chenlaucontact","title":"<code>insert</code> <code>ChenLauContact</code>","text":"scenes/scene03/query.edgeql<pre><code>insert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u5efa\u660e\u902e\u6355\u6c38\u4ec1\u4e26\u5728\u8b66\u5c40\u66ff\u5176\u505a\u7b46\u9304\u3002\",\n    `when`:= year_1994,\n    where:= police_station,\n};\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#archivecriminalrecord","title":"\u5efa\u7acb<code>Archive</code>\u53ca<code>CriminalRecord</code>","text":"<p>\u6211\u5011\u9700\u8981\u4e00\u500b<code>object type</code>\u4f86\u8a18\u9304\u6c38\u4ec1\u7684\u72af\u7f6a\u8a18\u9304\u3002\u6211\u5011\u9078\u64c7\u5efa\u7acb\u4e00\u500b<code>abstract object type</code> <code>Archive</code>\uff0c\u4e26\u5efa\u7acb\u4e00\u500b<code>object type</code> <code>CriminalRecord</code>\u4f86<code>extending</code> <code>Archive</code>\u3002</p> <p><code>CriminalRecord</code>\u6709\u56db\u500b<code>property</code>\u53ca\u4e00\u500b<code>multi link</code>\uff1a</p> <ul> <li><code>ref_no</code> <code>property</code>\u70ba\u5fc5\u586b\u7684\u6a94\u6848\u7de8\u865f\uff0c\u4e26\u4f7f\u7528<code>constraint exclusive</code>\uff0c\u78ba\u4fdd\u6b64\u7de8\u865f\u4e0d\u6703\u91cd\u8986\u3002</li> <li><code>code</code> <code>property</code>\u70ba\u5fc5\u586b\u7684\u72af\u7f6a\u4ee3\u78bc\u3002</li> <li><code>involved</code> <code>multi link</code>\u70ba\u4e00\u773e\u6d89\u6848\u4eba\u7b49\u3002</li> <li><code>created_at</code> <code>property</code>\u70ba\u6a94\u6848\u5efa\u7acb\u6642\u9593\u3002\u4f7f\u7528<code>rewrite</code>\u5728<code>insert</code>\u6642\uff0c\u4ee5<code>datetime_of_statement()</code>\u70ba\u9810\u8a2d\u503c\u3002\u6b64\u5916\uff0c\u6211\u5011\u9084\u52a0\u4e0a<code>readonly := true</code>\u7684\u9650\u5236\uff0c\u9019\u9ebc\u4e00\u4f86\u5c31\u7121\u6cd5\u4fee\u6539\u6a94\u6848\u7684\u5efa\u7acb\u6642\u9593\u3002</li> <li><code>modified_at</code> <code>property</code>\u70ba\u6a94\u6848\u4fee\u6539\u6642\u9593\u3002\u4f7f\u7528<code>rewrite</code>\u5728<code>update</code>\u6642\uff0c\u81ea\u52d5\u4ee5<code>datetime_of_statement()</code>\u8986\u5beb\u3002</li> </ul> scenes/scene03/schema.esdl<pre><code>abstract type Archive;\n\ntype CriminalRecord extending Archive {\n    required ref_no: str {\n        constraint exclusive;\n    };\n    required code: str;\n    multi involved: Character;\n    created_at: datetime {\n        readonly := true;\n        rewrite insert using (datetime_of_statement())\n    }\n    modified_at: datetime {\n        rewrite update using (datetime_of_statement())\n    }\n}\n</code></pre> make end migration here\uff08<code>scenes/scene03/schema.esdl</code>\uff09 <pre><code>did you create object type 'default::Archive'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create object type 'default::CriminalRecord'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#insert-criminalrecord","title":"<code>insert</code> <code>CriminalRecord</code>","text":"<p>\u6211\u5011\u9078\u64c7\u4f7f\u7528<code>tuple</code>\u642d\u914d<code>for-loop</code>\u4f86<code>insert</code>\u7247\u4e2d\u51fa\u73fe\u7684\u5169\u6b21\u72af\u7f6a\u8a18\u9304\uff0c\u9019\u500b\u6a21\u5f0f\u5728EdgeDB\u4e2d\u7a31\u70babulk inserts\u3002</p> <ul> <li>\u65bc<code>with</code>\u5340\u584a\u4e2d\uff0c\u5efa\u7acb\u4e00\u500b<code>records</code> <code>set</code>\uff0c\u88e1\u9762\u6709\u5169\u500b<code>tuple</code>\u4ee3\u8868\u5169\u6b21\u72af\u7f6a\u8a18\u9304\u3002<code>tuple</code>\u7684\u7b2c\u4e00\u500b\u5143\u7d20\u70ba<code>ref_no</code>\uff0c\u800c\u7b2c\u4e8c\u500b\u5143\u7d20\u70ba<code>code</code>\u3002</li> <li>\u63a5\u8457\u4f7f\u7528<code>for-loop</code> + <code>union</code> + (<code>insert</code> <code>CriminalRecord</code>)\u7684\u8a9e\u6cd5\uff0c\u4f86<code>insert</code>\u5169\u6b21\u72af\u7f6a\u8a18\u9304\u3002\u6211\u5011\u53ef\u4ee5\u4f7f\u7528<code>.0</code>\u4f86\u53d6\u5f97<code>tuple</code>\u7684\u7b2c\u4e00\u500b\u5143\u7d20\u3001<code>.1</code>\u4f86\u53d6\u5f97<code>tuple</code>\u7684\u7b2c\u4e8c\u500b\u5143\u7d20\uff0c\u4f9d\u6b64\u985e\u63a8\u3002</li> </ul> scenes/scene03/query.edgeql<pre><code># end migration needs to be applied before running this query\nwith records:= {(\"CCR9314768\", \"OFFNCE: A.O.A.B.H   \"), (\"RN992317\", \"CD-POD   \")},\nfor record in records\nunion (insert CriminalRecord {\n                ref_no:= record.0, \n                code:= record.1,\n                involved:= chen,\n});\n</code></pre> <p>\u8a18\u5f97\u52a0\u4e0a<code>union (...)</code></p> <p>\u525b\u958b\u59cb\u63a5\u89f8<code>for-loop</code>\u8a9e\u6cd5\u6642\uff0c\u5f88\u5bb9\u6613\u6703\u5fd8\u8a18\u52a0\u4e0a<code>union</code>\u3002\u6b64\u5916\uff0c<code>union</code>\u5f8c\u9762\u63a5\u7684\u662f<code>()</code>\u800c\u975e<code>{}</code>\uff0c\u9019\u4e5f\u662f\u4e00\u500b\u5e38\u6703\u72af\u932f\u7684\u5730\u65b9\u3002 </p> \u4e5f\u53ef\u4ee5\u4f7f\u7528named tuple\u7684\u8a9e\u6cd5 <pre><code>with records:= {(ref_no:= \"CCR9314768\", code:= \"OFFNCE: A.O.A.B.H   \"), (ref_no:= \"RN992317\", code:= \"CD-POD   \")},\nfor record in records\nunion (insert CriminalRecord {\n                ref_no:= record.ref_no, \n                code:= record.code,\n                involved:= chen,\n});\n</code></pre> \u5982\u679c<code>insert</code>\u9806\u5e8f\u5f88\u91cd\u8981 <p>\u7531\u65bc<code>set</code>\u662f\u7121\u5e8f\u7684\uff0c\u6240\u4ee5<code>insert</code>\u7684\u9806\u5e8f\u4e26\u4e0d\u80fd\u4fdd\u8b49\u3002\u5982\u679c\u60f3\u8981\u6709\u78ba\u5b9a\u7684<code>insert</code>\u9806\u5e8f\uff0c\u9700\u8981\u642d\u914d<code>array</code>\u8207<code>range_unpack</code>\u3002 <pre><code>with records:= [(\"CCR9314768\", \"OFFNCE: A.O.A.B.H   \"), (\"RN992317\", \"CD-POD   \")],\n    record_len:= len(records),\nfor i in range_unpack(range(0, record_len))\nunion (insert CriminalRecord {\n                ref_no:= array_get(records, i).0, \n                code:= array_get(records, i).1, \n                involved:= chen,\n});\n</code></pre> \u5176\u539f\u7406\u662f<code>array</code>\u662f\u6709\u5e8f\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528<code>array_get</code>\u4f86\u7d22\u5f15\uff0c\u800c<code>range_unpack</code>\u53ef\u4ee5\u6709\u5e8f\u5730\u8fd4\u56de<code>range</code>\u5167\u7684\u503c\u3002\u4e0d\u904e\uff0c\u9019\u6a23\u7684\u9700\u6c42\u61c9\u8a72\u4e0d\u592a\u5e38\u898b\u3002</p>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#select-criminalrecord","title":"<code>select</code> <code>CriminalRecord {**}</code>","text":"<p>\u6211\u5011\u53ef\u4ee5\u4f7f\u7528<code>splats</code>\u7684\u8a9e\u6cd5\uff0c\u4f86\u770b\u770b\u5169\u6b21<code>insert</code>\u662f\u5426\u6210\u529f\u3002</p> <code>select type {*}</code> vs <code>select type {**}</code> <ul> <li><code>select type {*}</code>\u53ef\u4ee5\u5217\u51fa\u4e00\u500b<code>type</code>\u7684\u6240\u6709<code>property</code>\u3002</li> <li><code>select type {**}</code>\u9664\u4e86\u53ef\u4ee5\u5217\u51fa<code>select type {*}</code>\u6240\u5217\u51fa\u7684\uff0c\u9084\u53ef\u4ee5\u5217\u51fa<code>type</code>\u6240\u6709\u7684<code>link type</code>\uff08\u4f46\u53ea\u6703\u5217\u51fa\u4e00\u5c64\u6df1\u5ea6\uff0c\u4e0d\u6703\u905e\u8ff4\u5168\u90e8\u5217\u51fa\uff09\u3002</li> </ul> scenes/scene03/query.edgeql<pre><code>select CriminalRecord {**};\n</code></pre> <p><pre><code>{\n  default::CriminalRecord {\n    id: 740a4c4c-bc4b-11ee-b314-afc01e783d2e,\n    code: 'OFFNCE: A.O.A.B.H   ',\n    created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n    modified_at: {},\n    ref_no: 'CCR9314768',\n    involved: {\n      default::PoliceSpy {\n        nickname: '\u4ec1\u54e5',\n        name: '\u9673\u6c38\u4ec1',\n        eng_name: {},\n        id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n        classic_lines: {},\n      },\n    },\n  },\n  default::CriminalRecord {\n    id: 740a56ce-bc4b-11ee-b314-bf9055e83044,\n    code: 'CD-POD   ',\n    created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n    modified_at: {},\n    ref_no: 'RN992317',\n    involved: {\n      default::PoliceSpy {\n        nickname: '\u4ec1\u54e5',\n        name: '\u9673\u6c38\u4ec1',\n        eng_name: {},\n        id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n        classic_lines: {},\n      },\n    },\n  },\n}\n</code></pre> \u5f9e\u4e0a\u8ff0\u7d50\u679c\u53ef\u4ee5\u89c0\u5bdf\u5230\uff1a</p> <ul> <li><code>created_at</code>\u81ea\u52d5\u65bc<code>insert</code>\u6642\uff0c\u7522\u751f\u6a94\u6848\u5efa\u7acb\u6642\u9593\u4e86\u3002</li> <li>\u56e0\u70ba\u6211\u5011\u9084\u6c92\u6709\u5c0d\u6a94\u6848<code>update</code>\uff0c\u6240\u4ee5<code>modified_at</code>\u70ba\u7a7a<code>set</code>\u3002</li> <li>\u6211\u5011\u5728\u8f38\u5165<code>code</code> <code>property</code>\u6642\uff0c\u5728\u5176\u5f8c\u591a\u52a0\u4e86\u8a31\u591a\u7a7a\u683c\uff0c\u8b93\u6211\u5011\u5b78\u7fd2\u5982\u4f55<code>update</code>\u5427\u3002</li> </ul> Timezone <p>\u4e0d\u77e5\u9053\u60a8\u6709\u6c92\u6709\u6ce8\u610f\u5230\u56e0\u70ba<code>created_at</code>\u8207<code>modified_at</code>\u70ba<code>datetime</code>\u578b\u614b\uff0c\u6240\u4ee5\u5176\u662f\u5e36\u6709<code>timezone</code>\u8cc7\u8a0a\u7684\uff08\u9810\u8a2d\u662f<code>UTC</code>\uff09\u3002 \u6216\u8a31\u60a8\u6703\u6709\u885d\u52d5\u60f3\u8981\u5c07\u5176\u8f49\u70ba\u9999\u6e2f\u7576\u5730\u6642\u9593\uff0c\u4f46\u7576\u6642\u9999\u6e2f\u4ecd\u662f\u82f1\u570b\u6b96\u6c11\u5730\uff0c\u6216\u8a31\u6240\u6709\u72af\u7f6a\u8a18\u9304\u6703\u4ee5\u82f1\u570b\u6642\u5340\u7684<code>UTC</code>\u5132\u5b58\u5728\u82f1\u570b\u4f3a\u670d\u5668\u3002 Who knows? \u8b93\u6211\u5011\u66ab\u6642\u63a5\u53d7\u9019\u500b\u8a2d\u5b9a\uff0c\u5373\u4f7f\u5b83\u53ef\u80fd\u662f\u500b\u7f8e\u9e97\u7684\u932f\u8aa4\u3002</p>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#update-criminalrecord","title":"<code>update</code> <code>CriminalRecord</code>","text":"<p><code>for-loop</code>\u9664\u4e86\u53ef\u4ee5\u7528\u5728<code>insert</code>\u5916\uff0c\u4e5f\u80fd\u5920\u7528\u5728<code>update</code>\u3002 \u7531\u65bc<code>code</code> <code>property</code>\u662f<code>str</code>\u578b\u614b\uff0c\u7d93\u904e\u7ffb\u627e\u6587\u4ef6\u4e4b\u5f8c\uff0c\u6211\u5011\u767c\u73fe<code>str_trim_end</code>\u6b63\u597d\u53ef\u4ee5\u6eff\u8db3\u9700\u6c42\u3002 scenes/scene03/query.edgeql<pre><code>for record in CriminalRecord\nunion (\n    update record\n    set {\n        code:= str_trim_end(.code)\n    }\n);\n</code></pre></p>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#select-criminalrecord_1","title":"\u518d\u6b21<code>select</code> <code>CriminalRecord {**}</code>","text":"scenes/scene03/query.edgeql<pre><code>select CriminalRecord {**};\n</code></pre> <p><pre><code>{\n  default::CriminalRecord {\n    id: 740a4c4c-bc4b-11ee-b314-afc01e783d2e,\n    code: 'OFFNCE: A.O.A.B.H',\n    created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n    modified_at: &lt;datetime&gt;'2024-01-26T13:05:35.533826Z',\n    ref_no: 'CCR9314768',\n    involved: {\n      default::PoliceSpy {\n        nickname: '\u4ec1\u54e5',\n        name: '\u9673\u6c38\u4ec1',\n        eng_name: {},\n        id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n        classic_lines: {},\n      },\n    },\n  },\n  default::CriminalRecord {\n    id: 740a56ce-bc4b-11ee-b314-bf9055e83044,\n    code: 'CD-POD',\n    created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n    modified_at: &lt;datetime&gt;'2024-01-26T13:05:35.533826Z',\n    ref_no: 'RN992317',\n    involved: {\n      default::PoliceSpy {\n        nickname: '\u4ec1\u54e5',\n        name: '\u9673\u6c38\u4ec1',\n        eng_name: {},\n        id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n        classic_lines: {},\n      },\n    },\n  },\n}\n</code></pre> \u5f9e\u4e0a\u8ff0\u7d50\u679c\u53ef\u4ee5\u89c0\u5bdf\u5230\uff1a</p> <ul> <li><code>created_at</code>\u4e26\u6c92\u6709\u8b8a\u52d5\u3002</li> <li><code>modified_at</code>\u81ea\u52d5\u65bc<code>update</code>\u6642\u66f4\u65b0\u3002</li> <li>\u4f7f\u7528<code>str_trim_end</code>\u6210\u529f\u53bb\u9664\u4e86<code>code</code> <code>property</code>\u5f8c\u7684\u591a\u9918\u7a7a\u683c\u3002</li> </ul>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#backlinks","title":"\u5b78\u7fd2\u4f7f\u7528<code>backlinks</code>","text":"<p>\u5047\u8a2d\u73fe\u5728\u6211\u5011\u60f3\u77e5\u9053\u6c38\u4ec1\u6709\u54ea\u4e9b\u72af\u7f6a\u8a18\u9304\uff0c\u4f46\u662f\u537b\u4e0d\u60f3\u5f9e<code>CriminalRecord</code>\u4e0b\u624b\u7684\u8a71\uff0c<code>backlinks</code>\u662f\u4e00\u500b\u4e0d\u932f\u7684\u9078\u64c7\u3002</p> <p>\u7531\u65bc<code>CriminalRecord</code>\u4e2d\u7684<code>involved</code>\u662f\u500b<code>multi link</code>\uff0c\u9023\u63a5\u4e86<code>involved</code>\u53ca<code>Character</code>\u3002<code>backlinks</code>\u8b93\u6211\u5011\u53ef\u4ee5\u53cd\u5411\u4f86\u5c0d\u9019\u7a2e\u95dc\u4fc2\u9032\u884cquery\uff1a</p> <ul> <li><code>[is type]</code>\u8b93\u6211\u5011\u6307\u5b9a\u8981\u5c0b\u627e\u54ea\u4e00\u500b<code>type</code>\u4e0b\u7684<code>link</code>\u3002</li> <li><code>.&lt;link</code>\u662f\u6307<code>[is type]</code>\u9019\u500b<code>type</code>\u4e0b\u7684\u54ea\u4e00\u500b<code>link</code>\u3002</li> </ul> scenes/scene03/query.edgeql<pre><code>select chen {criminal_records:= .&lt;involved[is CriminalRecord] {**}};\n</code></pre> \u4e0a\u9762\u9019\u6bb5query\u7684\u767d\u8a71\u6587 <p>\u5f9e<code>CriminalRecord</code>\u7684<code>involved</code> <code>link</code>\u4e2d\uff0c\u627e\u51fa\u8ddf<code>chen</code>\u6709\u95dc\u7684<code>CriminalRecord</code>\uff0c\u547d\u540d\u70ba<code>criminal_records</code>\uff0c\u4e26\u4f7f\u7528<code>{**}</code>\u5217\u51fa\u7d50\u679c\u3002</p> <pre><code>{\n  default::PoliceSpy {\n    criminal_records: {\n      default::CriminalRecord {\n        id: 740a4c4c-bc4b-11ee-b314-afc01e783d2e,\n        code: 'OFFNCE: A.O.A.B.H',\n        created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n        modified_at: &lt;datetime&gt;'2024-01-26T13:05:35.533826Z',\n        ref_no: 'CCR9314768',\n        involved: {\n          default::PoliceSpy {\n            nickname: '\u4ec1\u54e5',\n            name: '\u9673\u6c38\u4ec1',\n            eng_name: {},\n            id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n            classic_lines: {},\n          },\n        },\n      },\n      default::CriminalRecord {\n        id: 740a56ce-bc4b-11ee-b314-bf9055e83044,\n        code: 'CD-POD',\n        created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n        modified_at: &lt;datetime&gt;'2024-01-26T13:05:35.533826Z',\n        ref_no: 'RN992317',\n        involved: {\n          default::PoliceSpy {\n            nickname: '\u4ec1\u54e5',\n            name: '\u9673\u6c38\u4ec1',\n            eng_name: {},\n            id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n            classic_lines: {},\n          },\n        },\n      },\n    },\n  },\n}\n</code></pre> <p>\u5982\u679c\u60f3\u77e5\u9053\u5168\u90e8<code>Character</code>\u7684<code>CriminalRecord</code>\uff0cquery\u53ef\u4ee5\u9019\u9ebc\u5beb\uff1a scenes/scene03/query.edgeql<pre><code>select Character {name, criminal_records:= .&lt;involved[is CriminalRecord] {**}};\n</code></pre></p> \u52a0\u4e0a\u6613\u8fa8\u5225\u7684<code>property</code> <p>\u7531\u65bc\u73fe\u5728\u662f\u5c0d<code>Character</code>\u9032\u884cquery\uff08\u4e0d\u662f\u660e\u78ba\u7684<code>chen</code>\u4e86\uff09\uff0c\u52a0\u4e0a<code>name</code>\u7684\u8a71\u6703\u6bd4\u8f03\u597d\u8fa8\u5225\uff0c\u5426\u5247\u53ea\u80fd\u770b\u5230\u6bcf\u500b<code>Character</code>\u7684<code>criminal_records</code>\u3002</p> <pre><code>{\n  default::GangsterBoss {name: '\u97d3\u741b', criminal_records: {}},\n  default::Police {name: '\u9ec3\u5fd7\u8aa0', criminal_records: {}},\n  default::PoliceSpy {\n    name: '\u9673\u6c38\u4ec1',\n    criminal_records: {\n      default::CriminalRecord {\n        id: 740a4c4c-bc4b-11ee-b314-afc01e783d2e,\n        code: 'OFFNCE: A.O.A.B.H',\n        created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n        modified_at: &lt;datetime&gt;'2024-01-26T13:05:35.533826Z',\n        ref_no: 'CCR9314768',\n        involved: {\n          default::PoliceSpy {\n            nickname: '\u4ec1\u54e5',\n            name: '\u9673\u6c38\u4ec1',\n            eng_name: {},\n            id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n            classic_lines: {},\n          },\n        },\n      },\n      default::CriminalRecord {\n        id: 740a56ce-bc4b-11ee-b314-bf9055e83044,\n        code: 'CD-POD',\n        created_at: &lt;datetime&gt;'2024-01-26T13:04:35.046364Z',\n        modified_at: &lt;datetime&gt;'2024-01-26T13:05:35.533826Z',\n        ref_no: 'RN992317',\n        involved: {\n          default::PoliceSpy {\n            nickname: '\u4ec1\u54e5',\n            name: '\u9673\u6c38\u4ec1',\n            eng_name: {},\n            id: db49a9aa-bc48-11ee-aae4-4fe16706e7ad,\n            classic_lines: {},\n          },\n        },\n      },\n    },\n  },\n  default::GangsterSpy {name: '\u5289\u5efa\u660e', criminal_records: {}},\n}\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene03/query.edgeql<pre><code>insert Scene {\n      title:= \"\u9ed1\u767d\u985b\u5012\",\n      detail:= \"\u6c38\u4ec1\u7559\u4e0b\u591a\u6b21\u6848\u5e95\uff0c\u4e26\u66fe\u7d93\u88ab\u5efa\u660e\u902e\u6355\uff0c\u4f46\u4e5f\u9010\u6f38\u53d6\u5f97\u9ed1\u793e\u6703\u7684\u4fe1\u4efb\u3002\" ++\n               \"\u5efa\u660e\u7562\u696d\u5f8c\u5247\u7531\u8b66\u54e1\uff08PC\uff09\u505a\u8d77\uff0c\u8868\u73fe\u512a\u7570\uff0c\u7372\u9762\u8a66\u6649\u965e\u898b\u7fd2\u7763\u5bdf\uff08PI\uff09\" ++\n               \"\u7684\u6a5f\u6703\u3002\u5169\u4eba\u7684\u8def\u5c31\u50cf\u9ed1\u767d\u985b\u5012\u4e00\u822c\uff0c\u8ab0\u662f\u597d\u4eba\uff0c\u8ab0\u53c8\u662f\u58de\u4eba\u5462\uff1f\",\n      remarks:= \"1.\u5047\u8a2d\u6b64\u6642\u70ba1994\u5e74\u3002\",       \n      who:= {chen, lau},\n      `when`:= year_1994,\n      where:= police_station,  \n};\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#query-review","title":"Query review","text":"Query review scenes/scene03/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 1994};\n\ninsert Landmark {name:= \"\u8b66\u5bdf\u5c40\"};\n\nselect test_alias();\n\nupdate lau set { \n    police_rank:= PoliceRank.PC\n};\n\ninsert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u5efa\u660e\u902e\u6355\u6c38\u4ec1\u4e26\u5728\u8b66\u5c40\u66ff\u5176\u505a\u7b46\u9304\u3002\",\n    `when`:= year_1994,\n    where:= police_station,\n};\n\nwith records:= {(\"CCR9314768\", \"OFFNCE: A.O.A.B.H   \"), (\"RN992317\", \"CD-POD   \")},\nfor record in records\nunion (insert CriminalRecord {\n                ref_no:= record.0, \n                code:= record.1,\n                involved:= chen,\n});\n\n\n\nselect CriminalRecord {**};\n\nfor record in CriminalRecord\nunion (\n    update record\n    set {\n        code:= str_trim_end(.code)\n    }\n);\n\nselect CriminalRecord {**};\n\nselect chen {criminal_records:= .&lt;involved[is CriminalRecord] {**}};\n\nselect Character {name, criminal_records:= .&lt;involved[is CriminalRecord] {**}};\n\ninsert Scene {\n      title:= \"\u9ed1\u767d\u985b\u5012\",\n      detail:= \"\u6c38\u4ec1\u7559\u4e0b\u591a\u6b21\u6848\u5e95\uff0c\u4e26\u66fe\u7d93\u88ab\u5efa\u660e\u902e\u6355\uff0c\u4f46\u4e5f\u9010\u6f38\u53d6\u5f97\u9ed1\u793e\u6703\u7684\u4fe1\u4efb\u3002\" ++\n               \"\u5efa\u660e\u7562\u696d\u5f8c\u5247\u7531\u8b66\u54e1\uff08PC\uff09\u505a\u8d77\uff0c\u8868\u73fe\u512a\u7570\uff0c\u7372\u9762\u8a66\u6649\u965e\u898b\u7fd2\u7763\u5bdf\uff08PI\uff09\" ++\n               \"\u7684\u6a5f\u6703\u3002\u5169\u4eba\u7684\u8def\u5c31\u50cf\u9ed1\u767d\u985b\u5012\u4e00\u822c\uff0c\u8ab0\u662f\u597d\u4eba\uff0c\u8ab0\u53c8\u662f\u58de\u4eba\u5462\uff1f\",\n      remarks:= \"1.\u5047\u8a2d\u6b64\u6642\u70ba1994\u5e74\u3002\",       \n      who:= {chen, lau},\n      `when`:= year_1994,\n      where:= police_station,  \n};\n</code></pre>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#_2","title":"\u7121\u9593\u5047\u8a2d","text":"<p>\u6211\u5011\u5047\u8a2d\u7121\u9593\u9053\u5167\u8b66\u5bdf\u53ea\u6703\u5728\u540c\u4e00\u500b\u5730\u65b9\u8fa6\u516c\uff0c\u5373<code>police_station</code>\u9019\u500b<code>alias</code>\u3002\u5f9e\u5efa\u660e\u8207\u9ec3sir\u7684\u5c0d\u8a71\u4f86\u770b\uff0c\u5927\u591a\u6578\u8b66\u5bdf\u8fa6\u516c\u5834\u666f\u61c9\u8a72\u662f\u5728\u8b66\u5bdf\u7e3d\u90e8\u3002</p>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene03/scene03/#_3","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u5047\u8a2d\u5efa\u660e\u65bc1994\u5e74\u4ecd\u662f\u6563\u4ed4\uff08<code>PC</code>\uff09\uff0c\u5176\u65bc\u5287\u4e2d\u8b58\u5225\u8b49\u4e4b\u66f4\u63db\u6642\u9593\u70ba1999\u5e747\u670830\u65e5\uff0c\u6642\u4efb\u9ad8\u7d1a\u7763\u5bdf\uff08<code>SIP</code>\uff09\uff0c\u5728\u56db~\u4e94\u5e74\u9593\u9023\u5347\u6578\u7d1a\uff0c\u9019\u53c8\u662f\u4e00\u500b\u5982\u8449\u6821\u9577\u822c\u7684\u4eba\u7269\u5440\u3002</p>","tags":["rewrite","for loop","tuple","backlinks"]},{"location":"scenes/scene04/scene04/","title":"04 - \u88ab\u907a\u5fd8\u7684\u6642\u5149","text":"","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#full-schema-preview","title":"Full schema preview","text":"Full schema preview startend migration scenes/scene03/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n}\n</code></pre> scenes/scene04/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u81e5\u5e95\u8fd1\u5341\u5e74\u5f8c\uff0c\u5efa\u660e\u8207\u6c38\u4ec1\u5728Hi-Fi\u92ea\u76f8\u9047\u3002\u5efa\u660e\u8acb\u6c38\u4ec1\u63a8\u85a6\u8a2d\u5099\uff0c\u4e26\u4e00\u8d77\u8a66\u807d\u4e86<code>\u88ab\u907a\u5fd8\u7684\u6642\u5149</code>\u3002\u8a66\u807d\u904e\u7a0b\u4e2d\uff0c\u5efa\u660e\u8acb\u6c38\u4ec1\u63db\u4e86\u4e00\u689d\u97f3\u6e90\u7dda\uff0c\u6b4c\u8072\u7acb\u523b\u8b8a\u5f97\u66f4\u52a0\u7acb\u9ad4\uff0c\u597d\u50cf\u771f\u4eba\u5c31\u5728\u773c\u524d\u5531\u6b4c\u4e00\u822c\u3002\u7562\u7adf\u9019\u9996\u6b4c\u5efa\u660e\u807d\u904e\u592a\u591a\u6b21\uff0c\u6709\u592a\u591a\u61f7\u5ff5\u7684\u904e\u53bb\uff08\u8a73\u60c5\u8acb\u898b\u7121\u9593\u9053\u2161\uff09\u3002</p>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#edgeql-query","title":"EdgeQL query","text":"","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#insert20021128","title":"<code>insert</code>\u6b64\u5834\u666f\u6642\u95932002\u5e7411\u670828\u65e5","text":"scenes/scene04/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 2002, fuzzy_month:=11, fuzzy_day:=28};\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#inserthi-fi","title":"<code>insert</code>\u5e97\u5bb6Hi-Fi\u92ea","text":"scenes/scene04/query.edgeql<pre><code>insert Store {name:=\"Hi-Fi\u92ea\"};\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#update-lau","title":"<code>update</code> <code>lau</code>","text":"<p>\u589e\u52a0\u98fe\u6f14\u5efa\u660e\u5341\u5e74\u5f8c\u7684\u6f14\u54e1\u5289\u5fb7\u83ef\u81f3<code>lau</code>\u7684<code>actors</code> <code>multi link</code>\u4e2d\uff08\u7559\u610f\u9019\u908a\u4f7f\u7528\u7684\u662f<code>+=</code>\uff09\u3002</p> <p>\u548c<code>nested inserts</code>\u6709\u9ede\u50cf\uff0c\u6211\u5011\u4e0d\u9700\u8981\u5148<code>insert</code>\u5289\u5fb7\u83ef\uff0c\u518d<code>update</code> <code>lau</code>\uff0c\u76f4\u63a5\u65bc<code>update</code>\u6642<code>insert</code>\u5373\u53ef\u3002 scenes/scene04/query.edgeql<pre><code>update lau \nset {\n    actors+= (insert Actor {\n            name:=\"\u5289\u5fb7\u83ef\",\n            eng_name:= \"Andy\",\n            nickname:= \"\u83ef\u4ed4\",\n   })\n};\n</code></pre></p>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#update-chen","title":"<code>update</code> <code>chen</code>","text":"<p><code>chen</code>\u7684<code>update</code>\u53ef\u4ee5\u540c\u6642\uff1a</p> <ul> <li>\u5c07\u7d93\u5178\u53f0\u8a5e\u300c\u9ad8\u97f3\u751c\u3001\u4e2d\u97f3\u6e96\u3001\u4f4e\u97f3\u52c1\u3002\u4e00\u53e5\u8b1b\u54c2\uff0c\u901a\u900f\u5566\u5373\u4fc2\u3002\u300d\u6307\u5b9a\u7d66<code>classic_lines</code> <code>property</code>\uff08\u7559\u610f\u9019\u908a\u4f7f\u7528\u7684\u662f<code>:=</code>\uff09\u3002</li> <li>\u589e\u52a0\u98fe\u6f14\u6c38\u4ec1\u5341\u5e74\u5f8c\u7684\u6f14\u54e1\u6881\u671d\u5049\u81f3<code>chen</code>\u7684<code>actors</code> <code>multi link</code>\u4e2d\uff08\u7559\u610f\u9019\u908a\u4f7f\u7528\u7684\u662f<code>+=</code>\uff09\u3002</li> </ul> scenes/scene04/query.edgeql<pre><code>update chen \nset {\n    classic_lines := [\"\u9ad8\u97f3\u751c\u3001\u4e2d\u97f3\u6e96\u3001\u4f4e\u97f3\u52c1\u3002\u4e00\u53e5\u8b1b\u54c2\uff0c\u901a\u900f\u5566\u5373\u4fc2\u3002\"],\n    actors+= (insert Actor {\n            name:=\"\u6881\u671d\u5049\",\n            eng_name:= \"Tony\",\n            nickname:= \"\u5049\u4ed4\",\n   })\n};\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#insert-chenlaucontact","title":"<code>insert</code> <code>ChenLauContact</code>","text":"scenes/scene04/query.edgeql<pre><code>insert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u81e5\u5e95\u8fd1\u5341\u5e74\u5f8c\uff0c\u5efa\u660e\u8207\u6c38\u4ec1\u5728Hi-Fi\u92ea\u76f8\u9047\uff0c\u4e00\u8d77\u8a66\u807d\u4e86`\u88ab\u907a\u5fd8\u7684\u6642\u5149\", \n    `when`:=  assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/28_HH24:MI:SS_ID\")),\n    where:= assert_single((select Store filter .name=\"Hi-Fi\u92ea\")),\n};\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#is_hi_fi_store_open","title":"\u7de8\u5beb<code>is_hi_fi_store_open</code>","text":"<p>\u5982\u679c\u6211\u5011\u60f3\u8981\u77e5\u9053Hi-Fi\u92ea\u662f\u5426\u8655\u65bc\u71df\u696d\u6642\u9593\uff0c\u53ef\u4ee5\u5beb\u4e00\u500b<code>is_hi_fi_store_open</code>\u7684<code>function</code>\u4f86\u5224\u65b7\u3002</p> <p>\u5047\u8a2dHi-Fi\u92ea\u6bcf\u5929\u7684\u71df\u696d\u6642\u9593\u70ba11:00~22:00\uff0c\u4f46\uff1a</p> <ul> <li>\u6bcf\u661f\u671f\u4e09\u516c\u4f11\u3002</li> <li>13:00~14:00\u53ca19:00~20:00\u70ba\u4f11\u606f\u6642\u9593\u3002</li> </ul> <p><code>range</code> vs <code>multiranges</code></p> <p>\u5224\u65b7\u67d0\u500b\u6578\u5b57\u662f\u5426\u5728\u55ae\u4e00\u5340\u9593\u5167\uff0c\u53ef\u4ee5\u4f7f\u7528<code>range()</code>\u3002\u4f46\u5982\u679c\u6709\u591a\u500b\u5340\u9593\u7684\u8a71\uff0c\u5247\u53ef\u4ee5\u642d\u914d<code>multirange()</code>\u4f86\u8655\u7406\u3002</p> <p><code>is_hi_fi_store_open</code> <code>function</code>\u63a5\u6536\u5169\u500b\u8b8a\u6578\uff0c\u4e00\u500b\u662f<code>dow</code>\uff08<code>DayOfWeek</code>\u578b\u614b\uff09\u4ee3\u8868\u661f\u671f\u5e7e\u9020\u8a2a\uff0c\u53e6\u4e00\u500b\u662f<code>visit_hour</code>\uff08<code>int64</code>\u578b\u614b\uff09\u4ee3\u8868\u5e7e\u9ede\u9020\u8a2a\uff0c\u56de\u50b3\u503c\u5247\u70ba<code>bool</code>\u578b\u614b\u3002</p> <p>\u6211\u5011\u5c07\u71df\u696d\u6642\u9593\u62c6\u6210<code>11~13</code>\u3001<code>14~19</code>\u53ca<code>20~22</code>\u4e09\u500b<code>range</code>\u4e26\u5305\u6210\u4e00\u500b<code>array</code>\u5f8c\uff0c\u50b3\u7d66\u4e00\u500b<code>multirange</code>\uff0c\u4e26\u5728<code>with</code>\u5340\u584a\u4e2d\u5c07\u5176\u547d\u540d\u70ba<code>open_hours</code>\u3002</p> <p>\u63a5\u8457\u5224\u65b7<code>dow</code>\u662f\u5426\u4e0d\u662f\u661f\u671f\u4e09\uff0c\u4e14<code>visit_hour</code>\u662f\u5426\u5728<code>open_hours</code>\u5340\u9593\u5167\uff08\u4f7f\u7528<code>contains</code>\uff09\u3002\u5982\u679c\u662f\u7684\u8a71\uff0c\u4ee3\u8868\u8a72\u6642\u9593\u70ba\u5e97\u5bb6\u71df\u696d\u6642\u9593\uff0c\u56de\u50b3<code>true</code>\uff1b\u5426\u5247\u5373\u70ba\u4f11\u606f\u6642\u9593\uff0c\u56de\u50b3<code>false</code>\u3002</p> scenes/scene04/schema.esdl<pre><code>function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\nusing (\n    with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n    select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n);\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#test_hi_fi_store_opentest_hi_fi_store_close","title":"\u7de8\u5beb<code>test_hi_fi_store_open</code>\u53ca<code>test_hi_fi_store_close</code>","text":"<p>\u642d\u914d<code>all</code>\u548c<code>not</code>\u53ef\u4ee5\u7de8\u5beb<code>test_hi_fi_store_open</code>\u53ca<code>test_hi_fi_store_close</code>\u4f86\u78ba\u8a8d<code>is_hi_fi_store_open</code>\u662f\u5426\u53ef\u4ee5\u6e96\u78ba\u4f9d\u7167\u50b3\u5165\u6642\u9593\uff0c\u56de\u50b3\u6b63\u78ba\u7684<code>bool</code>\u503c\u3002</p> scenes/scene04/schema.esdl<pre><code>function test_hi_fi_store_open() -&gt; bool\nusing (all({\n        is_hi_fi_store_open(DayOfWeek.Monday, 12),\n        is_hi_fi_store_open(DayOfWeek.Friday, 15),\n        is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n    })\n);\n\nfunction test_hi_fi_store_close() -&gt; bool \nusing (not all({\n        is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n        is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n        is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n    })\n);\n</code></pre> make end migration here\uff08<code>scenes/scene04/schema.esdl</code>\uff09 <pre><code>did you create function 'default::is_hi_fi_store_open'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_hi_fi_store_close'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_hi_fi_store_open'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#test_hi_fi_store_opentest_hi_fi_store_close_1","title":"\u6e2c\u8a66<code>test_hi_fi_store_open</code>\u53ca<code>test_hi_fi_store_close</code>","text":"scenes/scene04/query.edgeql<pre><code>select test_hi_fi_store_open(); # {true}\nselect test_hi_fi_store_close(); # {true}\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene04/query.edgeql<pre><code>insert Scene {\n    title:= \"\u88ab\u907a\u5fd8\u7684\u6642\u5149\",\n    detail:= \"\u81e5\u5e95\u8fd1\u5341\u5e74\u5f8c\uff0c\u5efa\u660e\u8207\u6c38\u4ec1\u5728Hi-Fi\u92ea\u76f8\u9047\u3002\u5efa\u660e\u8acb\u6c38\u4ec1\u63a8\u85a6\u8a2d\u5099\uff0c\u4e26\u4e00\u8d77\" ++\n             \"\u8a66\u807d\u4e86`\u88ab\u907a\u5fd8\u7684\u6642\u5149`\u3002\u8a66\u807d\u904e\u7a0b\u4e2d\uff0c\u5efa\u660e\u8acb\u6c38\u4ec1\u63db\u4e86\u4e00\u689d\u97f3\u6e90\u7dda\uff0c\u6b4c\u8072\u7acb\" ++\n             \"\u523b\u8b8a\u5f97\u66f4\u52a0\u7acb\u9ad4\uff0c\u597d\u50cf\u771f\u4eba\u5c31\u5728\u773c\u524d\u5531\u6b4c\u4e00\u822c\uff0c\u7562\u7adf\u9019\u9996\u6b4c\u5efa\u660e\u807d\u904e\u592a\u591a\u6b21\uff0c\" ++\n             \"\u6709\u592a\u591a\u61f7\u5ff5\u7684\u904e\u53bb\uff08\u8a73\u60c5\u8acb\u898b\u7121\u9593\u9053\u2161\uff09\u3002\",\n    remarks:= \"\u7c3d\u55ae\u65e5\u671f\u70ba2002/11/28\", \n    who:= {chen, lau},\n    `when`:=  assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/28_HH24:MI:SS_ID\")),\n    where:= assert_single((select Store filter .name=\"Hi-Fi\u92ea\")),         \n};\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#query-review","title":"Query review","text":"Query review scenes/scene04/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 2002, fuzzy_month:=11, fuzzy_day:=28};\n\ninsert Store {name:=\"Hi-Fi\u92ea\"};\n\nupdate lau \nset {\n    actors+= (insert Actor {\n            name:=\"\u5289\u5fb7\u83ef\",\n            eng_name:= \"Andy\",\n            nickname:= \"\u83ef\u4ed4\",\n   })\n};\n\nupdate chen \nset {\n    classic_lines := [\"\u9ad8\u97f3\u751c\u3001\u4e2d\u97f3\u6e96\u3001\u4f4e\u97f3\u52c1\u3002\u4e00\u53e5\u8b1b\u54c2\uff0c\u901a\u900f\u5566\u5373\u4fc2\u3002\"],\n    actors+= (insert Actor {\n            name:=\"\u6881\u671d\u5049\",\n            eng_name:= \"Tony\",\n            nickname:= \"\u5049\u4ed4\",\n   })\n};\n\ninsert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u81e5\u5e95\u8fd1\u5341\u5e74\u5f8c\uff0c\u5efa\u660e\u8207\u6c38\u4ec1\u5728Hi-Fi\u92ea\u76f8\u9047\uff0c\u4e00\u8d77\u8a66\u807d\u4e86`\u88ab\u907a\u5fd8\u7684\u6642\u5149\", \n    `when`:=  assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/28_HH24:MI:SS_ID\")),\n    where:= assert_single((select Store filter .name=\"Hi-Fi\u92ea\")),\n};\n\nselect test_hi_fi_store_open(); # {true}\n\nselect test_hi_fi_store_close(); # {true}\n\ninsert Scene {\n    title:= \"\u88ab\u907a\u5fd8\u7684\u6642\u5149\",\n    detail:= \"\u81e5\u5e95\u8fd1\u5341\u5e74\u5f8c\uff0c\u5efa\u660e\u8207\u6c38\u4ec1\u5728Hi-Fi\u92ea\u76f8\u9047\u3002\u5efa\u660e\u8acb\u6c38\u4ec1\u63a8\u85a6\u8a2d\u5099\uff0c\u4e26\u4e00\u8d77\" ++\n             \"\u8a66\u807d\u4e86`\u88ab\u907a\u5fd8\u7684\u6642\u5149`\u3002\u8a66\u807d\u904e\u7a0b\u4e2d\uff0c\u5efa\u660e\u8acb\u6c38\u4ec1\u63db\u4e86\u4e00\u689d\u97f3\u6e90\u7dda\uff0c\u6b4c\u8072\u7acb\" ++\n             \"\u523b\u8b8a\u5f97\u66f4\u52a0\u7acb\u9ad4\uff0c\u597d\u50cf\u771f\u4eba\u5c31\u5728\u773c\u524d\u5531\u6b4c\u4e00\u822c\uff0c\u7562\u7adf\u9019\u9996\u6b4c\u5efa\u660e\u807d\u904e\u592a\u591a\u6b21\uff0c\" ++\n             \"\u6709\u592a\u591a\u61f7\u5ff5\u7684\u904e\u53bb\uff08\u8a73\u60c5\u8acb\u898b\u7121\u9593\u9053\u2161\uff09\u3002\",\n    remarks:= \"\u7c3d\u55ae\u65e5\u671f\u70ba2002/11/28\", \n    who:= {chen, lau},\n    `when`:=  assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/28_HH24:MI:SS_ID\")),\n    where:= assert_single((select Store filter .name=\"Hi-Fi\u92ea\")),         \n};\n</code></pre>","tags":["update inserts","function"]},{"location":"scenes/scene04/scene04/#_2","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u6c38\u4ec1\u5e6b\u5efa\u660e\u5237\u5361\u7684\u55ae\u64da\u65e5\u671f\u70ba2002\u5e7411\u670828\u65e5\uff0c\u4f46\u6c38\u4ec1\u65bc\u5287\u672b\u7684\u5893\u7891\u5f80\u751f\u65e5\u671f\u70ba2002\u5e7411\u670827\u65e5\uff0c\u9019\u500b\u554f\u984c20\u5e74\u4f86\u7559\u7d66\u89c0\u773e\u8a31\u591a\u8a0e\u8ad6\u7a7a\u9593\u3002\u6709\u4eba\u8aaa\u9019\u662f\u56e0\u70ba\u5893\u7891\u65e5\u671f\u70ba\u9670\u66c6\uff0c\u6709\u4eba\u5247\u8aaa\u9019\u662f\u5c0e\u6f14\u8207\u7de8\u5287\u7279\u5730\u60f3\u8868\u9054\u300c\u7121\u9593\u8f2a\u8ff4\u300d\u4e4b\u610f\u3002\u4f46\u6839\u64da2022\u5e744K\u4fee\u5fa9\u7248\u4e0a\u6620\u6642\u7684\u8a2a\u554f\uff0c\u4f3c\u4e4e\u9019\u53ea\u662f\u4e00\u500b\u55ae\u7d14\u7684\u9053\u5177\u6e96\u5099\u758f\u5931\u3002</p>","tags":["update inserts","function"]},{"location":"scenes/scene05/scene05/","title":"05 - \u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74","text":"","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#full-schema-preview","title":"Full schema preview","text":"Full schema preview startend migration scenes/scene04/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene05/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u6c38\u4ec1\u8207\u9ec3sir\u76f8\u7d04\u65bc\u5929\u53f0\u4ea4\u63db\u60c5\u5831\uff0c\u97d3\u741b\u5c07\u65bc\u9019\u661f\u671f\u9032\u884c\u6bd2\u54c1\u4ea4\u6613\uff0c\u5730\u9ede\u672a\u77e5\u3002\u9ec3sir\u5247\u8aaa\u4ed6\u8cbb\u76e1\u5fc3\u529b\u5c07\u6c38\u4ec1\u50b7\u4eba\u7684\u6848\u5b50\u7531\u5750\u7262\u6539\u6210\u770b\u5fc3\u7406\u91ab\u751f\uff0c\u4ea4\u5f85\u6c38\u4ec1\u8981\u7167\u505a\u3002\u6c38\u4ec1\u5247\u62b1\u6028\u81ea\u5df1\u88ab\u9ec3sir\u9a19\u4e86\uff0c\u8aaa\u597d\u53ea\u7576\u4e09\u5e74\u81e5\u5e95\uff0c\u7d50\u679c\u73fe\u5728\u90fd\u5feb\u5341\u5e74\u4e86\uff0c\u4e0d\u77e5\u9053\u4f55\u6642\u624d\u80fd\u6062\u5fa9\u8b66\u5bdf\u8eab\u4efd\u3002\u5341\u5e74\u9593\u767c\u751f\u4e86\u592a\u591a\u4e8b\uff0c\u6c38\u4ec1\u770b\u8457\u9ec3sir\u9001\u7684\u624b\u9336\uff0c\u4ed6\u6709\u6642\u5019\u771f\u7684\u4e0d\u77e5\u9053\u8a72\u7528\u4ec0\u9ebc\u5fc3\u614b\u9762\u5c0d\u9ec3sir\uff08\u8a73\u60c5\u8acb\u898b\u7121\u9593\u9053\u2161\u53ca\u7121\u9593\u9053\u2162\uff09\u3002</p>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#edgeql-query","title":"EdgeQL query","text":"","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#insert2002","title":"<code>insert</code>\u6b64\u5834\u666f\u6642\u95932002\u5e74","text":"scenes/scene05/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 2002};\n</code></pre>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#aliasaliasfunction","title":"\u5efa\u7acb<code>alias</code>\u53ca\u7de8\u5beb\u6e2c\u8a66<code>alias</code>\u7684<code>function</code>","text":"<p>\u5b9a\u7fa9\u4e00\u500b<code>year_2002</code>\uff082002\u5e74\uff09\u7684<code>alias</code>\u3002 scenes/scene05/schema.esdl<pre><code>alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                    filter .fuzzy_year = 2002 \n                                    and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                    and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                    and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                    and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                    and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                    and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                ))\n);\n</code></pre> \u65b0\u589e<code>test_scene05_alias</code> <code>function</code>\uff0c\u4e26\u66f4\u65b0<code>test_alias</code>\u3002 scenes/scene05/schema.esdl<pre><code>function test_alias() -&gt; bool\nusing (all({\n        test_scene01_alias(),\n        test_scene02_alias(),\n        test_scene03_alias(),\n        test_scene05_alias(),\n    })\n);\n\nfunction test_scene05_alias() -&gt; bool\nusing (all({\n        (exists year_1994),\n    })\n);\n</code></pre></p> make end migration here\uff08<code>scenes/scene05/schema.esdl</code>\uff09 <pre><code>did you create alias 'default::year_2002'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_scene05_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you alter function 'default::test_alias'? [y,n,l,c,b,s,q,?]\n&gt; y \n</code></pre>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#test_alias","title":"\u6e2c\u8a66<code>test_alias</code>","text":"scenes/scene05/query.edgeql<pre><code># end migration needs to be applied before running this query\nselect test_alias();\n</code></pre>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#update-chen","title":"<code>update</code> <code>chen</code>","text":"<p>\u9019\u88e1\u6c38\u4ec1\u9023\u8aaa\u4e86\u5169\u53e5\u7d93\u5178\u53f0\u8a5e\uff0c\u8b93\u6211\u5011\u628a\u5b83\u5011\u90fd\u52a0\u5728<code>classic_lines</code> <code>property</code>\u4e2d\uff08\u7559\u610f\u9019\u908a\u4f7f\u7528\u7684\u8a9e\u6cd5\u662f<code>classic_lines := .classic_lines ++ array&lt;str&gt;</code>\uff09\u3002 scenes/scene05/query.edgeql<pre><code>update chen \nset {\n    classic_lines := .classic_lines ++ \n            [\"\u4f60\u8a71\u4e09\u5e74\u3002\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\uff0c\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\uff01\u5341\u5e74\u90fd\u569f\u7dca\u982d\u5566\u8001\u7d30\uff01\",\n             \"\u6536\u55f2\u5566\uff01\u5462\u53e5\u5622\u6211\u807d\u5497\u4e5d\u5343\u5e7e\u6b21\u5566\uff01\"],\n};\n</code></pre></p>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#datetime","title":"<code>datetime</code>\u7684\u6a21\u7cca\u52a0\u6e1b\u6cd5","text":"<p>\u5047\u5982\u6211\u5011\u60f3\u5e6b\u6c38\u4ec1\u7b97\u4e00\u4e0b\u4ed6\u6240\u8aaa\u7684\u300c\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\uff0c\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\uff01\u5341\u5e74\u90fd\u569f\u7dca\u982d\u5566\u300d\uff0c\u5927\u6982\u662f\u591a\u4e45\u7684\u8a71\uff0c\u53ef\u4ee5\u4f7f\u7528<code>cal::relative_duration()</code>\u3002</p> <p>\u6211\u5011\u5047\u8a2d\u6c38\u4ec1\u5f9e1992\u5e7412\u67081\u65e50\u66420\u52060\u79d2\uff0c\u6b63\u5f0f\u958b\u59cb\u81e5\u5e95\u5de5\u4f5c\u3002</p> <p>\u9996\u5148\u6211\u5011\u9700\u8981\u5c07\u9019\u500b\u6642\u9593\u8f49\u63db\u70ba<code>datetime</code>\u578b\u614b\u3002\u60a8\u53ef\u4ee5\u9078\u64c7\u4f7f\u7528<code>&lt;datetime&gt;</code>\u4f86<code>casting</code>\u6216\u662f\u4f7f\u7528<code>to_datetime()</code>\u4f86\u8f49\u63db\u3002</p> <code>Casting</code> vs <code>function</code> <p>\u521d\u5b78\u7684\u670b\u53cb\u53ef\u80fd\u6703\u641e\u6df7\u9019\u5169\u500b\u65b9\u6cd5\u3002\u6b64\u6642\u53ef\u4ee5\u67e5\u770b<code>datetime</code>\u6587\u4ef6\uff0c\u901a\u5e38\u6c92\u6709<code>()</code>\u7684\u50cf\u662f<code>datetime</code>\u6216\u662f<code>cal::local_datetime</code>\uff0c\u9019\u4ee3\u8868\u662f\u4e00\u7a2e\u578b\u614b\uff0c\u53ef\u4ee5\u65bc\u5176\u5f8c\u52a0\u4e0a\u9069\u7576\u7684<code>str</code>\u4f86<code>casting</code>\u3002\u800c\u50cf\u662f\u6709<code>to</code>\u958b\u982d\u4e14\u6709<code>()</code>\u7684 <code>to_datetime()</code>\u6216\u662f<code>cal::to_local_datetime()</code>\uff0c\u5247\u4ee3\u8868<code>function</code>\uff0c\u9700\u8981\u53c3\u8003\u5176\u6240\u63d0\u4f9b\u7684\u5404\u7a2e\u7c3d\u540d\u4f86\u4f7f\u7528\u3002EdgeDB\u53ef\u4ee5\u91dd\u5c0d\u540c\u4e00\u500b<code>function</code>\u540d\u5b9a\u7fa9\u591a\u6b21\uff0c\u63a5\u6536\u4e0d\u540c\u7684\u53c3\u6578\uff0c\u50cf\u662f<code>to_datetime()</code>\u5c31\u63d0\u4f9b\u516d\u7a2e\u53ef\u4ee5\u547c\u53eb\u7684\u7c3d\u540d\uff0c\u9019\u7a2e\u7279\u6027\u7a31\u70ba<code>function overloaded</code>\u3002</p> <p>scenes/scene05/query.edgeql<pre><code>select &lt;datetime&gt;\"1992-12-01T00:00:00+08\";\nselect to_datetime(\"1992-12-01T00:00:00+08\");\nselect to_datetime(1992, 12, 1, 0, 0, 0, \"Asia/hong_kong\");\nselect to_datetime(&lt;cal::local_datetime&gt;\"1992-12-01T00:00:00\", \"Asia/hong_kong\");\n</code></pre> <pre><code>{&lt;datetime&gt;'1992-11-30T16:00:00Z'}\n</code></pre></p> <p>\u63a5\u4e0b\u4f86\u5229\u7528<code>cal::relative_duration</code>\u4f86<code>casting</code>\u4e00\u500b\u63a5\u8fd1\u5341\u5e74\u6642\u9593\u7684<code>str</code>\uff0c\u5047\u8a2d\u70ba9\u5e7410\u500b\u6708\u3002\u6c92\u932f\uff0c<code>cal::relative_duration</code>\u53ef\u4ee5\u63a5\u53d7\u50cf<code>9 years 10 months</code>\u9019\u9ebc\u4eba\u6027\u5316\u7684\u8f38\u5165! scenes/scene05/query.edgeql<pre><code>select &lt;cal::relative_duration&gt;\"9 years 10 months\";\n</code></pre> <pre><code>{&lt;cal::relative_duration&gt;'P9Y10M'}\n</code></pre> \u63a5\u8457\u6211\u5011\u5c071992\u5e7412\u67081\u65e50\u66420\u52060\u79d2\u7684<code>datetime</code>\u52a0\u4e0a9\u5e7410\u500b\u6708\u7684<code>relative_duration</code>\uff1a scenes/scene05/query.edgeql<pre><code>select &lt;datetime&gt;\"1992-12-01T00:00:00+08\" + &lt;cal::relative_duration&gt;\"9 years 10 months\";\n</code></pre> <pre><code>{&lt;datetime&gt;'2002-09-30T16:00:00Z'}\n</code></pre> \u6700\u5f8c\u5c07\u7d50\u679c\u7684<code>datetime</code>\u578b\u614b\u8f49\u8b8a\u70ba<code>local_datetime</code>\u578b\u614b\uff1a scenes/scene05/query.edgeql<pre><code>with t:=(select &lt;datetime&gt;\"1992-12-01T00:00:00+08\" + &lt;cal::relative_duration&gt;\"9 years 10 months\")\nselect cal::to_local_datetime(t, \"Asia/hong_kong\");\n</code></pre> <pre><code>{&lt;cal::local_datetime&gt;'2002-10-01T00:00:00'}\n</code></pre> \u73fe\u5728\u6211\u5011\u7d42\u65bc\u77e5\u9053\u6c38\u4ec1\u8207\u9ec3sir\u65bc\u672c\u5834\u666f\u898b\u9762\u7684\u6642\u9593\uff0c\u5927\u6982\u70ba2002\u5e7410\u6708\uff0c\u9019\u500b\u8a08\u7b97\u5927\u81f4\u7b26\u5408\u5287\u4e2d\u7684\u6642\u9593\u7dda\u3002</p>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#local_datetime","title":"<code>local_datetime</code>\u7684\u6a21\u7cca\u52a0\u6e1b\u6cd5","text":"<p><code>datetime</code>\u7684\u8a08\u7b97\u770b\u8d77\u4f86\u6bd4\u8f03\u8907\u96dc\uff0c\u56e0\u70ba\u727d\u626f\u5230<code>timezone</code>\u3002\u5982\u679c\u60a8\u60f3\u8981\u8a08\u7b97\u7684\u662f<code>local_datetime</code>\u7684\u8a71\uff0c\u90a3\u9ebc\u53ef\u4ee5\u8f15\u9b06\u4e0d\u5c11\u3002 scenes/scene05/query.edgeql<pre><code>select &lt;cal::local_datetime&gt;\"1992-12-01T00:00:00\" + &lt;cal::relative_duration&gt;\"9 years 10 months\";\n</code></pre> <pre><code>{&lt;cal::local_datetime&gt;'2002-10-01T00:00:00'}\n</code></pre></p>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#update-wong","title":"<code>update</code> <code>wong</code>","text":"<p>\u5c07\u9ec3sir\u7684\u7d93\u5178\u53f0\u8a5e\u6307\u5b9a\u7d66<code>classic_lines</code> <code>property</code>\uff08\u7559\u610f\u9019\u908a\u4f7f\u7528\u7684\u662f<code>:=</code>\uff09\u3002 scenes/scene05/query.edgeql<pre><code>update wong \nset {\n    classic_lines := [\"\u4f6025\u865f\u751f\u65e5\u561b!25\u4ed4!\"],\n};\n</code></pre></p> 25\u4ed4 <p>25\u4ed4\u5728\u7cb5\u8a9e\u4e2d\u5373\u70ba<code>\u53cd\u9aa8\u4ed4</code>\u6216<code>\u81e5\u5e95</code>\u4e4b\u610f\u3002\u9ec3sir\u6b64\u8209\u4e43\u662f\u5728\u5632\u8af7\u6c38\u4ec1\u3002</p>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#local_date","title":"<code>local_date</code>\u7684\u6a21\u7cca\u52a0\u6e1b\u6cd5","text":"<p>\u5047\u8a2d\u9ec3sir\u60f3\u5e6b\u6c38\u4ec1\u7b97\u4e00\u4e0b\uff0c\u96e2\u6c38\u4ec125\u865f\u751f\u65e5\u9084\u6709\u5e7e\u5929\uff0c\u53ef\u4ee5\u4f7f\u7528<code>cal::local_date</code>\u9019\u9ebc\u7b97\uff1a scenes/scene05/query.edgeql<pre><code>select &lt;cal::local_date&gt;\"2002-10-25\" - &lt;cal::local_date&gt;\"2002-10-01\";\n</code></pre> <pre><code>{&lt;cal::date_duration&gt;'P24D'}\n</code></pre> \u53ef\u4ee5\u5f97\u77e5\uff0c\u5927\u6982\u9084\u670924\u5929\u3002</p> \u6c38\u4ec1\u751f\u65e5 <p>\u6c38\u4ec1\u65bc\u5287\u672b\u7684\u5893\u7891\u51fa\u751f\u65e5\u671f\u70ba1966\u5e7410\u670825\u65e5\u3002</p>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene05/query.edgeql<pre><code>insert Scene {\n      title:= \"\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\",\n      detail:= \"\u6c38\u4ec1\u8207\u9ec3sir\u76f8\u7d04\u65bc\u5929\u53f0\u4ea4\u63db\u60c5\u5831\uff0c\u97d3\u741b\u5c07\u65bc\u9019\u661f\u671f\u9032\u884c\u6bd2\u54c1\" ++\n               \"\u4ea4\u6613\uff0c\u5730\u9ede\u672a\u77e5\u3002\u9ec3sir\u5247\u8aaa\u4ed6\u8cbb\u76e1\u5fc3\u529b\u5c07\u6c38\u4ec1\u50b7\u4eba\u7684\u6848\u5b50\u7531\" ++\n               \"\u5750\u7262\u6539\u6210\u770b\u5fc3\u7406\u91ab\u751f\uff0c\u4ea4\u5f85\u6c38\u4ec1\u8981\u7167\u505a\u3002\u6c38\u4ec1\u62b1\u6028\u81ea\u5df1\u88ab\u9ec3sir\" ++\n               \"\u9a19\u4e86\uff0c\u8aaa\u597d\u53ea\u7576\u4e09\u5e74\u81e5\u5e95\uff0c\u7d50\u679c\u73fe\u5728\u90fd\u5feb\u5341\u5e74\u4e86\uff0c\u4e0d\u77e5\u9053\u4f55\u6642\u624d\" ++\n               \"\u80fd\u6062\u5fa9\u8b66\u5bdf\u8eab\u4efd\u3002\u5341\u5e74\u9593\u767c\u751f\u4e86\u592a\u591a\u4e8b\uff0c\u6c38\u4ec1\u770b\u8457\u9ec3sir\u9001\u7684\u624b\u9336\" ++\n               \"\uff0c\u4ed6\u6709\u6642\u5019\u771f\u7684\u4e0d\u77e5\u9053\u8a72\u7528\u4ec0\u9ebc\u5fc3\u614b\u9762\u5c0d\u9ec3sir\uff08\u8a73\u60c5\u8acb\u898b\u7121\u9593\u9053\u2161\" ++\n               \"\u53ca\u7121\u9593\u9053\u2162\uff09\u3002\",\n      who:= {wong, chen},\n      `when`:= year_2002,\n      where:= (insert Location {name:=\"\u5929\u53f0\"}),         \n};\n</code></pre>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#query-review","title":"Query review","text":"Query review scenes/scene05/query.edgeql<pre><code>insert FuzzyTime {fuzzy_year:= 2002};\n\nselect test_alias();\n\nupdate chen \nset {\n    classic_lines := .classic_lines ++ \n            [\"\u4f60\u8a71\u4e09\u5e74\u3002\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\uff0c\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\uff01\u5341\u5e74\u90fd\u569f\u7dca\u982d\u5566\u8001\u7d30\uff01\",\n             \"\u6536\u55f2\u5566\uff01\u5462\u53e5\u5622\u6211\u807d\u5497\u4e5d\u5343\u5e7e\u6b21\u5566\uff01\"],\n};\n\nupdate wong \nset {\n    classic_lines := [\"\u4f6025\u865f\u751f\u65e5\u561b!25\u4ed4!\"],\n};\n\nselect &lt;datetime&gt;\"1992-12-01T00:00:00+08\";\nselect to_datetime(\"1992-12-01T00:00:00+08\");\nselect to_datetime(1992, 12, 1, 0, 0, 0, \"Asia/hong_kong\");\nselect to_datetime(&lt;cal::local_datetime&gt;\"1992-12-01T00:00:00\", \"Asia/hong_kong\");\n\nselect &lt;cal::relative_duration&gt;\"9 years 10 months\";\n\nselect &lt;datetime&gt;\"1992-12-01T00:00:00+08\" + &lt;cal::relative_duration&gt;\"9 years 10 months\";\n\nwith t:=(select &lt;datetime&gt;\"1992-12-01T00:00:00+08\" + &lt;cal::relative_duration&gt;\"9 years 10 months\")\nselect cal::to_local_datetime(t, \"Asia/hong_kong\");\n\nselect &lt;cal::local_datetime&gt;\"1992-12-01T00:00:00\" + &lt;cal::relative_duration&gt;\"9 years 10 months\";\n\nselect &lt;cal::local_date&gt;\"2002-10-25\" - &lt;cal::local_date&gt;\"2002-10-01\";\n\ninsert Scene {\n      title:= \"\u4e09\u5e74\u4e4b\u5f8c\u53c8\u4e09\u5e74\",\n      detail:= \"\u6c38\u4ec1\u8207\u9ec3sir\u76f8\u7d04\u65bc\u5929\u53f0\u4ea4\u63db\u60c5\u5831\uff0c\u97d3\u741b\u5c07\u65bc\u9019\u661f\u671f\u9032\u884c\u6bd2\u54c1\" ++\n               \"\u4ea4\u6613\uff0c\u5730\u9ede\u672a\u77e5\u3002\u9ec3sir\u5247\u8aaa\u4ed6\u8cbb\u76e1\u5fc3\u529b\u5c07\u6c38\u4ec1\u50b7\u4eba\u7684\u6848\u5b50\u7531\" ++\n               \"\u5750\u7262\u6539\u6210\u770b\u5fc3\u7406\u91ab\u751f\uff0c\u4ea4\u5f85\u6c38\u4ec1\u8981\u7167\u505a\u3002\u6c38\u4ec1\u62b1\u6028\u81ea\u5df1\u88ab\u9ec3sir\" ++\n               \"\u9a19\u4e86\uff0c\u8aaa\u597d\u53ea\u7576\u4e09\u5e74\u81e5\u5e95\uff0c\u7d50\u679c\u73fe\u5728\u90fd\u5feb\u5341\u5e74\u4e86\uff0c\u4e0d\u77e5\u9053\u4f55\u6642\u624d\" ++\n               \"\u80fd\u6062\u5fa9\u8b66\u5bdf\u8eab\u4efd\u3002\u5341\u5e74\u9593\u767c\u751f\u4e86\u592a\u591a\u4e8b\uff0c\u6c38\u4ec1\u770b\u8457\u9ec3sir\u9001\u7684\u624b\u9336\" ++\n               \"\uff0c\u4ed6\u6709\u6642\u5019\u771f\u7684\u4e0d\u77e5\u9053\u8a72\u7528\u4ec0\u9ebc\u5fc3\u614b\u9762\u5c0d\u9ec3sir\uff08\u8a73\u60c5\u8acb\u898b\u7121\u9593\u9053\u2161\" ++\n               \"\u53ca\u7121\u9593\u9053\u2162\uff09\u3002\",\n      who:= {wong, chen},\n      `when`:= year_2002,\n      where:= (insert Location {name:=\"\u5929\u53f0\"}),         \n};\n</code></pre>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene05/scene05/#_2","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u6709\u4e00\u7a2e\u8aaa\u6cd5\u662f\u9ec3sir\u7279\u5225\u559c\u6b61\u9001\u4eba\u624b\u9336\u3002\u9664\u4e86\u65bc\u5929\u53f0\u9001\u4e86\u6c38\u4ec1\u624b\u9336\u5916\uff0c\u7121\u9593\u9053\u2161\u4e2dMary\u59d0\u7684\u624b\u9336\u4e5f\u662f\u9ec3sir\u6240\u9001\u3002\u6240\u4ee5\u7576\u5efa\u660e\u8a62\u554fMary\u59d0\u5176\u6240\u6234\u624b\u9336\u662f\u5426\u70ba\u97d3\u741b\u6240\u9001\uff0c\u5979\u4e26\u6c92\u6709\u6b63\u9762\u56de\u61c9\u3002</p>","tags":["datetime","cal::relative_duration"]},{"location":"scenes/scene06/scene06/","title":"06 - \u6709\u5167\u9b3c\u7d42\u6b62\u4ea4\u6613","text":"","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#full-schema-preview","title":"Full schema preview","text":"<p>\u672c\u5834\u666f\u7121\u9808migration</p> Full schema preview startend migration scenes/scene05/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene06/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>O\u8a18\u806f\u5408CIB\u6e96\u5099\u65bc\u4eca\u665a\u97d3\u741b\u8207\u6cf0\u570b\u4f6c\u4ea4\u6613\u53ef\u5361\u56e0\uff08\u53e4\u67ef\u9e7c\uff09\u6642\uff0c\u4f86\u500b\u4eba\u8d13\u4e26\u7372\u3002\u5efa\u660e\u77e5\u9053\u5f8c\uff0c\u5047\u88dd\u6253\u96fb\u8a71\u7d66\u5bb6\u4eba\uff0c\u901a\u77e5\u97d3\u741b\u3002\u97d3\u741b\u4e00\u76f4\u76e3\u807d\u8b66\u65b9\u983b\u9053\uff0c\u4e26\u6307\u793a\u8fea\u8def\u548c\u50bb\u5f37\u56db\u8655\u4e82\u6643\uff0c\u4e0d\u8981\u524d\u5f80\u4ea4\u6613\u5730\u9ede\u3002\u904e\u7a0b\u4e2d\uff0c\u6c38\u4ec1\u4e00\u76f4\u4ee5\u6469\u65af\u5bc6\u78bc\u8207\u9ec3sir\u806f\u7d61\u3002\u9ec3sir\u5728\u5f97\u77e5\u97d3\u741b\u76e3\u807d\u983b\u9053\u5f8c\uff0c\u96a8\u5373\u8f49\u63db\u983b\u9053\uff0c\u4e26\u4f7f\u7528\u820a\u983b\u9053\u767c\u51fa\u4eca\u665a\u884c\u52d5\u53d6\u6d88\u7684\u6307\u4ee4\u3002\u97d3\u741b\u4fe1\u4ee5\u70ba\u771f\uff0c\u6307\u793a\u8fea\u8def\u548c\u50bb\u5f37\u53ef\u4ee5\u524d\u5f80\u9f8d\u9f13\u7058\u4ea4\u6613\u3002\u6b63\u7576\u4ea4\u6613\u5b8c\u6210\uff0c\u9ec3sir\u6e96\u5099\u5148\u902e\u6355\u8fea\u8def\u548c\u50bb\u5f37\u5c07\u6bd2\u54c1\u6263\u4e0b\uff0c\u518d\u885d\u9032\u5c4b\u902e\u6355\u97d3\u741b\u4e4b\u969b\uff0c\u5efa\u4ec1\u4f7f\u7528\u7c21\u8a0a\u50b3\u9001\u300c\u6709\u5167\u9b3c\uff0c\u7d42\u6b62\u4ea4\u6613\u300d\u5230\u97d3\u741b\u6240\u5728\u4f4d\u7f6e\u9644\u8fd1\u7684\u6240\u6709\u624b\u6a5f\u3002</p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#edgeql-query","title":"EdgeQL query","text":"","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#insert","title":"<code>insert</code>\u5730\u9ede\u5927\u5ec8\u4e09\u6a13","text":"scenes/scene06/query.edgeql<pre><code>insert Location {name:=\"\u5927\u5ec8\u4e09\u6a13\"};\n</code></pre>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#update-wong","title":"<code>update</code> <code>wong</code>","text":"<p>\u9ec3sir\u70ba\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1\uff08O\u8a18\uff09\u7684\u8b66\u53f8\uff08<code>SP</code>\uff09\uff0c<code>update</code>\u5176\u76f8\u95dc<code>property</code>\u3002 scenes/scene06/query.edgeql<pre><code>update wong \nset {\n    police_rank:= PoliceRank.SP,\n    dept:= \"\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1(O\u8a18)\",\n};\n</code></pre></p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#inserto","title":"<code>insert</code>\u6578\u540dO\u8a18\u8b66\u5bdf","text":"<p><code>insert</code>\u9ec3sir\u9ebe\u4e0b\u8b66\u5bdf\u3002 scenes/scene06/query.edgeql<pre><code>for i in range_unpack(range(1, 11))\nunion (\n    insert Police {\n        name:=  \"police_\" ++ &lt;str&gt;i,\n        dept:= \"\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1(O\u8a18)\",\n        police_rank:= PoliceRank.SPC,\n    }\n);\n</code></pre></p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#update-lau","title":"<code>update</code> <code>lau</code>","text":"<p>\u5efa\u660e\u70ba\u5211\u4e8b\u60c5\u5831\u79d1\uff08CIB\uff09\u7684\u9ad8\u7d1a\u7763\u5bdf\uff08<code>SIP</code>\uff09\uff0c<code>update</code>\u5176\u76f8\u95dc<code>property</code>\u3002 scenes/scene06/query.edgeql<pre><code>update lau \nset {\n    police_rank:= PoliceRank.SIP,\n    dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n};\n</code></pre></p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#insertcib","title":"<code>insert</code>\u6578\u540dCIB\u8b66\u5bdf","text":"<p><code>insert</code>\u5efa\u660e\u9ebe\u4e0b\u8b66\u5bdf\u3002 scenes/scene06/query.edgeql<pre><code>insert Police{\n    name:= \"\u6797\u570b\u5e73\",\n    nickname:=\"\u5927B\",\n    police_rank:= PoliceRank.SSGT,\n    dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n    actors:= (\n        insert Actor{\n            name:= \"\u6797\u5bb6\u68df\",\n            eng_name:= \"Gordon\",\n        }\n    )\n};\n\nfor name in {\"\u5927\u8c61\", \"\u5b56\u516b\"}\nunion (\n    insert Police {\n        name:= name,\n        nickname:= name,\n        dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n        police_rank:= PoliceRank.SGT,\n    }\n);\n\nfor i in range_unpack(range(11, 14))\nunion (\n    insert Police {\n        name:=  \"police_\" ++ &lt;str&gt;i,\n        dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n        police_rank:= PoliceRank.SPC,\n    }\n);\n</code></pre></p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#insert_1","title":"<code>insert</code>\u6578\u540d\u97d3\u741b\u5c0f\u5f1f","text":"<p><code>insert</code>\u6578\u540d\u97d3\u741b\u5c0f\u5f1f\uff0c\u5305\u62ec\u5169\u500b\u5c0f<code>leader</code>\u8fea\u8def\u8207\u50bb\u5f37\u3002 scenes/scene06/query.edgeql<pre><code>insert Gangster {\n    name:= \"\u8fea\u6bd4\u4e9e\u8def\",\n    nickname:= \"\u8fea\u8def\",\n    gangster_boss:= hon,\n    gangster_rank:= GangsterRank.Leader,\n    actors:= (insert Actor {\n        name:= \"\u6797\u8fea\u5b89\", \n        eng_name:=\"Dion\",\n    }),\n};\n\ninsert Gangster {\n    name:= \"\u5f90\u5049\u5f37\",\n    nickname:= \"\u50bb\u5f37\",\n    gangster_boss:= hon,\n    gangster_rank:= GangsterRank.Leader,\n    actors:= (insert Actor {\n        name:= \"\u675c\u6c76\u6fa4\", \n        eng_name:= \"Edward\",\n    }),\n};\n\nfor i in range_unpack(range(1, 11))\nunion (\n    insert Gangster {\n        name:=  \"gangster_\" ++ &lt;str&gt;i,\n        gangster_boss:= hon,\n        gangster_rank:= GangsterRank.Nobody,\n    }\n);\n</code></pre></p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#insert_2","title":"<code>insert</code>\u6578\u500b\u63d0\u53ca\u7684\u5730\u6a19","text":"scenes/scene06/query.edgeql<pre><code>for loc in {\"\u8475\u6d8c\u78bc\u982d\", \"\u4e09\u865f\u5e79\u7dda\", \"\u9f8d\u9f13\u7058\"}\nunion (\n    insert Landmark{\n        name:= loc,\n    }\n);\n</code></pre>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#insert-chenlaucontact","title":"<code>insert</code> <code>ChenLauContact</code>","text":"scenes/scene06/query.edgeql<pre><code>insert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u9ec3sir\u5e36\u968a\u9032\u5165\u97d3\u741b\u6bd2\u54c1\u4ea4\u6613\u73fe\u5834\",\n    `when`:= year_2002,\n    where:= assert_single((select Location filter .name=\"\u5927\u5ec8\u4e09\u6a13\")),\n};\n</code></pre>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#group-1","title":"\u5b78\u7fd2\u4f7f\u7528<code>group</code> - \u60c5\u58831","text":"<p>\u8b93\u6211\u5011\u5047\u60f3\u4e00\u4e0b\u81ea\u5df1\u662f\u7de8\u5287\u3002\u9019\u500b\u5834\u666f\u7684\u4eba\u7269\u76f8\u6bd4\u524d\u9762\u591a\u4e86\u4e0d\u5c11\uff0c\u6211\u5011\u5fc5\u9808\u78ba\u8a8d\u5f9e\u8b66\u5bdf\u7684\u8996\u89d2\u4f86\u770b\uff0c\u5404\u500b\u968e\u7d1a\u7684\u4eba\u529b\u914d\u7f6e\u5408\u4e0d\u5408\u7406\uff0c\u6b64\u6642<code>group</code>\u6703\u662f\u4e00\u500b\u4e0d\u932f\u7684\u5de5\u5177\u3002<code>group</code>\u4ee5\u5f8c\u7684\u64cd\u4f5c\uff0c\u5927\u591a\u9700\u8981\u7528\u5230\u5b83\u7684<code>key</code>\u3001<code>grouping</code>\u53ca<code>elements</code>\u3002</p> <p>\u9996\u5148\u6211\u5011\u505a\u4ee5\u4e0b\u5617\u8a66\uff1a</p> <ul> <li>\u65bc<code>with</code>\u5340\u584a\u9078\u53d6<code>Police</code>\u3001<code>PoliceSpy</code>\u53ca<code>GangsterSpy</code>\uff08\u5efa\u660e\u53ca\u6c38\u4ec1\u4e5f\u90fd\u662f\u8b66\u5bdf\uff09\u547d\u540d\u70ba<code>p</code>\u3002</li> <li>\u65bc<code>with</code>\u5340\u584a<code>group p</code>\u4e26\u4f9d\u7167<code>police_rank</code>\u4f86\u5206\u985e\uff0c\u7d50\u679c\u547d\u540d\u70ba<code>g</code>\u3002</li> <li>\u6700\u5f8c\u4f7f\u7528<code>{**}</code>\u986f\u793a<code>g</code>\u7684\u7d30\u7bc0\u3002</li> </ul> scenes/scene06/query.edgeql<pre><code>with p:= Police union PoliceSpy union GangsterSpy,\n     g:= (group p by .police_rank),\nselect g {**};\n</code></pre> Deep fetching <p>\u5728\u719f\u6089\u4e0a\u9762\u9019\u6bb5query\u7684\u6642\u5019\uff0c\u6216\u8a31\u60a8\u6703\u5f88\u60f3\u53ea\u986f\u793a<code>key</code>\u88e1\u9762\u7684<code>police_rank</code>\u53ca<code>elements</code>\u88e1\u9762\u7684<code>name</code>\uff0c\u537b\u767c\u73fe\u4e0d\u77e5\u9053\u600e\u9ebc\u9054\u6210\u3002\u60a8\u53ef\u80fd\u6703\u505a\u4ee5\u4e0b\u5617\u8a66\uff1a <pre><code>#\u274c\nwith p:= Police union PoliceSpy union GangsterSpy,\n     g:= (group p by .police_rank),\nselect g {key {police_rank}, \n          elements {name}};\n</code></pre> \u4f46\u6b63\u78ba\u7684\u8a9e\u6cd5\u662f\u9700\u8981\u52a0\u4e0a<code>:</code>\uff1a <pre><code>#\u2705\nwith p:= Police union PoliceSpy union GangsterSpy,\n     g:= (group p by .police_rank),\nselect g {key: {police_rank}, \n          elements: {name}};\n</code></pre> <pre><code>{\n  {key: {police_rank: Protected}, elements: {default::PoliceSpy {name: '\u9673\u6c38\u4ec1'}}},\n  {\n    key: {police_rank: SPC},\n    elements: {\n      default::Police {name: 'police_1'},\n      default::Police {name: 'police_2'},\n      default::Police {name: 'police_3'},\n      default::Police {name: 'police_4'},\n      default::Police {name: 'police_5'},\n      default::Police {name: 'police_6'},\n      default::Police {name: 'police_7'},\n      default::Police {name: 'police_8'},\n      default::Police {name: 'police_9'},\n      default::Police {name: 'police_10'},\n      default::Police {name: 'police_11'},\n      default::Police {name: 'police_12'},\n      default::Police {name: 'police_13'},\n    },\n  },\n  {key: {police_rank: SGT}, elements: {default::Police {name: '\u5927\u8c61'}, default::Police {name: '\u5b56\u516b'}}},\n  {key: {police_rank: SSGT}, elements: {default::Police {name: '\u6797\u570b\u5e73'}}},\n  {key: {police_rank: SIP}, elements: {default::GangsterSpy {name: '\u5289\u5efa\u660e'}}},\n  {key: {police_rank: SP}, elements: {default::Police {name: '\u9ec3\u5fd7\u8aa0'}}},\n}\n</code></pre> \u9019\u4e5f\u662f\u4e00\u500b\u6211\u5011\u7d93\u5e38\u6703\u7a81\u7136\u5931\u61b6\u7684\u5730\u65b9\uff0c\u5206\u4eab\u7d66\u5927\u5bb6\u505a\u70ba\u53c3\u8003\u3002</p> <p>\u4f46\u9019\u9ebc\u4e00\u4f86\uff0c\u7d50\u679c\u6703\u975e\u5e38\u9577\uff0c\u6211\u5011\u8209\u9ec3sir\u70ba\u4f8b\uff0c\u56e0\u70ba<code>SP</code>\u7d1a\u5225\u53ea\u6709\u4ed6\u4e00\u4eba\u3002 <pre><code>  ...\n  {\n    id: 10d5423b-15cf-4c4d-89ca-e39b4bfa9902,\n    grouping: {'police_rank'},\n    key: {id: 46542b84-47fb-44b8-bdfd-2bc34e924eee, police_rank: SP},\n    elements: {\n      default::Police {\n        is_officer: true,\n        classic_lines: ['\u4f6025\u865f\u751f\u65e5\u561b!25\u4ed4!'],\n        eng_name: {},\n        name: '\u9ec3\u5fd7\u8aa0',\n        nickname: '\u9ec3sir',\n        dept: '\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1(O\u8a18)',\n        police_rank: SP,\n        id: db630896-bc48-11ee-aae4-df71814b08b4,\n      },\n    },\n  },\n  ...\n</code></pre> \u4e4b\u6240\u4ee5\u6703\u5f97\u5230\u9019\u9ebc\u9577\u7684\u7d50\u679c\u662f\u56e0\u70ba\u4f7f\u7528\u4e86<code>{**}</code>\uff0c\u4f46\u662f\u6211\u5011\u7684\u76ee\u7684\u50c5\u662f\u60f3\u77e5\u9053\u5404\u500b\u968e\u7d1a\u7684\u4eba\u6578\uff0c\u6240\u4ee5\u53ef\u4ee5\u505a\u4e0b\u5217\u4fee\u6539\uff1a</p> <ul> <li>\u5229\u7528<code>group</code>\u7684<code>key</code>\u53ef\u4ee5\u5f97\u5230<code>police_rank</code>\uff08\u56e0\u70ba\u9019\u500b<code>property</code>\u5c31\u662f\u6211\u5011\u5728<code>by</code>\u6642\u4f7f\u7528\u7684\uff09\uff0c\u4e26\u5728<code>g{ }</code>\u4e2d\u547d\u540d\u70ba<code>police_rank</code>\u3002</li> <li>\u5229\u7528<code>group</code>\u7684<code>elements</code>\u5f97\u5230\u8a72\u5206\u985e\u4e2d\u6bcf\u4e00\u500b<code>object</code>\uff08\u5373<code>Police</code>\u6216<code>PoliceSpy</code>\u6216<code>GangsterSpy</code>\uff09\uff0c\u63a5\u8457\u4f7f\u7528<code>count</code>\u4f86\u8a08\u7b97\u5176\u6578\u91cf\uff0c\u4e26\u5728<code>g{ }</code>\u4e2d\u547d\u540d\u70ba<code>counts</code>\u3002</li> <li>\u6700\u5f8c\uff0c\u7531\u65bc<code>police_rank</code>\u662f\u4e00\u500b<code>enum</code>\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528<code>order by</code>\u5c0d\u5176\u9032\u884c\u6392\u5e8f\uff0c\u4e26\u52a0\u4e0a<code>desc</code>\uff0c\u9019\u9ebc\u4e00\u4f86\u5c31\u6703\u6539\u6210\u5b98\u968e\u8f03\u5927\u7684\u6392\u5728\u524d\u9762\u3002</li> </ul> <p>scenes/scene06/query.edgeql<pre><code>with p:= Police union PoliceSpy union GangsterSpy,\n     g:= (group p by .police_rank),\nselect g {police_rank:= .key.police_rank, \n          counts:= count(.elements)}\norder by .police_rank desc;\n</code></pre> <pre><code>{\n  {police_rank: SP, counts: 1},\n  {police_rank: SIP, counts: 1},\n  {police_rank: SSGT, counts: 1},\n  {police_rank: SGT, counts: 2},\n  {police_rank: SPC, counts: 13},\n  {police_rank: Protected, counts: 1},\n}\n</code></pre> \u9019\u9ebc\u4e00\u4f86\u5c31\u53ef\u4ee5\u770b\u51fa\uff1a</p> <ul> <li>\u9ad8\u968e\u9577\u5b98<code>SP</code>\u53ca<code>SIP</code>\u5404\u4e00\u4f4d</li> <li>\u6bd4\u8f03\u6709\u5de5\u4f5c\u7d93\u9a57\u7684<code>SSGT</code>\u4e00\u4f4d\u53ca<code>SGT</code>\u5169\u4f4d\u3002</li> <li>\u4e3b\u8981\u57f7\u52e4\u63a2\u54e1<code>SPC</code>\u5341\u4e09\u4f4d\u3002</li> <li>\u81e5\u5e95\u63a2\u54e1\u4e00\u4f4d\u3002</li> </ul> <p>\u7de8\u5287\u6b64\u6642\u53ef\u4ee5\u4f9d\u64da\u9019\u500b\u7d50\u679c\uff0c\u4f86\u8acb\u6559\u76f8\u95dc\u5c08\u696d\u4eba\u58eb\u9019\u6a23\u7684\u4eba\u529b\u914d\u7f6e\u662f\u5426\u5408\u7406\u3002</p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#group-2","title":"\u5b78\u7fd2\u4f7f\u7528<code>group</code> - \u60c5\u58832","text":"<p>\u5047\u8a2d\u7247\u5834\u5de5\u4f5c\u4eba\u54e1\u5728\u4f11\u606f\u6642\u9593\u804a\u5230\uff0c\u4e0d\u77e5\u9053\u5287\u4e2d\u51fa\u73fe\u7684\u5730\u540d\uff1a</p> <ul> <li>\u6700\u9577\u7684\u6709\u591a\u9577\u5462\uff1f</li> <li>\u54ea\u4e00\u500b\u9577\u5ea6\u53c8\u662f\u51fa\u73fe\u6700\u591a\u6b21\u7684\u5462\uff1f</li> </ul> <p>\u6b64\u6642\u53c8\u662f\u53ef\u4ee5\u597d\u597d\u904b\u7528<code>group</code>\u7684\u6a5f\u6703\u56c9\u3002\u56e0\u70ba\u9019\u6b21\u4e0d\u50cf\u4e0a\u9762\u4e00\u6a23\uff0c\u6709\u5167\u5efa\u7684<code>police_rank</code>\u53ef\u4ee5\u4f7f\u7528\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528<code>using</code>\u4f86\u7d44\u5408\u51fa\u60f3\u8981\u5982\u4f55\u5206\u985e\u7684\u64cd\u4f5c\u3002</p> <p>\u91dd\u5c0d\u7b2c\u4e00\u500b\u554f\u984c\uff1a</p> <ul> <li>\u9996\u5148\u5c0d<code>name</code> <code>property</code>\u4f7f\u7528<code>len</code>\uff0c\u4e26\u53d6\u540d\u70ba<code>name_length</code>\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u5c07\u5176\u653e\u5728<code>by</code>\u4e4b\u5f8c\u4f86\u5206\u985e\u3002</li> <li>\u5229\u7528<code>group</code>\u7684<code>key</code>\u5f97\u5230\u525b\u525b\u5b9a\u7fa9\u7684<code>name_length</code>\uff0c\u4e26\u5728<code>g{ }</code>\u4e2d\u547d\u540d\u70ba<code>name_length</code>\u3002</li> <li>\u5229\u7528<code>group</code>\u7684<code>elements</code>\u5f97\u5230\u8a72\u5206\u985e\u4e2d\u6bcf\u4e00\u500b<code>Place</code>\uff0c\u63a5\u8457\u4f7f\u7528<code>count</code>\u4f86\u8a08\u7b97\u5176\u6578\u91cf\uff0c\u4e26\u5728<code>g{ }</code>\u4e2d\u547d\u540d\u70ba<code>counts</code>\u3002</li> <li>\u5229\u7528<code>group</code>\u7684<code>elements</code>\u5f97\u5230<code>name</code> <code>property</code>\uff0c\u4e26\u5728<code>g{ }</code>\u4e2d\u547d\u540d\u70ba<code>names</code>\u3002</li> <li>\u6700\u5f8c\u4f7f\u7528<code>order by</code>\u5c0d<code>name_length</code>\u9032\u884c\u6392\u5e8f\uff0c\u4e26\u52a0\u4e0a<code>desc</code>\uff0c\u9019\u9ebc\u4e00\u4f86\u9577\u5ea6\u8f03\u9577\u7684\u5730\u540d\u5c31\u6703\u986f\u793a\u5728\u524d\u9762\u4e86\u3002</li> </ul> <p>scenes/scene06/query.edgeql<pre><code>with g:= (group Place \n          using name_length:= len(.name)\n          by name_length),\nselect g {name_length:= .key.name_length ,\n          counts:= count(.elements),\n          names:= .elements.name}\norder by .name_length desc;\n</code></pre> <pre><code>{\n  {name_length: 6, counts: 1, names: {'Hi-Fi\u92ea'}},\n  {name_length: 4, counts: 3, names: {'\u5927\u5ec8\u4e09\u6a13', '\u8475\u6d8c\u78bc\u982d', '\u4e09\u865f\u5e79\u7dda'}},\n  {name_length: 3, counts: 2, names: {'\u8b66\u5bdf\u5c40', '\u9f8d\u9f13\u7058'}},\n  {name_length: 2, counts: 3, names: {'\u4f5b\u5802', '\u5929\u53f0', '\u8b66\u6821'}},\n}\n</code></pre> \u7d50\u679c\u767c\u73fe\u9577\u5ea6\u6700\u9577\u7684\u5730\u540d\u662fHi-Fi\u92ea\uff0c\u9577\u5ea6\u70ba6\u3002</p> <p>\u91dd\u5c0d\u7b2c\u4e8c\u500b\u554f\u984c\uff0c\u53ea\u9700\u5c07<code>order by</code>\u7684\u76ee\u6a19\u6539\u70ba<code>counts</code>\u5373\u53ef\u3002 scenes/scene06/query.edgeql<pre><code>with g:= (group Place \n          using name_length:= len(.name)\n          by name_length),\nselect g {name_length:= .key.name_length ,\n          counts:= count(.elements),\n          names:= .elements.name}\norder by .counts desc;\n</code></pre> <pre><code>{\n  {name_length: 4, counts: 3, names: {'\u5927\u5ec8\u4e09\u6a13', '\u8475\u6d8c\u78bc\u982d', '\u4e09\u865f\u5e79\u7dda'}},\n  {name_length: 2, counts: 3, names: {'\u4f5b\u5802', '\u5929\u53f0', '\u8b66\u6821'}},\n  {name_length: 3, counts: 2, names: {'\u8b66\u5bdf\u5c40', '\u9f8d\u9f13\u7058'}},\n  {name_length: 6, counts: 1, names: {'Hi-Fi\u92ea'}},\n}\n</code></pre></p> <p>\u7d50\u679c\u767c\u73fe\u5730\u540d\u9577\u5ea6\u70ba4\u53ca2\u7684\u7d44\u5225\u90fd\u51fa\u73fe\u4e09\u6b21\u3002</p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"<p>\u9019\u88e1\u9078\u64c7\u4eba\u7269\u6642\uff0c\u5176\u5be6\u4e5f\u53ef\u4ee5\u50cf\u524d\u9762\u4e00\u6a23\u4f7f\u7528<code>Police</code>\u53ca<code>Gangster</code>\u3002\u4f46\u9019\u9ebc\u4e00\u4f86\uff0c\u5c31\u662f\u5047\u8a2d\u8981\u9078\u53d6\u5168\u90e8\u7684<code>Police</code>\u53ca<code>Gangster</code>\uff0c\u5982\u679c\u4e4b\u5f8c\u6211\u5011\u4fee\u6539\u4e86\u524d\u9762\u5e7e\u500b\u5834\u666f\u7684query\uff0c\u5728\u73fe\u5728\u9019\u7a2e\u4eba\u7269\u6bd4\u8f03\u591a\u7684\u5834\u666f\u6703\u96e3\u4ee5\u5075\u932f\uff08\u60a8\u53ef\u4ee5\u5047\u60f3<code>Scene</code>\u88ab\u6975\u5ea6\u7c21\u5316\uff0c\u53ea\u5305\u542b\u91cd\u8981\u6f14\u54e1\uff0c\u4f46\u914d\u89d2\u53ca\u53f0\u524d\u5e55\u5f8c\u8a31\u591a\u5de5\u4f5c\u4eba\u54e1\u90fd\u672a\u8a08\u5165\uff09\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u9019\u908a\u793a\u7bc4\u4f7f\u7528<code>with</code>\u642d\u914d<code>filter</code>\uff0c\u9650\u7e2e\u9078\u53d6\u7bc4\u570d\u3002 scenes/scene06/query.edgeql<pre><code>with policemen:= (select Police filter .dept in {\"\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1(O\u8a18)\", \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\"}),\n     gangsters:= (select Gangster filter .gangster_boss=hon)\ninsert Scene {\n      title:= \"\u6709\u5167\u9b3c\u7d42\u6b62\u4ea4\u6613\",\n      detail:= \"O\u8a18\u806f\u5408CIB\u6e96\u5099\u65bc\u4eca\u665a\u97d3\u741b\u8207\u6cf0\u570b\u4f6c\u4ea4\u6613\u53ef\u5361\u56e0\uff08\u53e4\u67ef\u9e7c\uff09\u6642\uff0c\u4f86\u500b\" ++\n               \"\u4eba\u8d13\u4e26\u7372\u3002\u5efa\u660e\u77e5\u9053\u5f8c\uff0c\u5047\u88dd\u6253\u96fb\u8a71\u7d66\u5bb6\u4eba\uff0c\u901a\u77e5\u97d3\u741b\u3002\u97d3\u741b\u4e00\u76f4\u76e3\" ++\n               \"\u807d\u8b66\u65b9\u983b\u9053\uff0c\u4e26\u6307\u793a\u8fea\u8def\u548c\u50bb\u5f37\u56db\u8655\u4e82\u6643\uff0c\u4e0d\u8981\u524d\u5f80\u4ea4\u6613\u5730\u9ede\u3002\u904e\u7a0b\u4e2d\uff0c\" ++\n               \"\u6c38\u4ec1\u4e00\u76f4\u4ee5\u6469\u65af\u5bc6\u78bc\u8207\u9ec3sir\u806f\u7d61\u3002\u9ec3sir\u5728\u5f97\u77e5\u97d3\u741b\u76e3\u807d\u983b\u9053\u5f8c\uff0c\u96a8\u5373\" ++\n               \"\u8f49\u63db\u983b\u9053\uff0c\u4e26\u4f7f\u7528\u820a\u983b\u9053\u767c\u51fa\u4eca\u665a\u884c\u52d5\u53d6\u6d88\u7684\u6307\u4ee4\u3002\u97d3\u741b\u4fe1\u4ee5\u70ba\u771f\uff0c\u6307\u793a\" ++\n               \"\u8fea\u8def\u548c\u50bb\u5f37\u53ef\u4ee5\u524d\u5f80\u9f8d\u9f13\u7058\u4ea4\u6613\u3002\u6b63\u7576\u4ea4\u6613\u5b8c\u6210\uff0c\u9ec3sir\u6e96\u5099\u5148\u902e\u6355\u8fea\u8def\" ++\n               \"\u548c\u50bb\u5f37\u5c07\u6bd2\u54c1\u6263\u4e0b\uff0c\u518d\u885d\u9032\u5c4b\u902e\u6355\u97d3\u741b\u4e4b\u969b\uff0c\u5efa\u4ec1\u4f7f\u7528\u7c21\u8a0a\u50b3\u9001\u300c\u6709\u5167\u9b3c\uff0c\" ++\n               \"\u7d42\u6b62\u4ea4\u6613\u300d\u5230\u97d3\u741b\u6240\u5728\u4f4d\u7f6e\u9644\u8fd1\u7684\u6240\u6709\u624b\u6a5f\u3002\",\n      who:= policemen union gangsters union {chen, lau, hon},\n      `when`:= year_2002,\n      where:= (select Place filter .name=\"\u5927\u5ec8\u4e09\u6a13\" or .name=\"\u9f8d\u9f13\u7058\"),         \n      remarks:= \"1.\u5047\u8a2d\u570b\u5e73\u5b98\u968e\u70ba`SSGT`\uff0c\u5927\u8c61\u8207\u5b56\u516b\u5b98\u968e\u70ba`SGT`\u3002\"  \n};\n</code></pre></p>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#query-review","title":"Query review","text":"Query review scenes/scene06/query.edgeql<pre><code>insert Location {name:=\"\u5927\u5ec8\u4e09\u6a13\"};\n\nupdate wong \nset {\n    police_rank:= PoliceRank.SP,\n    dept:= \"\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1(O\u8a18)\",\n};\n\nfor i in range_unpack(range(1, 11))\nunion (\n    insert Police {\n        name:=  \"police_\" ++ &lt;str&gt;i,\n        dept:= \"\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1(O\u8a18)\",\n        police_rank:= PoliceRank.SPC,\n    }\n);\n\nupdate lau \nset {\n    police_rank:= PoliceRank.SIP,\n    dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n};\n\ninsert Police{\n    name:= \"\u6797\u570b\u5e73\",\n    nickname:=\"\u5927B\",\n    police_rank:= PoliceRank.SSGT,\n    dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n    actors:= (\n        insert Actor{\n            name:= \"\u6797\u5bb6\u68df\",\n            eng_name:= \"Gordon\",\n        }\n    )\n};\n\nfor name in {\"\u5927\u8c61\", \"\u5b56\u516b\"}\nunion (\n    insert Police {\n        name:= name,\n        nickname:= name,\n        dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n        police_rank:= PoliceRank.SGT,\n    }\n);\n\nfor i in range_unpack(range(11, 14))\nunion (\n    insert Police {\n        name:=  \"police_\" ++ &lt;str&gt;i,\n        dept:= \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\",\n        police_rank:= PoliceRank.SPC,\n    }\n);\n\ninsert Gangster {\n    name:= \"\u8fea\u6bd4\u4e9e\u8def\",\n    nickname:= \"\u8fea\u8def\",\n    gangster_boss:= hon,\n    gangster_rank:= GangsterRank.Leader,\n    actors:= (insert Actor {\n        name:= \"\u6797\u8fea\u5b89\", \n        eng_name:=\"Dion\",\n    }),\n};\n\ninsert Gangster {\n    name:= \"\u5f90\u5049\u5f37\",\n    nickname:= \"\u50bb\u5f37\",\n    gangster_boss:= hon,\n    gangster_rank:= GangsterRank.Leader,\n    actors:= (insert Actor {\n        name:= \"\u675c\u6c76\u6fa4\", \n        eng_name:= \"Edward\",\n    }),\n};\n\nfor i in range_unpack(range(1, 11))\nunion (\n    insert Gangster {\n        name:=  \"gangster_\" ++ &lt;str&gt;i,\n        gangster_boss:= hon,\n        gangster_rank:= GangsterRank.Nobody,\n    }\n);\n\nfor loc in {\"\u8475\u6d8c\u78bc\u982d\", \"\u4e09\u865f\u5e79\u7dda\", \"\u9f8d\u9f13\u7058\"}\nunion (\n    insert Landmark{\n        name:= loc,\n    }\n);\n\ninsert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u9ec3sir\u5e36\u968a\u9032\u5165\u97d3\u741b\u6bd2\u54c1\u4ea4\u6613\u73fe\u5834\",\n    `when`:= year_2002,\n    where:= assert_single((select Location filter .name=\"\u5927\u5ec8\u4e09\u6a13\")),\n};\n\nwith p:= Police union PoliceSpy union GangsterSpy,\n     g:= (group p by .police_rank),\nselect g {**};\n\nwith p:= Police union PoliceSpy union GangsterSpy,\n     g:= (group p by .police_rank),\nselect g {police_rank:= .key.police_rank, \n          counts:= count(.elements)}\norder by .police_rank desc;\n\nwith g:= (group Place \n          using name_length:= len(.name)\n          by name_length),\nselect g {name_length:= .key.name_length ,\n          counts:= count(.elements),\n          names:= .elements.name}\norder by .name_length desc;\n\nwith g:= (group Place \n          using name_length:= len(.name)\n          by name_length),\nselect g {name_length:= .key.name_length ,\n          counts:= count(.elements),\n          names:= .elements.name}\norder by .counts desc;\n\nwith policemen:= (select Police filter .dept in {\"\u6709\u7d44\u7e54\u7f6a\u6848\u53ca\u4e09\u5408\u6703\u8abf\u67e5\u79d1(O\u8a18)\", \"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\"}),\n     gangsters:= (select Gangster filter .gangster_boss=hon)\ninsert Scene {\n      title:= \"\u6709\u5167\u9b3c\u7d42\u6b62\u4ea4\u6613\",\n      detail:= \"O\u8a18\u806f\u5408CIB\u6e96\u5099\u65bc\u4eca\u665a\u97d3\u741b\u8207\u6cf0\u570b\u4f6c\u4ea4\u6613\u53ef\u5361\u56e0\uff08\u53e4\u67ef\u9e7c\uff09\u6642\uff0c\u4f86\u500b\" ++\n               \"\u4eba\u8d13\u4e26\u7372\u3002\u5efa\u660e\u77e5\u9053\u5f8c\uff0c\u5047\u88dd\u6253\u96fb\u8a71\u7d66\u5bb6\u4eba\uff0c\u901a\u77e5\u97d3\u741b\u3002\u97d3\u741b\u4e00\u76f4\u76e3\" ++\n               \"\u807d\u8b66\u65b9\u983b\u9053\uff0c\u4e26\u6307\u793a\u8fea\u8def\u548c\u50bb\u5f37\u56db\u8655\u4e82\u6643\uff0c\u4e0d\u8981\u524d\u5f80\u4ea4\u6613\u5730\u9ede\u3002\u904e\u7a0b\u4e2d\uff0c\" ++\n               \"\u6c38\u4ec1\u4e00\u76f4\u4ee5\u6469\u65af\u5bc6\u78bc\u8207\u9ec3sir\u806f\u7d61\u3002\u9ec3sir\u5728\u5f97\u77e5\u97d3\u741b\u76e3\u807d\u983b\u9053\u5f8c\uff0c\u96a8\u5373\" ++\n               \"\u8f49\u63db\u983b\u9053\uff0c\u4e26\u4f7f\u7528\u820a\u983b\u9053\u767c\u51fa\u4eca\u665a\u884c\u52d5\u53d6\u6d88\u7684\u6307\u4ee4\u3002\u97d3\u741b\u4fe1\u4ee5\u70ba\u771f\uff0c\u6307\u793a\" ++\n               \"\u8fea\u8def\u548c\u50bb\u5f37\u53ef\u4ee5\u524d\u5f80\u9f8d\u9f13\u7058\u4ea4\u6613\u3002\u6b63\u7576\u4ea4\u6613\u5b8c\u6210\uff0c\u9ec3sir\u6e96\u5099\u5148\u902e\u6355\u8fea\u8def\" ++\n               \"\u548c\u50bb\u5f37\u5c07\u6bd2\u54c1\u6263\u4e0b\uff0c\u518d\u885d\u9032\u5c4b\u902e\u6355\u97d3\u741b\u4e4b\u969b\uff0c\u5efa\u4ec1\u4f7f\u7528\u7c21\u8a0a\u50b3\u9001\u300c\u6709\u5167\u9b3c\uff0c\" ++\n               \"\u7d42\u6b62\u4ea4\u6613\u300d\u5230\u97d3\u741b\u6240\u5728\u4f4d\u7f6e\u9644\u8fd1\u7684\u6240\u6709\u624b\u6a5f\u3002\",\n      who:= policemen union gangsters union {chen, lau, hon},\n      `when`:= year_2002,\n      where:= (select Place filter .name=\"\u5927\u5ec8\u4e09\u6a13\" or .name=\"\u9f8d\u9f13\u7058\"),         \n      remarks:= \"1.\u5047\u8a2d\u570b\u5e73\u5b98\u968e\u70ba`SSGT`\uff0c\u5927\u8c61\u8207\u5b56\u516b\u5b98\u968e\u70ba`SGT`\u3002\"  \n};\n</code></pre>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#_2","title":"\u7121\u9593\u5047\u8a2d","text":"<ul> <li>\u5efa\u660e\u8207\u9ec3sir\u7684\u8077\u7d1a\u7a0d\u5f8c\u624d\u6703\u63d0\u53ca\uff0c\u6211\u5011\u63d0\u524d\u65bc\u6b64\u8207\u90e8\u9580\u4e00\u8d77<code>update</code>\u3002</li> <li>\u5efa\u660e\u7684\u5c0f\u7d44\u6210\u54e1\u5176\u5be6\u65bc\u524d\u4e00\u5e55\u5047\u626e\u5f8b\u5e2b\u6642\u5df2\u7d93\u51fa\u73fe\uff0c\u6211\u5011\u7701\u7565\u8a72\u5834\u666f\uff0c\u6539\u65bc\u6b64\u8655 <code>insert</code>\u3002</li> <li>\u5047\u8a2d\u5927\u8c61\u8207\u5b56\u516b\u7684\u5169\u4eba\u7684\u672c\u540d\u4e5f\u662f\u5927\u8c61\u8207\u5b56\u516b\u3002\u5169\u4eba\u61c9\u8a72\u662f\u96b8\u5c6c\u65bcO\u8a18\u9ec3sir\u624b\u4e0b\uff0c\u4f46\u56e0\u70baCIB\u5efa\u660e\u624b\u4e0b\u65bc\u5287\u4e2d\u5927\u591a\u6c92\u6709\u51fa\u73fe\u4eba\u540d\uff0c\u6240\u4ee5\u5047\u8a2d\u5169\u4eba\u70baCIB\u90e8\u9580\u3002</li> <li>\u4e09\u865f\u5e79\u7dda\u662f\u5287\u4e2d\u7a0d\u5f8c\u624d\u6703\u51fa\u73fe\u7684\u5730\u540d\uff0c\u63d0\u524d\u79fb\u81f3\u6b64\u8655<code>insert</code>\u3002</li> </ul>","tags":["for loop","group"]},{"location":"scenes/scene06/scene06/#_3","title":"\u7121\u9593\u5439\u6c34","text":"<ul> <li>\u5efa\u660e\u50b3\u9001\u7684\u7c21\u8a0a\u539f\u6587\u662f\u300c\u6709\u5167\u9b3c\uff0c\u7d42\u6b62\u4ea4\u6613\u300d\uff0c\u4f46\u6700\u7d42\u65bc\u8def\u4eba\u624b\u6a5f\u4e0a\u986f\u793a\u7684\u662f\u300c\u6709\u5167\u9b3c\u7d42\u6b62\u4ea4\u6613\u300d\uff0c\u5c11\u4e86\u4e00\u500b\u9017\u865f\u3002</li> <li>\u672c\u7247\u958b\u982d\u97d3\u741b\u63d0\u5230\u4ee5\u524d\u5728\u5c6f\u9580\u505a\u4ee3\u5ba2\u6cca\u8eca\u7684\u5de5\u4f5c\uff0c\u53ef\u4ee5\u5f97\u77e5\u5176\u70ba\u5c6f\u9580\u7576\u5730\u4eba\u6216\u662f\u8207\u8a72\u5730\u6df5\u7de3\u6df1\u539a\uff0c\u6240\u4ee5\u6bd2\u54c1\u4ea4\u6613\u5730\u9ede\u9078\u64c7\u9644\u8fd1\u7684\u9f8d\u9f13\u7058\u4e5f\u751a\u70ba\u5408\u7406\u3002</li> <li>\u672c\u5834\u666f\u6709O\u8a18\u53caCIB\u90e8\u9580\uff0c\u537b\u6c92\u6709\u6bd2\u54c1\u8abf\u67e5\u79d1\uff08MB\uff09\u53c3\u8207\uff0c\u6709\u9ede\u4ee4\u4eba\u8cbb\u89e3\u3002</li> </ul>","tags":["for loop","group"]},{"location":"scenes/scene07/scene07/","title":"07 - \u4e92\u731c\u5e95\u724c","text":"","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#full-schema-preview","title":"Full schema preview","text":"Full schema preview start1st migrationend migration scenes/scene06/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene07/schema_1st_migration.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene07/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u97d3\u741b\u5343\u921e\u4e00\u9aee\u4e4b\u969b\u6536\u5230\u5efa\u660e\u7c21\u8a0a\uff0c\u7dca\u6025\u6253\u7d66\u8fea\u8def\u8207\u50bb\u5f37\uff0c\u5c07\u8207\u6cf0\u570b\u4f6c\u4ea4\u6613\u7684\u53ef\u5361\u56e0\u4e1f\u9032\u6d77\u88e1\u3002\u9ec3sir\u898b\u884c\u52d5\u5931\u6557\uff0c\u53ea\u5f97\u66ab\u6642\u5c07\u97d3\u741b\u53ca\u5176\u624b\u4e0b\u5e36\u56de\u8b66\u5bdf\u5c40\u3002\u9ec3sir\u78ba\u8a8d\u8b49\u64da\u4e0d\u8db3\u4ee5\u8d77\u8a34\u97d3\u741b\u5f8c\uff0c\u5e36\u968a\u4f86\u5230\u97d3\u741b\u7528\u9910\u7684\u623f\u9593\u3002\u9ec3sir\u85c9\u6a5f\u5632\u8af7\u97d3\u741b\uff0c\u96d6\u7136\u9019\u6b21\u7121\u6cd5\u902e\u6355\u4ed6\uff0c\u4f46\u5df2\u4ee4\u4ed6\u640d\u53d7\u5e7e\u5343\u842c\u3002\u97d3\u741b\u807d\u5f8c\uff0c\u77ac\u9593\u7ffb\u81c9\u5c07\u684c\u4e0a\u98df\u7269\u5f80\u9ec3sir\u5ea7\u4f4d\u6383\u53bb\u3002\u5169\u4eba\u8a00\u8ac7\u9593\u91dd\u92d2\u76f8\u5c0d\uff0c\u4e92\u76f8\u731c\u6e2c\u8457\u5c0d\u65b9\u5b89\u6392\u5728\u5df1\u65b9\u7684\u81e5\u5e95\u662f\u8ab0\u3002\u6700\u5f8c\uff0c\u97d3\u741b\u56c2\u5f35\u5730\u5e36\u8457\u624b\u4e0b\u5011\u5927\u6b65\u96e2\u53bb\u3002</p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#edgeql-query","title":"EdgeQL query","text":"","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#beverage","title":"\u5efa\u7acb<code>Beverage</code>","text":"<p>\u5168\u5287\u81f3\u6b64\u5df2\u662f\u7b2c\u4e09\u6b21\u559d\u98f2\u6599\u4e86\uff0c\u4e0d\u7981\u8b93\u6211\u5011\u60f3\u8981\u5efa\u7acb\u4e00\u500b<code>Beverage</code>\u4f86\u8a18\u9304\u6240\u6709\u4eba\u559d\u904e\u7684\u98f2\u6599\u3002</p> <p><code>Beverage</code>\u6709\u4e00\u500b<code>property</code>\u548c\u56db\u500b<code>link</code>\uff1a</p> <ul> <li><code>name</code> <code>property</code>\u70ba\u5fc5\u586b\u7684\u98f2\u6599\u540d\u3002</li> <li><code>produced_by</code> <code>link</code>\u70ba\u751f\u7522\u5ee0\u5bb6\u3002</li> <li><code>consumed_by</code> <code>link</code>\u70ba\u88ab\u8ab0\u6240\u559d\u3002</li> <li><code>when</code> <code>link</code>\u70ba\u4f55\u6642\u88ab\u559d\u3002</li> <li><code>where</code> <code>link</code>\u70ba\u5728\u54ea\u88e1\u88ab\u559d\u3002</li> </ul> scenes/scene07/schema_1st_migration.esdl<pre><code>type Beverage {\n    required name: str;\n    produced_by: Store;\n    consumed_by: Character;\n    `when`: FuzzyTime;\n    where: Place;\n} \n</code></pre> make 1st migration here\uff08<code>scenes/scene07/schema_1st_migration.esdl</code>\uff09 <pre><code>did you create object type 'default::Beverage'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#insert","title":"<code>insert</code>\u5e97\u5bb6\u9f8d\u9f13\u7058","text":"<p>\u5728\u958b\u59cb\u9032\u884c<code>Beverage</code>\u76f8\u95dc\u64cd\u4f5c\u524d\uff0c\u6211\u5011\u5148<code>insert</code>\u4e00\u500b\u9f8d\u9f13\u7058<code>Store object</code>\uff0c\u4ee3\u8868\u4e00\u5bb6\u540d\u70ba\u9f8d\u9f13\u7058\u8336\u9910\u5ef3\u3002 scenes/scene07/query.edgeql<pre><code>insert Store {name:=\"\u9f8d\u9f13\u7058\"};\n</code></pre></p> <p>\u5982\u679c\u60a8\u9084\u8a18\u5f97\u7684\u8a71\uff0c\u4e0a\u4e00\u500b\u5834\u666f\u6211\u5011\u4e5f\u6709\u540d\u70ba\u4e00\u500b\u9f8d\u9f13\u7058\u7684<code>Landmark object</code>\u3002\u7531\u65bc<code>Store</code>\u53ca<code>Landmark</code>\u90fd\u662f<code>extending</code>\u81ea<code>Place</code>\uff0c\u8b93\u6211\u5011\u56de\u9867\u4e00\u4e0b<code>Place</code>\u7684schema\uff1a scenes/scene07/schema.esdl<pre><code>abstract type Place {\n    required name: str {\n        delegated constraint exclusive;\n    };\n}\n</code></pre> \u7531\u65bc<code>Place</code>\u7684<code>name</code> <code>property</code>\u4f7f\u7528\u4e86<code>delegated constraint exclusive</code>\uff0c\u6240\u4ee5<code>Store</code>\u53ca<code>Landmark</code>\u5404\u81ea\u90fd\u53ef\u4ee5\u5efa\u7acb\u81ea\u5df1\u7684\u9f8d\u9f13\u7058\u3002</p> <p>\u4f46\u662f\u5982\u679c\u60f3\u518d<code>insert</code>\u4e00\u500b\u9f8d\u9f13\u7058<code>Store object</code>\u7684\u8a71\uff0c\u5247\u6703\u5831\u932f\u5982\u4e0b\uff1a</p> <p>\u5831\u932f\u8a0a\u606f</p> <pre><code>edgedb error: ConstraintViolationError: name violates exclusivity constraint\nDetail: property 'name' of object type 'default::Store' violates exclusivity constraint\n</code></pre>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#insert-beverage","title":"<code>insert</code> <code>Beverage</code>","text":"<p>\u6709\u559d\u98f2\u6599\u7684\u89d2\u8272\u592a\u591a\u4e86\uff0c\u8b93\u6211\u5011<code>insert</code>\u4e09\u7a2e\u98f2\u6599\u4ee3\u8868\u5c31\u597d\u3002</p> <p>\u7b2c\u4e00\u7a2e\u662f\u71b1\u5976\u8336\uff0c\u70ba\u5efa\u660e\u65bc\u4e0b\u5348\u8336\u6642\u9593\u559d\u7684\uff0c\u70ba\u9f8d\u9f13\u7058\u8336\u9910\u5ef3\u51fa\u54c1\u3002</p> \u4e09\u9ede\u4e09 <p>\u7cb5\u8a9e\u4e2d\u5f62\u5bb9\u5206\u9418\u6642\uff0c\u7fd2\u6163\u5c07\u516d\u5341\u5206\u9418\u5206\u4f5c\u5341\u4e8c\u4efd\uff0c\u6bcf\u500b\u6578\u5b57\u5c0d\u61c9\u4e94\u5206\u9418\uff0c\u6240\u4ee5\u4e0b\u5348\u4e09\u9ede\u4e09\u5373\u4ee3\u886815:15\u3002</p> scenes/scene07/query.edgeql<pre><code>insert Beverage {\n    name:= \"\u71b1\u5976\u8336\",\n    produced_by:= assert_single((select Store filter .name=\"\u9f8d\u9f13\u7058\")),\n    consumed_by:= lau,\n    `when`:= (insert FuzzyTime {fuzzy_hour:=15, fuzzy_minute:=15}), #\u4e09\u9ede\u4e09\n    where:= police_station,\n};\n</code></pre> <p>\u7b2c\u4e8c\u7a2e\u662f\u4fdd\u7279\u74f6\u88dd\u7da0\u8336\uff0c\u70ba\u5efa\u660e\u5728\u7ddd\u6bd2\u904e\u7a0b\u4e2d\u8acb\u570b\u5e73\u62ff\u7d66\u4ed6\u7684\u3002\u6211\u5011\u5047\u8a2d\u6b64\u6642\u70ba20:15\u3002</p> \u7da0\u8336 <p>\u7531\u65bc\u9019\u4f3c\u4e4e\u662f\u83ef\u4ed4\u4ee3\u8a00\u7684\u724c\u5b50\uff0c\u6240\u4ee5\u6211\u5011\u5c31\u4e0d\u7d66\u5b9a<code>produced_by</code>\uff0c\u4f86\u5e6b\u5fd9\u6253\u5ee3\u544a\u4e86\u3002\u6709\u8da3\u7684\u662f\uff0c\u5287\u4e2d\u9084\u6709\u4e00\u5e55\uff0c\u5efa\u660e\u6253\u96fb\u8a71\u8acb\u540c\u4e8b\u8ddf\u8e64\u9ec3sir\u6642\uff0c\u4ed6\u53c8\u559d\u4e86\u4e00\u6b21\u540c\u724c\u5b50\u7684\u7da0\u8336\u3002\u6b64\u5916\uff0c\u5728\u7121\u9593\u9053\u2162\u4e5f\u6703\u591a\u6b21\u770b\u5230\u9019\u500b\u724c\u5b50\uff0c\u50cf\u662f\u958b\u982d\u5efa\u660e\u8207\u570b\u5e73\u804a\u5929\u6642\uff0c\u6c38\u4ec1\u8207\u9ec3sir\u898b\u9762\u7684\u4fbf\u5229\u5546\u5e97\u80cc\u666f\u6216\u662f\u8b66\u5bdf\u5c40\u7684\u98f2\u6599\u8ca9\u8ce3\u6a5f\u7b49\u3002</p> scenes/scene07/query.edgeql<pre><code>insert Beverage {\n    name:= \"\u7da0\u8336\",\n    consumed_by:= lau,\n    `when`:= (insert FuzzyTime {fuzzy_hour:=20, fuzzy_minute:=15}),\n    where:= assert_single((select Location filter .name=\"\u5927\u5ec8\u4e09\u6a13\")),\n};\n</code></pre> <p>\u7b2c\u4e09\u7a2e\u662f\u97d3\u741b\u5728\u8b66\u5c40\u88ab\u62d8\u7559\u6642\u6240\u559d\u7684\u98f2\u6599\uff0c\u6211\u5011\u5047\u8a2d\u70ba\u9f8d\u9f13\u7058\u8336\u9910\u5ef3\u51fa\u54c1\u7684\u51cd\u6ab8\u8336\u4e26\u5047\u8a2d\u6b64\u6642\u70ba23:15\u3002 scenes/scene07/query.edgeql<pre><code>insert Beverage {\n    name:= \"\u51cd\u6ab8\u8336\",\n    produced_by:= assert_single((select Store filter .name=\"\u9f8d\u9f13\u7058\")),\n    consumed_by:= hon,\n    `when`:= (insert FuzzyTime {fuzzy_hour:=23, fuzzy_minute:=15}),\n    where:= police_station,\n};\n</code></pre></p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#backlinks","title":"\u518d\u6b21\u719f\u6089<code>backlinks</code>","text":"<p>\u5047\u5982\u6211\u5011\u60f3\u77e5\u9053\u5efa\u660e\u559d\u4e86\u54ea\u4e9b\u98f2\u6599\uff0c\u53ef\u4ee5\u9019\u9ebc\u505a\uff1a scenes/scene07/query.edgeql<pre><code>select Beverage {name} filter .consumed_by=lau;\n</code></pre> <pre><code>{default::Beverage {name: '\u71b1\u5976\u8336'}, default::Beverage {name: '\u7da0\u8336'}}\n</code></pre> \u4f46\u662f\u5982\u679c\u9664\u4e86\u6240\u559d\u7684\u98f2\u6599\uff0c\u60a8\u53c8\u540c\u6642\u60f3\u986f\u793a\u51fa\u5efa\u660e\u7684\u5176\u5b83\u8cc7\u8a0a\uff0c\u9019\u6642\u5019\u53ef\u4ee5\u4f7f\u7528<code>backlinks</code>\u4f86\u505a\uff1a scenes/scene07/query.edgeql<pre><code>select lau {name, nickname, beverages:= .&lt;consumed_by[is Beverage] {name}};\n</code></pre> <pre><code>{\n  default::GangsterSpy {\n    name: '\u5289\u5efa\u660e',\n    nickname: '\u5289\u4ed4',\n    beverages: {default::Beverage {name: '\u71b1\u5976\u8336'}, default::Beverage {name: '\u7da0\u8336'}},\n  },\n}\n</code></pre></p> Deep fetching for backlinks <p>\u5225\u5fd8\u4e86\u5728<code>backlinks</code>\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>shape</code>\uff0c\u50cf\u662f\u9019\u908a\u7684<code>{name}</code>\uff0c\u4f86\u9078\u53d6\u60f3\u8981\u7684<code>property</code>\u6216<code>link</code>\u3002</p> <p>\u4e5f\u5c31\u662f\u8aaa\u60a8\u53ef\u4ee5\u5beb\u51fa\u50cf\u662f\u4e0b\u9762\u9019\u6bb5\u6709\u8da3\u7684query\uff1a scenes/scene07/query.edgeql<pre><code>select lau {name, nickname, beverages:= .&lt;consumed_by[is Beverage] {name, where : {name}}};\n</code></pre> <pre><code>{\n  default::GangsterSpy {\n    name: '\u5289\u5efa\u660e',\n    nickname: '\u5289\u4ed4',\n    beverages: {\n      default::Beverage {name: '\u71b1\u5976\u8336', where: default::Landmark {name: '\u8b66\u5bdf\u5c40'}},\n      default::Beverage {name: '\u7da0\u8336', where: default::Location {name: '\u5927\u5ec8\u4e09\u6a13'}},\n    },\n  },\n}\n</code></pre> \u9019\u76f8\u7576\u65bc\u540c\u6642\u5217\u51fa\uff1a</p> <ul> <li>\u5efa\u660e\u7684<code>name</code> <code>property</code>\u3002</li> <li>\u5efa\u660e\u7684<code>nickname</code> <code>property</code>\u3002</li> <li>\u5efa\u660e\u6240\u559d\u7684\u98f2\u6599\u53ca\u559d\u98f2\u6599\u7684\u5730\u9ede\u3002</li> </ul> \u4f55\u6642\u4f7f\u7528<code>backlinks</code>\uff1f <p>\u7576\u60a8\u60f3\u53d6\u5f97\u88ab<code>aaa</code>\u6240<code>bbb</code>\u7684<code>ccc</code>\u6642\uff0c\u4f8b\u5982\u88ab\u5efa\u660e\uff08<code>aaa</code>\uff09\u6240\u559d\u6389\uff08<code>bbb</code>\uff09\u7684\u98f2\u6599\uff08<code>ccc</code>\uff09\u6642\u3002\u6b64\u6642\u5c0d<code>aaa</code>\u4f7f\u7528<code>select</code>\uff0c<code>ccc</code>\u901a\u5e38\u53ef\u4ee5\u4ee5<code>backlinks</code>\u7684\u8a9e\u6cd5\u4e00\u8d77\u51fa\u73fe\u5728<code>select</code>\u7684<code>{}</code>\u5167\u3002</p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#teamtreatnumbercibteamtreat","title":"\u5efa\u7acb<code>TeamTreatNumber</code>\u53ca<code>CIBTeamTreat</code>","text":"<p>\u5047\u5982CIB\u90e8\u9580\u6709\u4e00\u500b\u50b3\u7d71\uff0c\u7576\u5168\u7d44\u4eba\u9700\u8981\u4e00\u8d77\u7559\u4e0b\u52a0\u73ed\u8655\u7406\u7279\u6b8a\u6848\u4ef6\u6642\uff0c\u90e8\u9580\u5167\u9664\u9577\u5b98\u5916\u7684\u6bcf\u4e00\u500b\u540c\u4e8b\u90fd\u53ef\u4ee5\u5728\u62bd\u734e\u7bb1\u88e1\u62bd\u51fa\u4e00\u9846\u7403\uff08\u62bd\u5b8c\u5f8c\u7403\u6703\u653e\u56de\u7bb1\u5167\uff09\u3002\u7bb1\u5167\u7e3d\u5171\u67091~10\u5341\u9846\u7403\uff0c\u4e0a\u9762\u8cbc\u6709\u865f\u78bc\uff0c\u53ea\u8981\u6709\u4eba\u62bd\u5230\u7684\u865f\u78bc\u662f9\u621610\u7684\u8a71\uff0c\u5c31\u6703\u7531\u90e8\u9580\u9577\u5b98\u8cb7\u55ae\u8acb\u5403\u4e00\u9813\u4e0b\u5348\u8336\u3002\u7531\u65bc\u6bcf\u6b21\u64cd\u4f5c\u9019\u500b\u6d3b\u52d5\u90fd\u9700\u8981\u82b1\u8cbb\u4e0d\u5c11\u6642\u9593\uff0c\u6240\u4ee5\u6709\u7d44\u54e1\u63d0\u8b70\u8acb\u6211\u5011\u4f7f\u7528EdgeDB\u4f86\u7c21\u5316\u6d41\u7a0b\u3002\u8eab\u70ba\u7121\u9593\u9053\u548cEdgeDB\u7684\u96d9\u91cd\u611b\u597d\u8005\uff0c\u6211\u5011\u7576\u7136\u662f\u7fa9\u4e0d\u5bb9\u8fad\u5566!</p> <p>\u9996\u5148\u5efa\u7acb<code>TeamTreatNumber</code>\uff0c\u5176\u662f\u7531<code>extending</code> <code>sequence</code>\u800c\u4f86\uff0c\u4f5c\u70ba\u6bcf\u6b21\u6d3b\u52d5\u7684\u8a08\u6578\u5668\u3002 scenes/scene07/schema.esdl<pre><code>scalar type TeamTreatNumber extending sequence;\n</code></pre></p> <p>\u63a5\u8457\u5efa\u7acb<code>CIBTeamTreat</code>\u5982\u4e0b\uff1a scenes/scene07/schema.esdl<pre><code>type CIBTeamTreat {\n    required team_treat_number: TeamTreatNumber {\n        constraint exclusive;\n        default := sequence_next(introspect TeamTreatNumber);\n    }\n    multi colleagues: Police {\n        default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n        readonly := true;\n        point: int64 {\n            default:= &lt;int64&gt;math::ceil(random()*10)\n        }\n    };\n    team_treat:= max(.colleagues@point) &gt;= 9\n}\n</code></pre> <code>CIBTeamTreat</code>\u6709\u5169\u500b<code>property</code>\u548c\u4e00\u500b<code>link</code>\uff0c\u6211\u5011\u9010\u500b\u4f86\u770b\u3002</p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#team_treat_number","title":"<code>team_treat_number</code>","text":"<p><code>team_treat_number</code>\u70ba\u4e00<code>property</code>\uff0c\u5176\u4f7f\u7528<code>TeamTreatNumber</code>\u70ba\u8a18\u6578\u5668\uff0c\u548c<code>Scene</code>\u7684<code>scene_number</code>\u4e00\u6a23\u90fd\u662f\u81ea\u52d5\u7522\u751f\u4e0d\u91cd\u8986\u7684\u7de8\u865f\u3002</p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#colleagues","title":"<code>colleagues</code>","text":"<p><code>colleagues</code>\u662f\u4e00\u500b<code>Police</code>\u7684<code>multi link</code>\uff0c\u5176\u9810\u8a2d\u9078\u64c7CIB\u90e8\u9580\u7684\u6240\u6709\u8b66\u5bdf\uff0c\u9019\u7b26\u5408\u6211\u5011\u7684\u9700\u6c42\uff0c\u56e0\u70ba\u9577\u5b98\u4e0d\u9808\u53c3\u52a0\u62bd\u734e\uff08\u8a18\u5f97\u5efa\u660e\u662f<code>PoliceSpy</code>\u55ce\uff1f\uff09\u3002\u63a5\u8457\u6211\u5011\u52a0\u4e0a<code>readonly</code>\u70ba<code>true</code>\u7684\u9650\u5236\uff0c\u9632\u6b62\u5927\u5bb6\u62bd\u5b8c\u734e\u4e4b\u5f8c\u800d\u8cf4\u5077\u6539\u3002</p> <p>\u6700\u5f8c\u6211\u5011\u65b0\u589e\u4e00\u500b<code>int64</code>\u7684<code>point</code>\uff0c\u9019\u662f\u4e00\u500b<code>link property</code>\uff0c\u9867\u540d\u601d\u7fa9\u5176\u70ba\u4e00\u500b<code>colleagues</code> <code>link</code>\u7684<code>property</code>\u3002\u9019\u500b<code>link property</code>\u4e26\u4e0d\u80fd\u7531<code>Police</code>\u4f86\u5b58\u53d6\uff08\u96d6\u7136\u5b83\u73fe\u5728\u6b63\u5728<code>Police</code>\u7684<code>{}</code>\u4e2d\uff09\uff0c\u5b83\u53ea\u80fd\u5920\u5728\u6211\u5011\u91dd\u5c0d<code>CIBTeamTreat</code>query\u6642\u5b58\u53d6\u3002\u6211\u5011\u4f7f\u7528\u5167\u5efa\u7684<code>math::ceil()</code>\u53ca<code>random()</code>\u4f86\u7d66\u4e88CIB\u90e8\u9580\u6240\u6709\u8b66\u5bdf\u4e00\u500b1~10\u7684\u9810\u8a2d\u503c\uff0c\u6a21\u64ec\u62bd\u734e\u904e\u7a0b\uff08\u6bcf\u500b\u8b66\u5bdf\u90fd\u6703\u62bd\u4e00\u6b21\uff0c\u4e14\u4e0d\u6703\u5168\u90e8\u90fd\u662f\u540c\u4e00\u500b\u6578\u5b57\uff09\u3002</p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#team_treat","title":"<code>team_treat</code>","text":"<p><code>team_treat</code>\u70ba\u4e00<code>computed property</code>\uff08\u7559\u610f\u9019\u908a\u4f7f\u7528\u7684\u662f<code>:=</code>\uff09\uff0c\u5176\u6703\u8fd4\u56de\u4e00\u500b<code>bool</code>\u503c\u3002\u5b58\u53d6<code>link property</code>\u9700\u8981\u4f7f\u7528\u7279\u6b8a\u7684<code>@</code>\u7b26\u865f\uff0c\u6240\u4ee5<code>.colleagues@point</code>\u76f8\u7576\u65bc\u52d5\u614b\u53d6\u5f97\u8a72<code>CIBTeamTreat</code>\u5167<code>colleagues</code> <code>multi link</code>\u5167\u7684\u6240\u6709<code>point</code>\u3002\u6211\u5011\u4f7f\u7528\u5167\u5efa\u7684<code>max()</code>\u4f86\u770b\u770b\u9019\u4e9b<code>point</code>\u5167\u7684\u6700\u5927\u503c\u662f\u5426\u6703\u5927\u65bc\u6216\u7b49\u65bc9\u3002</p> make end migration here\uff08<code>scenes/scene07/schema.esdl</code>\uff09 <pre><code>did you create scalar type 'default::TeamTreatNumber'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create object type 'default::CIBTeamTreat'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#insert-cibteamtreat","title":"<code>insert</code> <code>CIBTeamTreat</code>","text":"<p>\u8b93\u6211\u5011\u4f86\u8a66\u8a66\u9019\u500b\u62bd\u734e\u7cfb\u7d71\u5427\u3002\u4e0b\u9762\u7684query\u6bcf\u6b21\u90fd\u6703<code>insert</code>\u4e00\u500b<code>CIBTeamTreat</code>\uff0c\u4e26\u8fd4\u56de\u5176<code>team_treat</code>\u4e4b\u503c\u3002\u5982\u679c\u662f<code>true</code>\u7684\u8a71\uff0c\u4ee3\u8868\u5efa\u660e\u9700\u8981\u8acb\u5ba2\u3002 scenes/scene07/query.edgeql<pre><code>select(insert CIBTeamTreat).team_treat;\n</code></pre></p> \u70ba\u4ec0\u9ebc\u4e0d\u5beb\u6210function\u5462\uff1f <p>\u60a8\u53ef\u80fd\u6703\u60f3\u5c07\u62bd\u734e\u7cfb\u7d71\u5beb\u70ba<code>function</code>\uff0c\u50cf\u662f\uff1a <pre><code># \u274c\nfunction draw() -&gt; CIBTeamTreat\nusing (select(insert CIBTeamTreat));\n</code></pre> \u4f46\u662f\u5982\u679c\u57f7\u884c<code>edgedb migration create</code>\u6703\u5831\u932f\u5982\u4e0b\uff1a <pre><code>error: data-modifying statements are not allowed in function bodies\n</code></pre> \u539f\u4f86<code>function</code>\u5167\u662f\u4e0d\u80fd\u5c0d\u8cc7\u6599\u5eab\u9032\u884c\u8b8a\u52d5\u7684\uff0c\u5305\u62ec<code>insert</code>\u3001<code>update</code>\u53ca<code>delete</code>\u3002</p> <p>\u7576\u7136\uff0c\u6709\u6642\u5019\u56e0\u70ba\u592a\u4e45\u6c92\u9577\u5b98\u8acb\u5ba2\uff0c\u5927\u5bb6\u6703\u61f7\u7591\u7cfb\u7d71\u662f\u4e0d\u662f\u51fa\u932f\u4e86\uff0c\u90a3\u9ebc\u53ef\u4ee5\u7531\u4e0b\u9762\u9019\u500bquery\u4f86\u5217\u51fa\u6240\u6709\u4eba\u62bd\u5230\u7684\u6578\u5b57\u3002 scenes/scene07/query.edgeql<pre><code>select(insert CIBTeamTreat) {team_treat_number, team_treat, points:= .colleagues@point};\n</code></pre> <pre><code>{default::CIBTeamTreat {team_treat_number: 2, team_treat: false, points: {8, 1, 1, 4, 6, 2}}}\n</code></pre> \u6700\u5f8c\uff0c\u540c\u4e8b\u5011\u9593\u53ef\u80fd\u4e92\u76f8\u8abf\u4f83\u8ab0\u6700\u5e36\u8cfd\uff0c\u6b64\u6642\u53ef\u4ee5\u7528\u4e0b\u9762\u7684query\u5217\u51fa\u6bcf\u500b\u4eba\u7684\u540d\u5b57\u53ca\u5176\u62bd\u5230\u7684\u6578\u5b57\u3002 scenes/scene07/query.edgeql<pre><code>select(insert CIBTeamTreat) {team_treat_number, team_treat, colleagues: {name, @point}};\n</code></pre> <pre><code>{\n  default::CIBTeamTreat {\n    team_treat_number: 3,\n    team_treat: true,\n    colleagues: {\n      default::Police {name: '\u6797\u570b\u5e73', @point: 1},\n      default::Police {name: '\u5927\u8c61', @point: 10},\n      default::Police {name: '\u5b56\u516b', @point: 2},\n      default::Police {name: 'police_11', @point: 7},\n      default::Police {name: 'police_12', @point: 1},\n      default::Police {name: 'police_13', @point: 7},\n    },\n  },\n}\n</code></pre> \u4f8b\u5982\u50cf\u7b2c\u4e09\u6b21\u62bd\u734e\uff0c\u570b\u5e73\u548c\u540d\u70ba<code>police_12</code>\u7684\u540c\u4e8b\u90fd\u53ea\u62bd\u52301\uff0c\u4e0d\u904e\u9084\u597d\u5927\u8c61\u62bd\u523010\uff0c\u6700\u5f8c\u5927\u5bb6\u9084\u662f\u6709\u514d\u8cbb\u4e0b\u5348\u8336\u5403\u3002</p> <p>\u73fe\u5728\u958b\u59cb\uff0c\u6bcf\u6b21\u7684\u62bd\u734e\u8a18\u9304\u90fd\u6703\u662f\u4e00\u500b<code>CIBTeamTreat object</code>\u3002\u9019\u4e9b\u8a18\u9304\u7d2f\u7a4d\u8d77\u4f86\u53ef\u4ee5\u6709\u8a31\u591a\u61c9\u7528\uff0c\u4f8b\u5982\u6bcf\u5e74\u5e74\u672b\uff0c\u5927\u5bb6\u53ef\u4ee5\u627e\u51fa\u8ab0\u662f\u6700\u5e38\u5e6b\u5927\u5bb6\u8d0f\u5f97\u4e0b\u5348\u8336\u7684\u4eba\uff08\u6700\u5e38\u62ff9\u621610\u5206\uff09\uff0c\u4e00\u8d77\u8acb\u4ed6\u5403\u9813\u98ef\u3002<code>link property</code>\u662f\u4e0d\u662f\u4e00\u500b\u5f88\u9177\u7684\u529f\u80fd\u5440!</p> <p><code>link property</code>\u6709\u4e00\u4e9b\u8a9e\u6cd5\u5982\u679c\u4e0d\u5e38\u4f7f\u7528\uff0c\u7684\u78ba\u5bb9\u6613\u5fd8\u8a18\u3002\u70ba\u6b64EdgeDB\u8cbc\u5fc3\u6e96\u5099\u4e86cheatsheet\u4f9b\u5927\u5bb6\u53c3\u8003\u3002</p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#update-hon","title":"<code>update</code> <code>hon</code>","text":"<p>\u8a71\u8aaa\u9019\u500b\u5834\u666f\u597d\u50cf\u5145\u6eff\u8457\u98f2\u6599\uff0c\u8b93\u6211\u5011\u56de\u4f86\u7e7c\u7e8c\u95dc\u5fc3\u741b\u54e5\uff0c<code>update</code>\u4ed6\u96e2\u958b\u8b66\u5bdf\u5c40\u524d\u5c0d\u9ec3sir\u8aaa\u7684\u7d93\u5178\u53f0\u8a5e\u5230<code>classic_lines</code>\u3002 scenes/scene07/query.edgeql<pre><code>update hon \nset {\n    classic_lines := .classic_lines ++  [\"\u4f60\u898b\u904e\u6709\u4eba\u53bb\u6baf\u5100\u9928\u548c\u5c4d\u9ad4\u63e1\u624b\u55ce?\"],\n};\n</code></pre></p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#insert-chenlaucontact","title":"<code>insert</code> <code>ChenLauContact</code>","text":"scenes/scene07/query.edgeql<pre><code>insert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u6bd2\u54c1\u88ab\u97d3\u741b\u624b\u4e0b\u8fea\u8def\u8207\u50bb\u5f37\u92b7\u6bc0\uff0c\u6c38\u4ec1\u96a8\u97d3\u741b\u4e00\u8d77\u88ab\u5e36\u56de\u8b66\u5bdf\u5c40\",\n    `when`:= year_2002,\n    where:= police_station,\n};\n</code></pre>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene07/query.edgeql<pre><code>insert Scene {\n      title:= \"\u4e92\u731c\u5e95\u724c\",\n      detail:= \"\u97d3\u741b\u5343\u921e\u4e00\u9aee\u4e4b\u969b\u6536\u5230\u5efa\u660e\u7c21\u8a0a\uff0c\u7dca\u6025\u6253\u7d66\u8fea\u8def\u8207\u50bb\u5f37\uff0c\u5c07\u8207\" ++\n               \"\u6cf0\u570b\u4f6c\u4ea4\u6613\u7684\u53ef\u5361\u56e0\u4e1f\u9032\u6d77\u88e1\u3002\u9ec3sir\u898b\u884c\u52d5\u5931\u6557\uff0c\u53ea\u5f97\u66ab\u6642\" ++\n               \"\u5c07\u97d3\u741b\u53ca\u5176\u624b\u4e0b\u5e36\u56de\u8b66\u5bdf\u5c40\u3002\u56de\u8b66\u5bdf\u5c40\u5f8c\uff0c\u9ec3sir\u78ba\u8a8d\u8b49\u64da\u4e0d\" ++\n               \"\u8db3\u4ee5\u8d77\u8a34\u97d3\u741b\u5f8c\uff0c\u5e36\u968a\u4f86\u5230\u97d3\u741b\u7528\u9910\u7684\u623f\u9593\u3002\u9ec3sir\u85c9\u6a5f\u5632\u8af7\" ++\n               \"\u97d3\u741b\uff0c\u96d6\u7136\u9019\u6b21\u7121\u6cd5\u902e\u6355\u4ed6\uff0c\u4f46\u4ee5\u4ee4\u4ed6\u640d\u53d7\u5e7e\u5343\u842c\u3002\u97d3\u741b\u807d\" ++\n               \"\u5f8c\uff0c\u77ac\u9593\u7ffb\u81c9\u5c07\u684c\u4e0a\u98df\u7269\u5f80\u9ec3sir\u5ea7\u4f4d\u6383\u53bb\u3002\u5169\u4eba\u8a00\u8ac7\u9593\u91dd\u92d2\" ++\n               \"\u76f8\u5c0d\uff0c\u4e92\u76f8\u731c\u6e2c\u8457\u5c0d\u65b9\u5b89\u6392\u5728\u5df1\u65b9\u7684\u81e5\u5e95\u662f\u8ab0\u3002\u6700\u5f8c\uff0c\u97d3\u741b\u56c2\" ++\n               \"\u5f35\u5730\u5e36\u8457\u624b\u4e0b\u5011\u5927\u6b65\u96e2\u53bb\u3002\",\n      who:= (select Gangster filter .nickname in {\"\u8fea\u8def\", \"\u50bb\u5f37\"}) union {wong, chen, hon, lau},\n      `when`:= year_2002,\n      where:= police_station,\n      remarks:= \"1.\u5047\u8a2d\u5efa\u660e\u559d\u7da0\u8336\u6642\u9593\u70ba20:15\u3002\\n2.\u5047\u8a2d\u97d3\u741b\u65bc23:15\u559d\u51cd\u6ab8\u8336\u3002\"         \n};\n</code></pre>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#query-review","title":"Query review","text":"Query review scenes/scene07/query.edgeql<pre><code>insert Store {name:=\"\u9f8d\u9f13\u7058\"};\n\ninsert Beverage {\n    name:= \"\u71b1\u5976\u8336\",\n    produced_by:= assert_single((select Store filter .name=\"\u9f8d\u9f13\u7058\")),\n    consumed_by:= lau,\n    `when`:= (insert FuzzyTime {fuzzy_hour:=15, fuzzy_minute:=15}), #\u4e09\u9ede\u4e09\n    where:= police_station,\n};\n\ninsert Beverage {\n    name:= \"\u7da0\u8336\",\n    consumed_by:= lau,\n    `when`:= (insert FuzzyTime {fuzzy_hour:=20, fuzzy_minute:=15}),\n    where:= assert_single((select Location filter .name=\"\u5927\u5ec8\u4e09\u6a13\")),\n};\n\ninsert Beverage {\n    name:= \"\u51cd\u6ab8\u8336\",\n    produced_by:= assert_single((select Store filter .name=\"\u9f8d\u9f13\u7058\")),\n    consumed_by:= hon,\n    `when`:= (insert FuzzyTime {fuzzy_hour:=23, fuzzy_minute:=15}),\n    where:= police_station,\n};\n\nselect Beverage {name} filter .consumed_by=lau;\n\nselect lau {name, nickname, beverages:= .&lt;consumed_by[is Beverage] {name}};\n\nselect lau {name, nickname, beverages:= .&lt;consumed_by[is Beverage] {name, where : {name}}};\n\nselect(insert CIBTeamTreat).team_treat;\n\nselect(insert CIBTeamTreat) {team_treat_number, team_treat, points:= .colleagues@point};\n\nselect(insert CIBTeamTreat) {team_treat_number, team_treat, colleagues: {name, @point}};\n\nupdate hon \nset {\n    classic_lines := .classic_lines ++  [\"\u4f60\u898b\u904e\u6709\u4eba\u53bb\u6baf\u5100\u9928\u548c\u5c4d\u9ad4\u63e1\u624b\u55ce?\"],\n};\n\ninsert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u6bd2\u54c1\u88ab\u97d3\u741b\u624b\u4e0b\u8fea\u8def\u8207\u50bb\u5f37\u92b7\u6bc0\uff0c\u6c38\u4ec1\u96a8\u97d3\u741b\u4e00\u8d77\u88ab\u5e36\u56de\u8b66\u5bdf\u5c40\",\n    `when`:= year_2002,\n    where:= police_station,\n};\n\ninsert Scene {\n      title:= \"\u4e92\u731c\u5e95\u724c\",\n      detail:= \"\u97d3\u741b\u5343\u921e\u4e00\u9aee\u4e4b\u969b\u6536\u5230\u5efa\u660e\u7c21\u8a0a\uff0c\u7dca\u6025\u6253\u7d66\u8fea\u8def\u8207\u50bb\u5f37\uff0c\u5c07\u8207\" ++\n               \"\u6cf0\u570b\u4f6c\u4ea4\u6613\u7684\u53ef\u5361\u56e0\u4e1f\u9032\u6d77\u88e1\u3002\u9ec3sir\u898b\u884c\u52d5\u5931\u6557\uff0c\u53ea\u5f97\u66ab\u6642\" ++\n               \"\u5c07\u97d3\u741b\u53ca\u5176\u624b\u4e0b\u5e36\u56de\u8b66\u5bdf\u5c40\u3002\u56de\u8b66\u5bdf\u5c40\u5f8c\uff0c\u9ec3sir\u78ba\u8a8d\u8b49\u64da\u4e0d\" ++\n               \"\u8db3\u4ee5\u8d77\u8a34\u97d3\u741b\u5f8c\uff0c\u5e36\u968a\u4f86\u5230\u97d3\u741b\u7528\u9910\u7684\u623f\u9593\u3002\u9ec3sir\u85c9\u6a5f\u5632\u8af7\" ++\n               \"\u97d3\u741b\uff0c\u96d6\u7136\u9019\u6b21\u7121\u6cd5\u902e\u6355\u4ed6\uff0c\u4f46\u4ee5\u4ee4\u4ed6\u640d\u53d7\u5e7e\u5343\u842c\u3002\u97d3\u741b\u807d\" ++\n               \"\u5f8c\uff0c\u77ac\u9593\u7ffb\u81c9\u5c07\u684c\u4e0a\u98df\u7269\u5f80\u9ec3sir\u5ea7\u4f4d\u6383\u53bb\u3002\u5169\u4eba\u8a00\u8ac7\u9593\u91dd\u92d2\" ++\n               \"\u76f8\u5c0d\uff0c\u4e92\u76f8\u731c\u6e2c\u8457\u5c0d\u65b9\u5b89\u6392\u5728\u5df1\u65b9\u7684\u81e5\u5e95\u662f\u8ab0\u3002\u6700\u5f8c\uff0c\u97d3\u741b\u56c2\" ++\n               \"\u5f35\u5730\u5e36\u8457\u624b\u4e0b\u5011\u5927\u6b65\u96e2\u53bb\u3002\",\n      who:= (select Gangster filter .nickname in {\"\u8fea\u8def\", \"\u50bb\u5f37\"}) union {wong, chen, hon, lau},\n      `when`:= year_2002,\n      where:= police_station,\n      remarks:= \"1.\u5047\u8a2d\u5efa\u660e\u559d\u7da0\u8336\u6642\u9593\u70ba20:15\u3002\\n2.\u5047\u8a2d\u97d3\u741b\u65bc23:15\u559d\u51cd\u6ab8\u8336\u3002\"         \n};\n</code></pre>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene07/scene07/#_2","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u6839\u64da\u8a2a\u8ac7\uff0c\u66fe\u5fd7\u5049\u6a6b\u6383\u684c\u4e0a\u98ef\u83dc\u7684\u7d93\u5178\u6232\u78bc\uff0c\u9ec3\u79cb\u751f\u4e8b\u5148\u4e26\u4e0d\u77e5\u60c5\u3002\u4f46\u4ed6\u6839\u64da\u81ea\u5df1\u7684\u7d93\u9a57\u5224\u65b7\uff0c\u66fe\u5fd7\u5049\u5fc5\u5b9a\u6703\u9019\u6a23\u505a\uff0c\u76ee\u7684\u662f\u4f7f\u81ea\u5df1\u5927\u5403\u4e00\u9a5a\u3002\u65bc\u662f\u4ed6\u5728\u6f14\u6232\u6642\uff0c\u5df2\u7d93\u505a\u597d\u5f80\u5f8c\u9000\u7684\u6e96\u5099\uff0c\u56e0\u70ba\u4e0d\u60f3\u7a7f\u8457\u6e6f\u6e6f\u6c34\u6c34\u7684\u8863\u670d\u7e7c\u7e8c\u6f14\u6232\u3002</p>","tags":["delegated","backlinks","link properties"]},{"location":"scenes/scene08/scene08/","title":"08 - \u8ab0\u662f\u5167\u9b3c","text":"","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#full-schema-preview","title":"Full schema preview","text":"Full schema preview start1st migrationend migration scenes/scene07/schema.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene08/schema_1st_migration.esdl<pre><code>module default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Envelope {\n        name: str {\n            default:= \"\u6a19\";\n            readonly:= true\n        };\n        access policy allow_select_insert_delete\n            allow select, insert, delete;\n\n        access policy only_one_envelope_exists\n            deny insert\n            using (exists Envelope)\n            {\n                errmessage := 'Only one Envelope can be existed.'\n            };\n    }\n\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene08/schema.esdl<pre><code>using extension pg_trgm;\n\nmodule default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Envelope {\n        name: str {\n            default:= \"\u6a19\";\n            readonly:= true\n        };\n        access policy allow_select_insert_delete\n            allow select, insert, delete;\n\n        access policy only_one_envelope_exists\n            deny insert\n            using (exists Envelope)\n            {\n                errmessage := 'Only one Envelope can be existed.'\n            };\n    }\n\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u6bd2\u54c1\u4ea4\u6613\u5931\u6557\u5f8c\uff0c\u97d3\u741b\u78ba\u4fe1\u8eab\u908a\u6709\u8b66\u5bdf\u81e5\u5e95\u3002\u4f9d\u7167\u5efa\u660e\u8981\u6c42\uff0c\u5c07\u6240\u6709\u624b\u4e0b\u7684\u500b\u4eba\u8cc7\u6599\u88dd\u5728\u4fe1\u5c01\u4e2d\uff0c\u65bc\u96fb\u5f71\u9662L13\u4f4d\u7f6e\u4ea4\u7d66\u5efa\u660e\u3002\u6c38\u4ec1\u5077\u5077\u5728\u5f8c\u89c0\u5bdf\u4e26\u5c3e\u96a8\u5efa\u660e\u96e2\u958b\uff0c\u6b32\u770b\u6e05\u5176\u6a21\u6a23\uff0c\u4e0d\u6599\u624b\u6a5f\u7a81\u7136\u97ff\u8d77\uff0c\u56e0\u800c\u932f\u5931\u826f\u6a5f\u3002\u800c\u5efa\u660e\u4e5f\u96b1\u7d04\u611f\u89ba\u5230\u6709\u4eba\u8ddf\u8e64\uff0c\u96b1\u65bc\u7246\u5f8c\u67e5\u770b\u4f46\u672a\u767c\u73fe\u4eba\u8de1\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8b66\u968a\u9ad8\u5c64\u4e5f\u61f7\u7591\u97d3\u741b\u5b89\u63d2\u4e86\u81e5\u5e95\uff0c\u65bc\u662f\u5c07\u5efa\u660e\u8abf\u81f3\u5167\u52d9\u90e8\u4e26\u5728O\u8a18\u8fa6\u516c\uff0c\u5c08\u9580\u8abf\u67e5\u6b64\u4e8b\u3002\u5efa\u660e\u4f9d\u7167\u97d3\u741b\u6240\u7d66\u8cc7\u6599\u65bc\u8b66\u968a\u8cc7\u6599\u5eab\u4e2d\u9032\u884c\u641c\u5c0b\uff0c\u537b\u7121\u767c\u73fe\u3002\u65bc\u6b64\u540c\u6642\uff0c\u97d3\u741b\u8a66\u63a2\u4e86\u8eab\u908a\u5e7e\u500b\u89aa\u8fd1\u624b\u4e0b\uff0c\u5305\u62ec\u6c38\u4ec1\u8207\u50bb\u5f37\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#edgeql-query","title":"EdgeQL query","text":"","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#envelope","title":"\u5efa\u7acb<code>Envelope</code>","text":"<p>\u7531\u65bc\u4fe1\u5c01\u5728\u672c\u5287\u5f8c\u534a\u6bb5\u662f\u4e00\u500b\u91cd\u8981\u7684\u7269\u4ef6\uff0c\u9664\u4e86\u88e1\u9762\u6709\u53c3\u8207\u97d3\u741b\u6bd2\u54c1\u4ea4\u6613\u624b\u4e0b\u7684\u8cc7\u6599\u5916\uff0c\u66f4\u7279\u5225\u7684\u662f\u4fe1\u5c01\u4e0a\u6709\u4e00\u500b\u6c38\u4ec1\u89aa\u624b\u5beb\u7684\u300c\u6a19\u300d\u5b57\u3002\u65bc\u662f\u6211\u5011\u60f3\u70ba\u4fe1\u5c01\u5efa\u7acb\u4e00\u500b<code>object type</code>\uff0c\u4f46\u540c\u6642\u5e0c\u671b\u9019\u9ebc\u7279\u5225\u7684\u4fe1\u5c01\u53ea\u80fd\u88ab\u751f\u6210\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u53ea\u80fd<code>insert</code>\u4e00\u500b<code>Envelope object</code>\u3002</p> <p>\u6211\u5011\u6e96\u5099\u501f\u52a9EdgeDB\u7684<code>access policy</code>\u4f86\u5b8c\u6210\u9019\u500b\u9700\u6c42\uff0c\u5176\u6709\u7279\u6b8a\u7684<code>resolution order</code>\uff1a</p> <ul> <li>\u7576<code>object type</code>\u4e0a\u6c92\u6709\u65bd\u52a0\u4efb\u4f55<code>access policy</code>\u6642\uff0c\u9019\u500b<code>object type</code>\u53ef\u4ee5\u88ab\u8b80\u53d6\u53ca\u8b8a\u52d5\u3002</li> <li> <p>\u7576<code>object type</code>\u4e0a\u6709\u65bd\u52a0\u4efb\u4f55<code>access policy</code>\u6642\uff0c\u6703\u62c6\u6210\u4e09\u500b\u6b65\u9a5f\u4f86\u6c7a\u5b9a\u5141\u8a31\u64cd\u4f5c\u7684\u7bc4\u570d\uff1a</p> <ul> <li>\u9996\u5148\uff0c\u6240\u6709\u64cd\u4f5c\u5148\u8b8a\u70ba<code>deny</code>\u3002</li> <li>\u63a5\u8457\uff0c\u5141\u8a31\u6a19\u793a\u6709<code>allow</code>\u7684\u64cd\u4f5c\u3002</li> <li>\u6700\u5f8c\uff0c\u6392\u9664\u6a19\u793a\u6709<code>deny</code>\u7684\u64cd\u4f5c\u3002</li> </ul> </li> </ul> <p>\u4f9d\u7167\u4e0a\u8ff0\u539f\u7406\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb<code>Envelope</code>\u7684schema\uff0c\u5176\u6709\u4e00\u500b<code>property</code>\u53ca\u5169\u500b<code>access policy</code>\uff1a</p> <ul> <li><code>name</code> <code>property</code>\u70ba\u6c38\u4ec1\u6240\u5beb\u7684\u932f\u5225\u5b57\u300c\u6a19\u300d\uff0c\u4e26\u8a2d\u5b9a<code>readonly</code>\u70ba<code>true</code>\u3002\u4ee3\u8868\u7576\u7d66\u4e88\u9810\u8a2d\u503c\u5f8c\uff0c\u7121\u6cd5\u8b8a\u66f4\u6b64<code>property</code>\u3002</li> <li>\u7b2c\u4e00\u500b<code>policy</code>\u547d\u540d\u70ba<code>allow_select_insert_delete</code>\uff0c\u5141\u8a31\u9032\u884c<code>select</code>\u3001 <code>insert</code>\u53ca<code>delete</code>\u3002</li> <li>\u7b2c\u4e8c\u500b<code>policy</code>\u547d\u540d\u70ba<code>only_one_envelope_exists</code>\uff0c\u4f7f\u7528<code>using (exists Envelope)</code>\u4f5c\u70ba\u5224\u65b7\u689d\u4ef6\uff0c\u7576\u8cc7\u6599\u5eab\u4e2d\u5df2\u7d93\u6709\u5b58\u5728<code>Envelope object</code>\u6642\uff0c\u62d2\u7d55<code>insert</code>\uff0c\u4e26\u7d66\u5b9a\u5ba2\u88fd\u5316\u7684\u5831\u932f\u8a0a\u606f<code>Only one Envelope can be existed.</code>\u3002</li> </ul> scenes/scene08/schema_1st_migration.esdl<pre><code>type Envelope {\n    name: str {\n        default:= \"\u6a19\";\n        readonly:= true\n    };\n    access policy allow_select_insert_delete\n        allow select, insert, delete;\n\n    access policy only_one_envelope_exists\n        deny insert\n        using (exists Envelope)\n        {\n            errmessage := 'Only one Envelope can be existed.'\n        };\n}\n</code></pre> <code>readonly</code> vs <code>access policy</code> <p><code>readonly</code>\u662f\u7528\u5728<code>property</code>\u4e0a\u7684<code>constraint</code>\uff0c<code>access policy</code>\u662f\u9069\u7528\u5728\u6574\u500b<code>object type</code>\u4e0a\u3002\u4e0d\u904e\u5728\u6211\u5011\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u56e0\u70ba\u6c92\u6709<code>allow</code> <code>update</code>\uff0c\u6240\u4ee5<code>Envelope</code>\u662f\u4e0d\u80fd<code>update</code>\u7684\uff0c\u56e0\u6b64\u5982\u679c\u5c07<code>readonly</code>\u522a\u9664\u4e5f\u53ef\u4ee5\u3002\u6b64\u5916\uff0c\u5982\u679c\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\u57f7\u884c<code>update</code>query\u7684\u8a71\uff0cEdgeDB\u4e26\u4e0d\u6703\u5831\u932f\uff0c\u53ea\u6703\u8fd4\u56de\u4e00\u500b\u7a7a<code>set</code>\u3002</p> <code>access policy</code>\u7684\u5ef6\u4f38\u61c9\u7528 <p>\u65e2\u7136<code>access policy</code>\u53ef\u4ee5\u8b93\u6211\u5011\u9650\u5236<code>insert</code>\u7684\u6b21\u6578\uff0c\u9019\u9ebc\u4e00\u4f86\u6211\u5011\u4e5f\u53ef\u4ee5\u5ef6\u4f38\u61c9\u7528\u5230\u5c0d\u7167\u8b66\u5bdf\u8077\u7d1a\u8868\uff0c\u4f86\u9650\u5236\u5404\u8077\u7d1a\u7684\u4eba\u6578\uff0c\u4f8b\u5982\u53ea\u80fd<code>insert</code>\u4e00\u540d\u8655\u9577\uff08<code>CP</code>\uff09\u7d1a\u9577\u5b98\u3002</p> make 1st migration here\uff08<code>scenes/scene08/schema_1st_migration.esdl</code>\uff09 <pre><code>did you create object type 'default::Envelope'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#insert-envelope","title":"<code>insert</code> <code>Envelope</code>","text":"<p>\u57f7\u884c\u4e0b\u9762query\u53ef\u4ee5\u6210\u529f<code>insert</code>\u4e00\u500b<code>Envelope object</code>\u3002 scenes/scene08/query.edgeql<pre><code>insert Envelope;\n</code></pre> \u4f46\u662f\u5982\u679c\u60f3\u518d<code>insert</code>\u4e00\u500b<code>Envelope object</code>\u7684\u8a71\uff0c\u5247\u6703\u5831\u932f\u5982\u4e0b\uff1a</p> <p>\u5831\u932f\u8a0a\u606f</p> <pre><code>edgedb error: AccessPolicyError: access policy violation on insert of default::Envelope (Only one Envelope can be existed.)\n</code></pre> <p>\u6211\u5011\u7684\u5ba2\u88fd\u5316\u932f\u8aa4\u8a0a\u606f\u6210\u529f\u88ab\u5370\u51fa\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#update-lau","title":"<code>update</code> <code>lau</code>","text":"<p>\u5efa\u660e\u53d7\u4e0a\u7d1a\u6307\u793a\u8abf\u81f3\u5167\u52d9\u90e8\u4e26\u5728O\u8a18\u8fa6\u516c\uff0c\u8abf\u67e5\u97d3\u741b\u81e5\u5e95\u3002 scenes/scene08/query.edgeql<pre><code>update lau \nset {\n    dept:= \"\u6295\u8a34\u53ca\u5167\u90e8\u8abf\u67e5\u79d1\", \n};\n</code></pre></p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#extpg_trgm","title":"\u4f7f\u7528<code>ext::pg_trgm</code>","text":"<p>\u5efa\u660e\u62ff\u5230\u4fe1\u5c01\u5f8c\uff0c\u60f3\u5229\u7528\u8b66\u968a\u7684\u8cc7\u6599\u5eab\u7cfb\u7d71\u67e5\u8a62\uff0c\u53c3\u8207\u6bd2\u54c1\u4ea4\u6613\u624b\u4e0b\u5011\u7684\u540d\u5b57\u6709\u6c92\u6709\u5728\u5176\u4e2d\u3002\u6b64\u6642\u4ed6\u53ef\u4ee5\u5229\u7528EdgeDB\u7684<code>ext::pg_trgm</code><code>extension</code>\u4f86\u67e5\u8a62\u3002 scenes/scene08/schema.esdl<pre><code>using extension pg_trgm;\n\nmodule default {\n    ...\n}\n</code></pre></p> <p><code>extension</code>\u4e0d\u53ef\u7f6e\u65bc<code>module</code>\u5167</p> <p>\u7559\u610f<code>using extension module;</code>\u7684\u4f4d\u7f6e\uff0c\u4e0d\u53ef\u4ee5\u7f6e\u65bc\u4efb\u4f55<code>module</code>\u5167\u3002</p> make end migration here\uff08<code>scenes/scene08/schema.esdl</code>\uff09 <pre><code>did you create extension 'pg_trgm'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#extpg_trgm_1","title":"\u5b78\u7fd2\u4f7f\u7528<code>ext::pg_trgm</code>","text":"\u5982\u679c\u9700\u8981\u7684\u662ffull text search <p>\u53ef\u4ee5\u8a66\u8a66\u5167\u5efa\u7684<code>fts\u6a21\u7d44</code>\u3002\u4f46\u662f\u6211\u81ea\u5df1\u5728\u4f7f\u7528<code>fts::index</code>\u5f8c\u505amigration\uff0c\u5e38\u5e38\u6703\u5931\u6557\u3002\u53ef\u80fd\u662f\u6211\u9084\u6c92\u638c\u63e1\u5230\u6b63\u78ba\u4f7f\u7528\u65b9\u5f0f\u6216\u662f\u7248\u672c\u529f\u80fd\u5c1a\u672a\u7a69\u5b9a\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#word_similar","title":"<code>word_similar()</code>","text":"<p>\u9996\u5148\u5efa\u660e\u4f7f\u7528<code>ext::pg_trgm::word_similar()</code>\u4f86\u9032\u884c\u67e5\u8a62\u3002\u9019\u500b<code>function</code>\u6703\u8a08\u7b97\u7b2c\u4e00\u500b\u53c3\u6578\u8207\u7b2c\u4e8c\u500b\u53c3\u6578\u7684\u4efb\u610f\u90e8\u4efd\u76f8\u4f3c\u7684\u7a0b\u5ea6\uff0c\u4e26\u4f9d\u64da\u6700\u9ad8\u7684\u5206\u6578\u662f\u5426\u8d85\u904e\u9810\u5148\u8a2d\u5b9a\u7684\u9580\u6abb\u503c\uff0c\u4f86\u56de\u50b3<code>bool</code>\u503c\u3002</p> <p>scenes/scene08/query.edgeql<pre><code>with names:= array_join(array_agg(Police.name), \" \"), \n       module ext::pg_trgm,\nselect word_similar(\"\u9673\u6c38\u4ec1\", names);\n</code></pre> <pre><code>{false}\n</code></pre></p> <p>\u9019\u6bb5query\u770b\u8d77\u4f86\u6709\u9ede\u8907\u96dc\uff0c\u6211\u5011\u9010\u500b\u62c6\u89e3\uff1a</p> <ul> <li>\u5728<code>with</code>\u5340\u584a\u4e2d\uff0c\u5229\u7528<code>array_agg</code>\u5c07<code>Police.name</code>\u9019\u500b<code>set</code>\u8b8a\u70ba<code>array</code>\u3002\u63a5\u8457\u5229\u7528<code>array_join</code>\u5c07<code>array</code>\u4e2d\u6bcf\u4e00\u500b<code>element</code>\uff08<code>str</code>\u578b\u614b\uff09\u7528<code>\" \"</code>\u9023\u63a5\u8d77\u4f86\uff0c\u547d\u540d\u70ba<code>names</code>\u3002</li> <li>\u5728<code>with</code>\u5340\u584a\u4e2d\uff0c\u5c07\u9810\u8a2d<code>module</code>\u7531<code>default</code>\u8f49\u70ba<code>ext::pg_trgm</code>\u3002</li> <li>\u56e0\u70ba\u8f49\u8b8a\u4e86\u9810\u8a2d<code>module</code>\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>word_similar()</code>\u67e5\u8a62\u3002</li> </ul> <p>\u7531\u65bc<code>\u9673\u6c38\u4ec1</code>\u9019\u500b\u540d\u5b57\u7684\u78ba\u6c92\u6709\u51fa\u73fe\u5728<code>Police.name</code>\u4e2d\uff08<code>\u9673\u6c38\u4ec1</code>\u662f<code>PoliceSpy</code>\uff09\uff0c\u6240\u4ee5\u5efa\u660e\u5f97\u5230<code>false</code>\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#word_similarity","title":"<code>word_similarity()</code>","text":"<p>\u5982\u679c\u5efa\u660e\u4e0d\u6b7b\u5fc3\uff0c\u60f3\u77e5\u9053\u6700\u9ad8\u7684\u5206\u6578\u5be6\u969b\u4e0a\u662f\u591a\u5c11\u7684\u8a71\uff0c\u53ef\u4ee5\u4f7f\u7528<code>ext::pg_trgm::word_similarity()</code>\u3002 scenes/scene08/query.edgeql<pre><code>with names:= array_join(array_agg(Police.name), \" \"), \n       module ext::pg_trgm,\nselect word_similarity(\"\u9673\u6c38\u4ec1\", names);\n</code></pre> <pre><code>{0}\n</code></pre> \u6700\u7d42\u5efa\u660e\u5f97\u5230\u4e86\u6700\u4f4e\u5206\u76840\u5206\uff0c\u9019\u4e0b\u4ed6\u5fb9\u5e95\u6b7b\u5fc3\u4e86\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#_2","title":"\u5e73\u6642\u6642\u7a7a\u7684\u5efa\u660e","text":"","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#word_similar_1","title":"<code>word_similar()</code>","text":"<p>\u5047\u8a2d\u5e73\u6642\u6642\u7a7a\u7684\u5efa\u660e\uff0c\u5f97\u77e5\u8b66\u968a\u9664\u4e86\u5e73\u5e38\u53ef\u4ee5\u63a5\u89f8\u7684\u8cc7\u6599\u5eab\u5916\uff0c\u9084\u6709\u4e00\u500b\u6a5f\u5bc6\u8cc7\u6599\u5eab\uff0c\u6240\u6709\u81e5\u5e95\u6a94\u6848\u90fd\u5728\u5176\u4e2d\uff0c\u800c\u4ed6\u5df2\u8a2d\u6cd5\u53d6\u5f97\u6b0a\u9650\u3002 \u56e0\u70ba\u64c1\u6709\u5b58\u53d6<code>IsPolice</code>\u53ca<code>PoliceSpy</code>\u5169\u500b<code>object type</code>\u7684\u6b0a\u9650\uff0c\u4ed6\u5c07\u53ef\u4ee5\u9032\u884c\u4e0b\u5217query\uff1a scenes/scene08/query.edgeql<pre><code>with is_police_spy:= (select IsPolice filter .police_rank=PoliceRank.Protected),\n     police_spy:= (select PoliceSpy filter .id in is_police_spy.id),\n     names:= array_join(array_agg(Police.name union police_spy.name), \" \"), \n     module ext::pg_trgm,\nselect word_similar(\"\u9673\u6c38\u4ec1\", names);\n</code></pre> <pre><code>{true}\n</code></pre> \u9010\u6b65\u62c6\u89e3\u9019\u6bb5query\uff1a</p> <ul> <li>\u5728<code>with</code>\u5340\u584a\u4e2d\uff0c\u5c0b\u627e<code>IsPolice</code>\u4e2d\u54ea\u4e9b\u4eba\u7684<code>police_rank</code>\u662f<code>PoliceRank.Protected</code>\u4e26\u547d\u540d\u70ba<code>is_police_spy</code>\uff0c\u6b64\u6642\u4ed6\u50c5\u80fd\u5f97\u5230<code>IsPolice</code>\u4e2d\u7684\u8cc7\u8a0a\uff08\u5373<code>id</code>\u3001<code>police_rank</code>\u3001<code>dept</code>\u53ca<code>is_officer</code>\u800c\u5df2\uff09\u3002</li> <li>\u5728<code>with</code>\u5340\u584a\u4e2d\uff0c\u5c0b\u627e<code>PoliceSpy</code>\u4e2d\u54ea\u4e9b\u4eba\u7684<code>id</code>\u5728<code>is_police_spy</code>\u4e2d\u4e26\u547d\u540d\u70ba<code>police_spy</code>\u3002</li> <li>\u5728<code>with</code>\u5340\u584a\u4e2d\uff0c\u4f7f\u7528<code>array_agg</code>\u5c07<code>police_spy.name</code>\u53ca<code>police_spy.name</code>\u5408\u6210\u4e00\u500b<code>array</code>\uff0c\u63a5\u8457\u4f7f\u7528<code>array_join</code>\u5c07\u9019\u500b<code>array</code>\u4ee5<code>\" \"</code>\u9023\u63a5\u8d77\u4f86\uff0c \u4e26\u547d\u540d\u70ba<code>names</code>\u3002</li> <li>\u5728<code>with</code>\u5340\u584a\u4e2d\uff0c\u5c07\u9810\u8a2d<code>module</code>\u7531<code>default</code>\u8f49\u70ba<code>ext::pg_trgm</code>\u3002</li> <li>\u56e0\u70ba\u8f49\u8b8a\u4e86\u9810\u8a2d<code>module</code>\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>word_similar()</code>\u67e5\u8a62\u3002</li> </ul> <p>\u9019\u4e00\u6b21\u5e73\u6642\u6642\u7a7a\u7684\u5efa\u660e\u5f97\u5230<code>true</code>\uff0c\u6210\u529f\u627e\u51fa\u6c38\u4ec1\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#word_similarity_1","title":"<code>word_similarity()</code>","text":"<p>\u5982\u679c\u5efa\u660e\u4f7f\u7528<code>word_similarity</code>\uff0c\u5176query\u6703\u50cf\u662f\uff1a scenes/scene08/query.edgeql<pre><code>with is_police_spy:= (select IsPolice filter .police_rank=PoliceRank.Protected),\n     police_spy:= (select PoliceSpy filter .id in is_police_spy.id),\n     names:= array_join(array_agg(Police.name union police_spy.name), \" \"), \n     module ext::pg_trgm,\nselect word_similarity(\"\u9673\u6c38\u4ec1\", names);\n</code></pre> <pre><code>{1}\n</code></pre></p> <p>\u5efa\u660e\u6703\u5f97\u52301\u5206\u7684\u6700\u9ad8\u5206\uff0c\u4e00\u6a23\u6210\u529f\u627e\u51fa\u6c38\u4ec1\u3002</p> <p>\u6b64\u5916\uff0c\u6211\u5011\u5047\u8a2d\u5efa\u660e\u5c07<code>\u9673\u6c38\u4ec1</code>\u8aa4\u690d\u70ba<code>\u9673\u6c38\u4ee8</code>\uff0c\u5176query\u6703\u50cf\u662f\uff1a scenes/scene08/query.edgeql<pre><code>with is_police_spy:= (select IsPolice filter .police_rank=PoliceRank.Protected),\n     police_spy:= (select PoliceSpy filter .id in is_police_spy.id),\n     names:= array_join(array_agg(Police.name union police_spy.name), \" \"), \n     module ext::pg_trgm,\nselect word_similarity(\"\u9673\u6c38\u4ee8\", names);\n</code></pre> <pre><code>{0.5}\n</code></pre></p> <p>\u9019\u4e00\u6b21\u5efa\u660e\u5f97\u5230\u4e0d\u4f4e\u76840.5\u5206\uff0c\u4ed6\u5c07\u6703\u4ee5<code>\u9673\u6c38\u4ee8</code>\u70ba\u7dda\u7d22\u4e4b\u4e00\uff0c\u7e7c\u7e8c\u8ffd\u67e5\u4e0b\u53bb\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#with","title":"<code>with</code>\u5340\u584a\u6ce8\u610f\u4e8b\u9805","text":"","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#with-modulemodule","title":"<code>with module</code>\u76f8\u7576\u65bc\u8f49\u63db\u9810\u8a2d<code>module</code>","text":"<p>\u4e0b\u9762\u9019\u6bb5query\u662f\u932f\u8aa4\u7684\u3002 <pre><code># \u274c\nwith module ext::pg_trgm,\n       names:= array_join(array_agg(Police.name), \" \"), \nselect word_similar(\"\u9673\u6c38\u4ec1\", names);\n</code></pre> \u5176\u5831\u932f\u8a0a\u606f\u70ba\uff1a <pre><code>error: InvalidReferenceError: object type or alias 'ext::pg_trgm::Police' does not exist\n</code></pre> \u56e0\u70ba\u6b64\u6642<code>module</code>\u5df2\u7d93\u7531<code>default</code>\u8f49\u70ba<code>ext::pg_trgm</code>\uff0c\u800cEdgeDB\u65bc<code>ext::pg_trgm</code>\u4e2d\u627e\u4e0d\u5230<code>Police</code>\uff0c\u6240\u4ee5\u5831\u932f\u3002</p> <p>\u4f7f\u7528<code>default::Police.name</code>\u7684query\u5247\u53ef\u6210\u529f\u57f7\u884c\uff1a <pre><code># \u2705\nwith module ext::pg_trgm,\n       names:= array_join(array_agg(default::Police.name), \" \"), \nselect word_similar(\"\u9673\u6c38\u4ec1\", names);\n</code></pre></p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#_3","title":"\u8b8a\u6578\u5f15\u7528","text":"<p>\u6211\u5011\u53ef\u4ee5\u5728<code>with</code>\u5340\u584a\u5167\uff0c\u4f7f\u7528\u524d\u9762\u5b9a\u7fa9\u7684\u8b8a\u6578\uff0c\u4f8b\u5982\uff1a <pre><code>with is_police_spy:= (select IsPolice filter .police_rank=PoliceRank.Protected),\n     police_spy:= (select PoliceSpy filter .id in is_police_spy.id),\n     names:= array_join(array_agg(Police.name union police_spy.name), \" \"), \n     module ext::pg_trgm,\nselect word_similarity(\"\u9673\u6c38\u4ec1\", names);\n</code></pre></p> <ul> <li><code>police_spy</code>\u5f15\u7528\u4e86\u524d\u9762\u5b9a\u7fa9\u7684<code>is_police_spy</code>\u3002</li> <li><code>names</code>\u5f15\u7528\u4e86\u524d\u9762\u5b9a\u7fa9\u7684<code>police_spy</code>\u3002</li> </ul>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene08/query.edgeql<pre><code>insert Scene {\n      title:= \"\u8ab0\u662f\u5167\u9b3c\", \n      detail:= \"\u6bd2\u54c1\u4ea4\u6613\u5931\u6557\u5f8c\uff0c\u97d3\u741b\u78ba\u4fe1\u8eab\u908a\u6709\u8b66\u5bdf\u81e5\u5e95\u3002\u4f9d\u7167\u5efa\u660e\u8981\u6c42\uff0c\" ++\n               \"\u5c07\u6240\u6709\u5c0f\u5f1f\u7684\u500b\u4eba\u8cc7\u6599\u88dd\u5728\u4fe1\u5c01\u4e2d\uff0c\u65bc\u96fb\u5f71\u9662L13\u4f4d\u7f6e\u4ea4\u7d66\u5efa\" ++\n               \"\u660e\u3002\u6c38\u4ec1\u5077\u5077\u5728\u5f8c\u89c0\u5bdf\u4e26\u5c3e\u96a8\u5efa\u660e\u96e2\u958b\uff0c\u6b32\u770b\u6e05\u5176\u6a21\u6a23\uff0c\u4e0d\u6599\" ++\n               \"\u624b\u6a5f\u7a81\u7136\u97ff\u8d77\uff0c\u56e0\u800c\u932f\u5931\u826f\u6a5f\u3002\u800c\u5efa\u660e\u4e5f\u96b1\u7d04\u611f\u89ba\u5230\u6709\u4eba\u8ddf\u8e64\uff0c\" ++\n               \"\u96b1\u65bc\u7246\u5f8c\u67e5\u770b\u4f46\u672a\u767c\u73fe\u4eba\u8de1\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8b66\u968a\u9ad8\u5c64\u4e5f\u61f7\u7591\u97d3\u741b\" ++\n               \"\u5b89\u63d2\u4e86\u81e5\u5e95\uff0c\u65bc\u662f\u5c07\u5efa\u660e\u8abf\u81f3\u5167\u52d9\u90e8\u4e26\u5728O\u8a18\u8fa6\u516c\uff0c\u5c08\u9580\u8abf\u67e5\u6b64\" ++\n               \"\u4e8b\u3002\u5efa\u660e\u4f9d\u7167\u97d3\u741b\u6240\u7d66\u8cc7\u6599\u65bc\u8b66\u968a\u8cc7\u6599\u5eab\u4e2d\u9032\u884c\u641c\u5c0b\uff0c\u537b\u7121\u767c\u73fe\" ++\n               \"\u3002\u65bc\u6b64\u540c\u6642\uff0c\u97d3\u741b\u8a66\u63a2\u4e86\u8eab\u908a\u6240\u6709\u5c0f\u5f1f\uff0c\u5305\u62ec\u6c38\u4ec1\u8207\u50bb\u5f37...\",\n      who:= {hon, chen, lau},\n      `when`:= (insert FuzzyTime {\n                     fuzzy_year:= 2002,\n                     fuzzy_month:= 11,\n                     fuzzy_day:= 23,\n              }),\n      where:= police_station union (insert Location {name:=\"\u96fb\u5f71\u9662\"}),         \n};\n</code></pre>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#query-review","title":"Query review","text":"Query review scenes/scene08/query.edgeql<pre><code>insert Envelope;\n\nupdate lau \nset {\n    dept:= \"\u6295\u8a34\u53ca\u5167\u90e8\u8abf\u67e5\u79d1\", \n};\n\nwith names:= array_join(array_agg(Police.name), \" \"), \n       module ext::pg_trgm,\nselect word_similar(\"\u9673\u6c38\u4ec1\", names);\n\nwith names:= array_join(array_agg(Police.name), \" \"), \n       module ext::pg_trgm,\nselect word_similarity(\"\u9673\u6c38\u4ec1\", names);\n\nwith is_police_spy:= (select IsPolice filter .police_rank=PoliceRank.Protected),\n     police_spy:= (select PoliceSpy filter .id in is_police_spy.id),\n     names:= array_join(array_agg(Police.name union police_spy.name), \" \"), \n     module ext::pg_trgm,\nselect word_similar(\"\u9673\u6c38\u4ec1\", names);\n\nwith is_police_spy:= (select IsPolice filter .police_rank=PoliceRank.Protected),\n     police_spy:= (select PoliceSpy filter .id in is_police_spy.id),\n     names:= array_join(array_agg(Police.name union police_spy.name), \" \"), \n     module ext::pg_trgm,\nselect word_similarity(\"\u9673\u6c38\u4ec1\", names);\n\nwith is_police_spy:= (select IsPolice filter .police_rank=PoliceRank.Protected),\n     police_spy:= (select PoliceSpy filter .id in is_police_spy.id),\n     names:= array_join(array_agg(Police.name union police_spy.name), \" \"), \n     module ext::pg_trgm,\nselect word_similarity(\"\u9673\u6c38\u4ee8\", names);\n\ninsert Scene {\n      title:= \"\u8ab0\u662f\u5167\u9b3c\", \n      detail:= \"\u6bd2\u54c1\u4ea4\u6613\u5931\u6557\u5f8c\uff0c\u97d3\u741b\u78ba\u4fe1\u8eab\u908a\u6709\u8b66\u5bdf\u81e5\u5e95\u3002\u4f9d\u7167\u5efa\u660e\u8981\u6c42\uff0c\" ++\n               \"\u5c07\u6240\u6709\u5c0f\u5f1f\u7684\u500b\u4eba\u8cc7\u6599\u88dd\u5728\u4fe1\u5c01\u4e2d\uff0c\u65bc\u96fb\u5f71\u9662L13\u4f4d\u7f6e\u4ea4\u7d66\u5efa\" ++\n               \"\u660e\u3002\u6c38\u4ec1\u5077\u5077\u5728\u5f8c\u89c0\u5bdf\u4e26\u5c3e\u96a8\u5efa\u660e\u96e2\u958b\uff0c\u6b32\u770b\u6e05\u5176\u6a21\u6a23\uff0c\u4e0d\u6599\" ++\n               \"\u624b\u6a5f\u7a81\u7136\u97ff\u8d77\uff0c\u56e0\u800c\u932f\u5931\u826f\u6a5f\u3002\u800c\u5efa\u660e\u4e5f\u96b1\u7d04\u611f\u89ba\u5230\u6709\u4eba\u8ddf\u8e64\uff0c\" ++\n               \"\u96b1\u65bc\u7246\u5f8c\u67e5\u770b\u4f46\u672a\u767c\u73fe\u4eba\u8de1\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u8b66\u968a\u9ad8\u5c64\u4e5f\u61f7\u7591\u97d3\u741b\" ++\n               \"\u5b89\u63d2\u4e86\u81e5\u5e95\uff0c\u65bc\u662f\u5c07\u5efa\u660e\u8abf\u81f3\u5167\u52d9\u90e8\u4e26\u5728O\u8a18\u8fa6\u516c\uff0c\u5c08\u9580\u8abf\u67e5\u6b64\" ++\n               \"\u4e8b\u3002\u5efa\u660e\u4f9d\u7167\u97d3\u741b\u6240\u7d66\u8cc7\u6599\u65bc\u8b66\u968a\u8cc7\u6599\u5eab\u4e2d\u9032\u884c\u641c\u5c0b\uff0c\u537b\u7121\u767c\u73fe\" ++\n               \"\u3002\u65bc\u6b64\u540c\u6642\uff0c\u97d3\u741b\u8a66\u63a2\u4e86\u8eab\u908a\u6240\u6709\u5c0f\u5f1f\uff0c\u5305\u62ec\u6c38\u4ec1\u8207\u50bb\u5f37...\",\n      who:= {hon, chen, lau},\n      `when`:= (insert FuzzyTime {\n                     fuzzy_year:= 2002,\n                     fuzzy_month:= 11,\n                     fuzzy_day:= 23,\n              }),\n      where:= police_station union (insert Location {name:=\"\u96fb\u5f71\u9662\"}),         \n};\n</code></pre>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene08/scene08/#_4","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u9ec3sir\u65bc\u5287\u672b\u7684\u5893\u7891\u5f80\u751f\u65e5\u671f\u70ba2002\u5e7411\u670823\u65e5\uff0c\u800c\u5176\u8b58\u5225\u8b49\u4e0a\u66f4\u63db\u65e5\u671f\u537b\u70ba2008\u5e747\u670831\u65e5\u3002</p>","tags":["access policies","ext::pg_trgm"]},{"location":"scenes/scene09/scene09/","title":"09 - \u771f\u76f8\u5927\u767d","text":"","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#full-schema-preview","title":"Full schema preview","text":"Full schema preview startend migration scenes/scene08/schema.esdl<pre><code>using extension pg_trgm;\n\nmodule default {\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Envelope {\n        name: str {\n            default:= \"\u6a19\";\n            readonly:= true\n        };\n        access policy allow_select_insert_delete\n            allow select, insert, delete;\n\n        access policy only_one_envelope_exists\n            deny insert\n            using (exists Envelope)\n            {\n                errmessage := 'Only one Envelope can be existed.'\n            };\n    }\n\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy;\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene09/schema.esdl<pre><code>using extension pg_trgm;\nusing extension pgcrypto;\n\nmodule default {\n    # global types\n    global current_user_id: uuid;\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Envelope {\n        name: str {\n            default:= \"\u6a19\";\n            readonly:= true\n        };\n        access policy allow_select_insert_delete\n            allow select, insert, delete;\n\n        access policy only_one_envelope_exists\n            deny insert\n            using (exists Envelope)\n            {\n                errmessage := 'Only one Envelope can be existed.'\n            };\n    }\n\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy {\n        access policy authorized_allow_insert_update_delete\n            allow insert, update, delete\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.DCP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n            {\n                errmessage := \"PoliceRank required: PoliceRank.DCP\"\n            };\n\n        access policy authorized_allow_select\n            allow select\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n            {\n                errmessage := \"PoliceRank required: PoliceRank.SP\"\n            };\n\n    };\n\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type PoliceSpyFile extending Archive {\n        multi colleagues: PoliceSpy;\n        classified_info: str; \n\n        access policy authorized_allow_all\n            allow all\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n        {\n            errmessage := \"PoliceRank required: PoliceRank.SP\"\n        };\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    alias morse_code_of_undercover:= str_replace(\"..- -. -.. . .-. -.-. --- ...- . .-.\", \"-\", \"_\"); # undercover\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    function get_stored_encrypted_password() -&gt; str\n    #\n    # This function simulates retrieving the underlying stored encrypted password.\n    #\n    using (\n        with code:= morse_code_of_undercover,\n             module ext::pgcrypto, \n        select crypt(code, gen_salt())\n    );\n\n    function validate_password(code: str) -&gt; bool\n    #\n    # https://www.edgedb.com/docs/stdlib/pgcrypto\n    # \n    # Usage:\n    # db&gt; select validate_password(morse_code_of_undercover);\n    #\n    using (\n        with hash:= get_stored_encrypted_password(),\n             module ext::pgcrypto,\n        select crypt(code, hash) = hash\n    );\n\n    function list_police_spy_names(code: str) -&gt; json\n    #\n    # Noted that PoliceSpyFile is secured by the defined access policies.\n    # Usage:\n    # db&gt; select list_police_spy_names(morse_code_of_undercover);\n    # or \n    # wrapped in an api enpoint\n    #\n    using (\n        with police_spy_file:= PoliceSpyFile if validate_password(code)\n                               else &lt;PoliceSpyFile&gt;{},\n             names:= array_agg(police_spy_file.colleagues.name),\n        select json_object_pack({(\"names\", &lt;json&gt;(names))})\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n            test_scene09_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_scene09_alias() -&gt; bool\n    using (all({\n            (exists morse_code_of_undercover),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u5efa\u660e\u5f97\u77e5\u9ec3sir\u5c07\u8207\u8b66\u65b9\u81e5\u5e95\u65bc\u5927\u5ec8\u898b\u9762\uff0c\u901a\u77e5\u97d3\u741b\u3002\u97d3\u741b\u4e00\u9762\u6d3e\u624b\u4e0b\u5230\u5927\u5ec8\uff0c\u4e00\u9762\u9032\u884c\u6bd2\u54c1\u4ea4\u6613\u3002\u9ec3sir\u70ba\u63a9\u8b77\u6c38\u4ec1\u96e2\u958b\uff0c\u88ab\u97d3\u741b\u624b\u4e0b\u4e1f\u4e0b\u5927\u5ec8\uff0c\u5be7\u9858\u6b89\u8077\u800c\u4e0d\u767c\u4e00\u8a00\u3002\u9ec3sir\u6b7b\u5f8c\uff0c\u5efa\u660e\u806f\u624b\u6c38\u4ec1\u65bc\u505c\u8eca\u5834\u64ca\u6583\u97d3\u741b\uff0c\u6700\u7d42\u5169\u4eba\u65bc\u8b66\u5bdf\u5c40\u898b\u9762\u3002\u7576\u5efa\u660e\u6b63\u5e6b\u6c38\u4ec1\u8655\u7406\u81e5\u5e95\u6a94\u6848\u6642\uff0c\u6c38\u4ec1\u767c\u73fe\u5176\u89aa\u624b\u6240\u5beb\u5e36\u6709\u300c\u6a19\u300d\u5b57\u7684\u4fe1\u5c01\u7adf\u7136\u5728\u5efa\u660e\u684c\u4e0a\uff0c\u9813\u6642\u9192\u609f\u539f\u4f86\u5efa\u660e\u5c31\u662f\u97d3\u741b\u6d3e\u81f3\u8b66\u968a\u7684\u81e5\u5e95\uff0c\u7acb\u5373\u6084\u7136\u96e2\u958b\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#_2","title":"\u8b66\u968a\u8cc7\u5b89\u5347\u7d1a\u8a08\u756b","text":"<p>\u81ea\u5f9e\u9ec3sir\u6b89\u8077\u4e4b\u5f8c\uff0c\u8b66\u968a\u9ad8\u5c64\u4e86\u89e3\u5728\u8d95\u5feb\u627e\u51fa\u97d3\u741b\u81e5\u5e95\u7684\u540c\u6642\uff0c\u4e5f\u9700\u8981\u4fdd\u8b77\u597d\u81ea\u5df1\u6d3e\u51fa\u7684\u81e5\u5e95\uff0c\u65bc\u662f\u6c7a\u5b9a\u5168\u9762\u91cd\u65b0\u6aa2\u67e5\u4e00\u904d\u8cc7\u6599\u5eab\u7684\u5b58\u53d6\u6b0a\u9650\u3002</p> <p>\u7d93\u904e\u4e00\u756a\u8cc7\u5b89\u6f14\u7df4\uff0cIT\u90e8\u9580\u4e5f\u767c\u73fe\u5e73\u884c\u6642\u7a7a\u7684\u5efa\u660e\u6240\u767c\u73fe\u7684\u4e8b\u60c5\uff0c\u5373\u662f\u7576\u540c\u6642\u64c1\u6709<code>IsPolice</code>\u53ca<code>PoliceSpy</code>\u7684\u8b80\u53d6\u6b0a\u9650\u6642\uff0c\u662f\u53ef\u4ee5\u7531<code>IsPolice</code>\u7684<code>id</code>\u4f86\u627e\u51fa\u5176\u5728<code>PoliceSpy</code>\u4e2d\u7684<code>name</code>\u3002</p> <p>\u7531\u65bc\u73fe\u5728\u80fd\u540c\u6642\u5b58\u53d6<code>IsPolice</code>\u53ca<code>PoliceSpy</code>\u7684\u4eba\u6578\u904e\u591a\uff0c\u9ad8\u5c64\u6c7a\u5b9a\u505a\u51fa\u4ee5\u4e0b\u8b8a\u66f4\uff1a</p> <ul> <li><code>PoliceSpy</code>\u65b0\u589e\u5169\u500b<code>access policy</code>\uff1a<ul> <li>\u53ea\u6709\u526f\u8655\u9577\u7d1a\u5225\u4ee5\u4e0a\uff08<code>DCP</code>\uff09\u53ef\u4ee5<code>insert</code>\u3001<code>update</code>\u53ca<code>delete</code>\u3002</li> <li>\u53ea\u6709\u8b66\u53f8\u7d1a\u5225\u4ee5\u4e0a\uff08<code>SP</code>\uff09\u53ef\u4ee5<code>select</code>\u3002</li> </ul> </li> <li>\u65b0\u589e\u4e00\u500b<code>PoliceSpyFile</code>\u65b9\u4fbf\u5404\u90e8\u9580\u5354\u540c\u64cd\u4f5c\uff0c\u53ea\u6709\u8b66\u53f8\u7d1a\u5225\u4ee5\u4e0a\uff08<code>SP</code>\uff09\u53ef\u4ee5\u57f7\u884c\u5168\u90e8\u64cd\u4f5c\u3002</li> <li>\u65bc\u975e\u5167\u7db2\u767b\u5165\u7cfb\u7d71\u6642\uff0c\u4e0d\u63d0\u4f9b<code>REPL</code>\u64cd\u4f5c\u3002\u95dc\u65bc\u81e5\u5e95\u8cc7\u6599\u50c5\u63d0\u4f9b\u4e00\u500b<code>list_police_spy_names</code>\u7684endpoint\uff0c\u4e14\u53ea\u6709\u7576\u64cd\u4f5c\u8005\u9a57\u8b49\u70ba\u8b66\u53f8\u7d1a\u5225\u4ee5\u4e0a\uff08<code>SP</code>\uff09\u4e14\u5bc6\u78bc\u6b63\u78ba\u7684\u60c5\u6cc1\u4e0b\uff0c\u624d\u80fd\u53d6\u5f97\u8b66\u968a\u5168\u90e8\u81e5\u5e95\u7684\u540d\u5b57\u3002</li> </ul>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#edgeql-query","title":"EdgeQL query","text":"","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#global-current_user_id","title":"\u5efa\u7acb <code>global</code> <code>current_user_id</code>","text":"<p><code>current_user_id</code>\u662f\u4e00\u500b<code>global scalar</code>\uff0c\u8b93\u6211\u5011\u5728\u5168\u57df\u4e2d\u90fd\u53ef\u4ee5\u5b58\u53d6\u9019\u500b\u503c\u3002 scenes/scene09/schema.esdl<pre><code>global current_user_id: uuid;\n</code></pre> \u53ef\u4ee5\u900f\u904e<code>set</code>\u9019\u500b\u6307\u4ee4\u4f86\u7d66\u5b9a\u5176\u503c\uff0c\u5982\uff1a <pre><code>set global current_user_id:=&lt;uuid&gt;\"ccc7a858-bd17-11ee-b4be-9f69662124af\";\n</code></pre> \u6216\u900f\u904e<code>reset</code>\u5c07\u5176\u56de\u5fa9\u70ba\u9810\u8a2d\u503c\uff0c\u5982\uff1a <pre><code>reset global current_user_id;\n</code></pre> \u7531\u65bc\u6211\u5011\u6c92\u6709\u7d66\u5b9a\u9810\u8a2d\u503c\uff0c\u6240\u4ee5\u5982\u679c\u57f7\u884c\u4e0a\u8ff0query\u6642\uff0c\u6703\u5c07<code>global current_user_id</code>\u8b8a\u70ba\u7a7a\u7684<code>&lt;uuid&gt;{}</code>\u3002</p> <p><code>global</code>\u70ba\u95dc\u9375\u5b57</p> <p>\u5b58\u53d6<code>global scalar</code>\u6642\uff0c<code>global</code>\u95dc\u9375\u5b57\u4e0d\u53ef\u7701\u7565\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#policespy","title":"\u66f4\u65b0<code>PoliceSpy</code>","text":"<p><code>PoliceSpy</code>\u65b0\u589e\u5169\u500b<code>access policy</code>\uff1a scenes/scene09/schema.esdl<pre><code>type PoliceSpy extending Character, IsSpy {\n    access policy authorized_allow_insert_update_delete\n        allow insert, update, delete\n        using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n            select if exists police_officer then (\n                    police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.DCP\n                ) else (\n                    false\n                )                                                                                                                  \n        )\n        {\n            errmessage := \"PoliceRank required: PoliceRank.DCP\"\n        };\n\n    access policy authorized_allow_select\n        allow select\n        using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n            select if exists police_officer then (\n                    police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                ) else (\n                    false\n                )                                                                                                                  \n        )\n        {\n            errmessage := \"PoliceRank required: PoliceRank.SP\"\n        };\n\n};\n</code></pre> \u6211\u5011\u5728<code>Envelope</code>\u5df2\u7d93\u5b78\u7fd2\u904e<code>access policy</code>\uff0c\u9019\u88e1\u6bd4\u8f03\u4e0d\u4e00\u6a23\u7684\u662f<code>using</code>\u5167\u6bd4\u8f03\u8907\u96dc\uff0c\u6211\u5011\u8209\u7b2c\u4e00\u500b<code>access policy</code>\u70ba\u4f8b\u4f86\u770b\uff1a</p> <ul> <li>\u5728<code>with</code>\u5340\u584a\u5167\uff0c\u78ba\u8a8d<code>global current_user_id</code>\u73fe\u5728\u6240\u6307\u5b9a\u7684<code>id</code>\u7684\u78ba\u5728<code>IsPolice</code>\u4e2d\u3002</li> <li> <p>\u63a5\u8457\u5728<code>select</code>\u4e2d\u4f7f\u7528<code>if cond then {} else {}</code>\u7684\u8a9e\u6cd5\u4f86\u5224\u65b7\u9700\u8981\u57f7\u884c\u7684query\u3002\u6211\u5011\u7528\u7684\u5224\u65b7\u5f0f\u662f<code>exists police_officer</code>\uff1a</p> <ul> <li>\u5982\u679c<code>police_officer</code>\u5b58\u5728\u7684\u8a71\uff0c\u6211\u5011\u57f7\u884c<code>police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.DCP</code>\u3002\u9019\u6bb5query\u7684\u610f\u601d\u662f\u5224\u65b7\u6240\u627e\u5230<code>police_officer</code>\u7684<code>police_rank</code>\u662f\u5426\u9ad8\u65bc<code>PoliceRank.DCP</code>\uff0c\u5982\u679c\u662f\u7684\u8a71\uff0c\u56de\u50b3<code>true</code>\uff0c\u5426\u5247\u56de\u50b3<code>false</code>\u3002\u5176\u4e2d<code>??</code>\u662f\u7576<code>police_officer.police_rank</code>\u70ba\u7a7a<code>set</code>\u6642\u7684\u9810\u8a2d\u503c\uff0c\u6211\u5011\u9810\u8a2d\u5176\u70ba\u5b98\u968e\u6700\u5c0f\u7684<code>PoliceRank.PC</code>\u3002</li> <li>\u5982\u679c<code>police_officer</code>\u4e0d\u5b58\u5728\u7684\u8a71\uff0c\u56de\u50b3<code>false</code>\u3002</li> </ul> </li> </ul> <p>\u9019\u9ebc\u4e00\u4f86\uff0c\u6211\u5011\u6eff\u8db3\u4e86\u7b2c\u4e00\u500b\u9700\u6c42\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#policespyfile","title":"\u5efa\u7acb<code>PoliceSpyFile</code>","text":"<p><code>PoliceSpyFile</code> <code>extending</code> <code>Archive</code>\u800c\u4f86\uff0c\u6709\u4e00\u500b<code>link</code>\u3001\u4e00\u500b<code>property</code>\u53ca\u4e00\u500b<code>access policy</code>\uff1a</p> <ul> <li><code>colleagues</code>\u662f<code>multi link</code>\u6307\u5411<code>PoliceSpy</code>\u3002</li> <li><code>classified_info</code> <code>property</code>\u70ba\u4e00<code>str</code>\uff0c\u4ee3\u8868\u6240\u5132\u5b58\u7684\u6a5f\u5bc6\u8cc7\u8a0a\u3002</li> <li><code>access policy</code>\u7684\u5beb\u6cd5\u8207<code>PoliceSpy</code>\u985e\u4f3c\uff0c\u4f46\u9019\u908a\u662f\u8b66\u53f8\u7d1a\u5225\u4ee5\u4e0a\uff08<code>SP</code>\uff09\u53ef\u4ee5\u57f7\u884c\u5168\u90e8\u64cd\u4f5c\u3002</li> </ul> scenes/scene09/schema.esdl<pre><code>type PoliceSpyFile extending Archive {\n    multi colleagues: PoliceSpy;\n    classified_info: str; \n\n    access policy authorized_allow_all\n        allow all\n        using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n            select if exists police_officer then (\n                    police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                ) else (\n                    false\n                )                                                                                                                  \n        )\n    {\n        errmessage := \"PoliceRank required: PoliceRank.SP\"\n    };\n}\n</code></pre> \u65b0\u589e<code>PoliceSpyFile</code>\u7684\u5999\u7528 <p>\u8b66\u53f8\u7d1a\u5225\u4ee5\u4e0a\uff08<code>SP</code>\uff09\u53ef\u4ee5\u5c0d<code>PoliceSpyFile</code>\u9032\u884c\u5168\u90e8\u64cd\u4f5c\uff0c\u5305\u62ec<code>select</code> <code>colleagues</code>\uff0c\u9019\u6709\u53ef\u80fd\u6703\u9078\u53d6\u5230\u591a\u500b<code>PoliceSpy</code>\u3002\u4f46\u8981\u5c0d\u9019\u4e9b<code>PoliceSpy</code>\u9032\u884c<code>update</code>\u6216<code>delete</code>\u4f9d\u7136\u9700\u8981\u70ba\u526f\u8655\u9577\u7d1a\u5225\u4ee5\u4e0a\uff08<code>DCP</code>\uff09\u3002</p> <p><code>PoliceSpyFile</code>\u53ef\u4ee5\u60f3\u6210\u4e00\u500b\u5c08\u6848\u7c21\u5831\uff0c\u7576\u60a8\u5177\u5099\u8db3\u5920\u6b0a\u9650\u7684\u6642\u5019\uff0c\u53ef\u4ee5\u5c0d\u9019\u500b\u7c21\u5831\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u5305\u62ec\u5f15\u7528\u5c08\u6848\u6a94\u6848\uff08\u4f46\u5982\u679c\u6b0a\u9650\u4e0d\u8db3\u7684\u8a71\uff0c\u5c07\u7121\u6cd5\u66f4\u65b0\u6216\u522a\u9664\u5c08\u6848\u6a94\u6848\uff09\u3002</p> <p>\u9019\u9ebc\u4e00\u4f86\uff0c\u6211\u5011\u6eff\u8db3\u4e86\u7b2c\u4e8c\u500b\u9700\u6c42\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#list_police_spy_names","title":"\u7de8\u5beb<code>list_police_spy_names</code>","text":"<p><code>list_police_spy_names</code>\u5927\u591a\u6578\u60c5\u6cc1\u61c9\u8a72\u6703\u88ab\u67d0\u7a2eweb framework\u5beb\u51fa\u4f86\u7684\u7a0b\u5f0f\u6240\u547c\u53eb\uff08\u4f8b\u5982<code>Python</code>\u7684<code>FastAPI</code>\u6216<code>Rust</code>\u7684<code>Axum</code>\uff09\u3002</p> <p>\u5047\u5982\u60a8\u6709\u4e00\u500b<code>/policespy-names</code>\u7684endpoint\uff0c\u53ef\u4ee5\u7528<code>GET</code>\u4f86\u53d6\u5f97\u6240\u6709<code>PolicySpy</code> <code>name</code>\u7684<code>JSON</code>\u683c\u5f0f\uff0c\u90a3\u9ebc\u8655\u7406\u9019\u500bendpoint\u7684<code>view function</code>\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u501f\u52a9\u6211\u5011\u6240\u5beb\u7684<code>list_police_spy_names</code>\u3002</p> <p><code>list_police_spy_names</code>\u63a5\u6536\u4e00\u500b\u70ba<code>str</code>\u7684<code>code</code>\u53c3\u6578\uff0c\u4e26\u8fd4\u56de<code>JSON</code>\u683c\u5f0f\uff1a</p> <ul> <li>\u5728<code>with</code>\u5340\u584a\uff0c\u900f\u904e<code>validate_password</code>\u505a\u9a57\u8b49\u3002\u5982\u679c\u901a\u904e\u7684\u8a71\uff0c\u5247\u8fd4\u56de\u6240\u6709<code>PoliceSpyFile</code>\uff0c\u5426\u5247\u8fd4\u56de\u7a7a<code>set</code>\uff08\u5373<code>&lt;PoliceSpyFile&gt;{}</code>\uff09\u3002</li> <li>\u5728<code>with</code>\u5340\u584a\uff0c\u900f\u904e<code>array_agg</code>\u5c07<code>police_spy_file.colleagues.name</code>\u8f49\u70ba<code>array</code>\uff0c\u4e26\u5b58\u70ba<code>names</code>\u3002</li> <li>\u6700\u5f8c\u5229\u7528<code>json_object_pack</code>\u53ca<code>&lt;json&gt;(names)</code>\u7684<code>casting</code>\u529f\u80fd\u8fd4\u56de<code>JSON</code>\u683c\u5f0f\u3002</li> </ul> scenes/scene09/schema.esdl<pre><code>function list_police_spy_names(code: str) -&gt; json\nusing (\n    with police_spy_file:= PoliceSpyFile if validate_password(code)\n                           else &lt;PoliceSpyFile&gt;{},\n         names:= array_agg(police_spy_file.colleagues.name),\n    select json_object_pack({(\"names\", &lt;json&gt;(names))})\n);\n</code></pre> <p>\u8981\u5b8c\u6210<code>validate_password</code> <code>function</code>\uff0c\u9084\u9700\u8981\u642d\u914d\u4f7f\u7528<code>ext::pgcrypto</code>\u3001 <code>morse_code_of_undercover</code>\u53ca<code>get_stored_encrypted_password</code>\uff0c\u6211\u5011\u7e7c\u7e8c\u770b\u4e0b\u53bb\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#extpgcrypto","title":"\u4f7f\u7528<code>ext::pgcrypto</code>","text":"scenes/scene09/schema.esdl<pre><code>...\nusing extension pg_trgm;\n\nmodule default {\n    ...\n}\n</code></pre> <code>Auth extension</code> <p>\u5982\u679c\u60a8\u7684app\u6709\u9a57\u8b49\u9700\u6c42\u7684\u8a71\uff0c\u53ef\u4ee5\u8a66\u8a66EdgeDB4.0\u63a8\u51fa\u7684<code>Auth extension</code>\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#alias-morse_code_of_undercover","title":"\u5efa\u7acb<code>alias</code> <code>morse_code_of_undercover</code>","text":"<p>\u5287\u4e2d\u6c38\u4ec1\u81e5\u5e95\u6a94\u6848\u7684\u5bc6\u78bc\u5c31\u662f\u81e5\u5e95\u7684\u6469\u65af\u5bc6\u78bc\u3002</p> <p>\u6839\u64da\u7db2\u8def\u4e0a\u7684\u641c\u5c0b\u7d50\u679c\uff0c\u6469\u65af\u5bc6\u78bc\u5927\u591a\u662f\u4f7f\u7528<code>-</code>\uff0c\u4f46\u5287\u4e2d\u537b\u662f\u4f7f\u7528<code>_</code>\u3002\u8b93\u6211\u5011\u5c0a\u91cd\u539f\u8457\uff0c\u4f7f\u7528\u5167\u5efa\u7684str_replace()\u5c07\u81e5\u5e95\u7684\u6469\u65af\u5bc6\u78bc\u4e2d\u7684<code>-</code>\u63db\u6210<code>_</code>\uff0c\u4e26\u5b58\u6210<code>alias</code>\u65b9\u4fbf\u4f7f\u7528\u3002 scenes/scene09/schema.esdl<pre><code>alias morse_code_of_undercover:= str_replace(\"..- -. -.. . .-. -.-. --- ...- . .-.\", \"-\", \"_\");\n</code></pre></p> <p>\u4e0d\u8981\u5c07\u6a5f\u5bc6\u8cc7\u8a0a\u5b58\u70ba<code>alias</code></p> <p>\u5be6\u52d9\u4e0a\uff0c\u4e0d\u61c9\u8a72\u5c07\u6a5f\u5bc6\u8cc7\u8a0a\u5b58\u70ba<code>alias</code>\u3002\u6211\u5011\u9019\u9ebc\u505a\u53ea\u662f\u65b9\u4fbf\u7a0d\u5f8c\u5c55\u793a<code>validate_password</code>\u53ca<code>list_police_spy_names</code>\u7684\u6548\u679c\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#aliasfunction","title":"\u7de8\u5beb\u6e2c\u8a66<code>alias</code>\u7684<code>function</code>","text":"<p>\u65b0\u589e<code>test_scene09_alias</code> <code>function</code>\uff0c\u4e26\u66f4\u65b0<code>test_alias</code>\u3002 scenes/scene09/schema.esdl<pre><code>function test_alias() -&gt; bool\nusing (all({\n        test_scene01_alias(),\n        test_scene02_alias(),\n        test_scene03_alias(),\n        test_scene05_alias(),\n        test_scene09_alias(),\n    })\n);\n\nfunction test_scene09_alias() -&gt; bool\nusing (all({\n        (exists morse_code_of_undercover),\n    })\n);\n</code></pre></p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#get_stored_encrypted_password","title":"\u7de8\u5beb<code>get_stored_encrypted_password</code>","text":"<p><code>get_stored_encrypted_password</code>\u6a21\u64ec\u81ea\u8cc7\u6599\u5eab\u4e2d\u53d6\u51fahash\u904e\u7684\u52a0\u5bc6\u5bc6\u78bc\uff08\u96d6\u7136\u5728\u9019\u908a\u5b83\u770b\u8d77\u4f86\u53ea\u662f\u6bcf\u6b21\u88ab\u547c\u53eb\u6642\uff0c\u8a08\u7b97<code>morse_code_of_undercover</code>\u7684hash\u503c\uff09\u3002 scenes/scene09/schema.esdl<pre><code>function get_stored_encrypted_password() -&gt; str\nusing (\n    with code:= morse_code_of_undercover,\n            module ext::pgcrypto, \n    select crypt(code, gen_salt())\n);\n</code></pre></p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#validate_password","title":"\u7de8\u5beb<code>validate_password</code>","text":"<p>\u6700\u5f8c\u6211\u5011\u53c3\u8003\u5b98\u65b9\u6587\u4ef6\u4e2d\u7684\u7bc4\u4f8b\uff0c\u4f7f\u7528<code>ext::pgcrypto::crypt()</code>\u4f86\u8a08\u7b97\u6240\u8f38\u5165\u7684\u5bc6\u78bc\uff08<code>salt</code>\u70bahash\u904e\u7684\u52a0\u5bc6\u5bc6\u78bc\uff09\uff0c\u662f\u5426\u6703\u7b49\u65bchash\u904e\u7684\u52a0\u5bc6\u5bc6\u78bc\u672c\u8eab\u3002\u5982\u679c\u662f\u7684\u8a71\uff0c\u4ee3\u8868\u6211\u5011\u8f38\u5165\u7684\u662f\u6b63\u78ba\u5bc6\u78bc\uff0c\u8fd4\u56de<code>true</code>\uff0c\u5426\u5247\u5247\u8fd4\u56de<code>false</code>\u3002 scenes/scene09/schema.esdl<pre><code>function validate_password(code: str) -&gt; bool\nusing (\n    with hash:= get_stored_encrypted_password(),\n            module ext::pgcrypto,\n    select crypt(code, hash) = hash\n);\n</code></pre></p> <p>\u81f3\u6b64\uff0c\u6211\u5011\u6eff\u8db3\u4e86\u7b2c\u4e09\u500b\u9700\u6c42\u3002</p> make end migration here\uff08<code>scenes/scene09/schema.esdl</code>\uff09 <pre><code>did you create extension 'pgcrypto'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create alias 'default::morse_code_of_undercover'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::get_stored_encrypted_password'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::test_scene09_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::validate_password'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create global 'default::current_user_id'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create object type 'default::PoliceSpyFile'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you create function 'default::list_police_spy_names'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you alter function 'default::test_alias'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you alter object type 'default::PoliceSpy'? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre> <p>\u8b93\u4eba\u53c8\u611b\u53c8\u6068\u7684<code>Access policy</code>\uff1f</p> <p>\u7531\u65bc\u6211\u5011\u6dfb\u52a0\u4e86\u5169\u500b<code>access policy</code>\u5230<code>PoliceSpy</code>\uff0c\u5f9e\u73fe\u5728\u958b\u59cb\u6bcf\u6b21<code>select</code> <code>PoliceSpy</code>\u6642\uff0c\u90fd\u8981\u6642\u523b\u6ce8\u610f<code>global current_user_id</code>\u6240\u5c6c\u7684<code>object</code>\u662f\u5426\u6709\u8db3\u5920\u6b0a\u9650\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#_3","title":"\u6e2c\u8a66","text":"","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#test_alias","title":"\u6e2c\u8a66<code>test_alias</code>","text":"<p>\u7531\u65bc<code>test_alias</code>\u4e2d\u7684<code>test_scene09_alias</code>\u542b\u6709<code>chen</code>\uff08<code>PoliceSpy</code>\uff09\u7684\u6e2c\u8a66\uff0c\u70ba\u4e86\u80fd\u5920<code>select</code>\u5230<code>chen</code>\u4f86\u9032\u884c\u6e2c\u8a66\uff0c\u6211\u5011\u5f9e<code>Police</code>\u4e2d\u96a8\u610f\u6311\u9078\u4e00\u500b<code>PoliceRank</code>\u70ba<code>SP</code>\u7684<code>object</code>\uff0c\u5c07\u6b64<code>object</code>\u7684<code>id</code>\u6307\u5b9a\u7d66<code>global current_user_id</code>\uff08\u7531\u65bc\u76ee\u524d<code>SP</code>\u7b49\u7d1a\u7684\u8b66\u5bdf\u53ea\u6709\u9ec3sir\u4e00\u500b\uff0c\u6240\u4ee5\u9019\u500bquery\u5c31\u662f\u5c07<code>global current_user_id</code>\u8a2d\u70ba\u9ec3sir\u7684<code>id</code>\uff09\u3002\u6e2c\u8a66\u5b8c\u6210\u5f8c\uff0c\u518d\u57f7\u884c<code>reset global current_user_id</code>\u56de\u5fa9\u70ba\u9810\u8a2d\u503c\u3002 scenes/scene09/query.edgeql<pre><code># end migration needs to be applied before running this query\nset global current_user_id:= (select Police filter .police_rank=PoliceRank.SP limit 1).id;\n\nselect test_alias();\n\nreset global current_user_id;\n</code></pre></p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#validate_password_1","title":"\u6e2c\u8a66<code>validate_password</code>","text":"<p>\u5982\u679c\u8f38\u5165\u6b63\u78ba\u7684\u5bc6\u78bc\uff0c<code>validate_password</code>\u6703\u56de\u50b3<code>true</code>\uff0c\u5426\u5247\u56de\u50b3<code>false</code>\u3002 scenes/scene09/query.edgeql<pre><code>select validate_password(morse_code_of_undercover); # {true}\nselect validate_password(\"27149\"); # {false}\n</code></pre></p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#policespypolicespyfilelist_police_spy_names","title":"\u6e2c\u8a66<code>PoliceSpy</code>\u3001<code>PoliceSpyFile</code>\u53ca<code>list_police_spy_names</code>","text":"","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#policerankpoliceranksp","title":"\u5982\u679c<code>PoliceRank</code>\u70ba<code>PoliceRank.SP</code>","text":"<p>\u8207<code>test_alias</code>\u4e00\u6a23\uff0c\u6211\u5011\u5c07<code>global current_user_id</code>\u8a2d\u70ba\u9ec3sir\u7684<code>id</code>\u3002 scenes/scene09/query.edgeql<pre><code>set global current_user_id:= (select Police filter .police_rank=PoliceRank.SP limit 1).id;\n</code></pre> \u63a5\u8457\u9032\u884c<code>PoliceSpy</code>\u5404\u9805\u64cd\u4f5c\u6e2c\u8a66\uff1a</p> <ul> <li><code>insert</code>\u6703\u5f97\u5230<code>AccessPolicyError</code>\u3002</li> <li><code>select</code>\u53ef\u4ee5\u6b63\u5e38\u57f7\u884c\u3002</li> <li><code>update</code>\u53ca<code>delete</code>\u6703\u5f97\u5230\u7a7a<code>set</code>\u3002</li> </ul> <p>\u9019\u6a23\u7684\u7d50\u679c\u7b26\u5408\u9700\u6c42\u4e00\u7684\u90e8\u4efd\u8981\u6c42\u3002 scenes/scene09/query.edgeql<pre><code>Insert PoliceSpy {name:= \"test_police_spy_by_SP\"}; # AccessPolicyError\n\nselect PoliceSpy;\n\nupdate PoliceSpy\nfilter .name=\"\u9673\u6c38\u4ec1\"\nset {\n    nickname:= .nickname ++ \"!\",\n}; # {}\n\ndelete PoliceSpy filter .name=\"\u9673\u6c38\u4ec1\"; # {}\n</code></pre></p> <p>\u518d\u4f86\u9032\u884c<code>PoliceSpyFile</code>\u5404\u9805\u64cd\u4f5c\u6e2c\u8a66\u53ca<code>list_police_spy_names</code>\u529f\u80fd\u6e2c\u8a66\uff1a</p> <ul> <li><code>PoliceSpyFile</code>\u7684\u5404\u9805\u529f\u80fd\u7686\u80fd\u6210\u529f\u64cd\u4f5c\u3002</li> <li><code>list_police_spy_names</code>\u5728\u5bc6\u78bc\u6b63\u78ba\u7684\u60c5\u6cc1\u4e0b\uff0c\u56de\u50b3\u542b\u6709\u8cc7\u8a0a\u7684<code>JSON</code>\u8cc7\u6599\uff0c\u5426\u5247\u56de\u50b3\u7a7a\u7684<code>JSON</code>\u8cc7\u6599\u3002</li> </ul> <p>\u9019\u6a23\u7684\u7d50\u679c\u7b26\u5408\u9700\u6c42\u4e8c\u53ca\u9700\u6c42\u4e09\u3002 scenes/scene09/query.edgeql<pre><code>insert PoliceSpyFile {\n    colleagues:= chen,\n    classified_info:= \"Handler: test_SP...\",\n};\n\nselect PoliceSpyFile; \n\nselect list_police_spy_names(morse_code_of_undercover); # {Json(\"{\\\"names\\\": [\\\"\u9673\u6c38\u4ec1\\\"]}\")}\nselect list_police_spy_names(\"abc\"); # {Json(\"{\\\"names\\\": []}\")}\n\nupdate PoliceSpyFile filter .classified_info=\"Handler: test_SP...\"\nset {\n    classified_info:= .classified_info ++ \"...\"\n};\n\ndelete PoliceSpyFile;\n</code></pre></p> <p>\u56de\u5fa9<code>global current_user_id</code>\u70ba\u9810\u8a2d\u503c\u3002 scenes/scene09/query.edgeql<pre><code>reset global current_user_id;\n</code></pre></p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#policerankpolicerankdcp","title":"\u5982\u679c<code>PoliceRank</code>\u70ba<code>PoliceRank.DCP</code>","text":"<p>\u7531\u65bc\u8cc7\u6599\u5eab\u4e2d\u9084\u6c92\u6709<code>PoliceRank</code>\u70ba<code>DCP</code>\u7684<code>Police object</code>\uff0c\u6240\u4ee5\u6211\u5011\u5148<code>insert</code>\u4e00\u500b\uff0c\u518d\u5c07\u5176<code>id</code>\u6307\u5b9a\u7d66<code>global current_user_id</code>\u3002 scenes/scene09/query.edgeql<pre><code>insert Police {name:= \"test_DCP\", police_rank:=PoliceRank.DCP};\nset global current_user_id:= (select Police filter .police_rank=PoliceRank.DCP limit 1).id;\n</code></pre> \u63a5\u8457\u9032\u884c<code>PoliceSpy</code>\u5404\u9805\u64cd\u4f5c\u6e2c\u8a66\uff0c\u7686\u80fd\u6210\u529f\u64cd\u4f5c\u3002</p> <p>\u9019\u6a23\u7684\u7d50\u679c\u52a0\u4e0a<code>PoliceRank</code>\u70ba<code>PoliceRank.SP</code>\u7684\u6e2c\u8a66\uff0c\u7b26\u5408\u9700\u6c42\u4e00\u7684\u5168\u90e8\u8981\u6c42\u3002 scenes/scene09/query.edgeql<pre><code>Insert PoliceSpy {name:= \"test_police_spy_by_DPC\"};\n\nselect PoliceSpy;\n\nupdate PoliceSpy filter .name=\"test_police_spy_by_DPC\"\nset {\n    nickname:= \"test_police_spy_by_DPC\",\n};\n\ndelete PoliceSpy filter .nickname=\"test_police_spy_by_DPC\";\n</code></pre></p> <p>\u518d\u4f86\u9032\u884c<code>PoliceSpyFile</code>\u5404\u9805\u64cd\u4f5c\u6e2c\u8a66\u53ca<code>list_police_spy_names</code>\u529f\u80fd\u6e2c\u8a66\uff1a</p> <ul> <li><code>PoliceSpyFile</code>\u7684\u5404\u9805\u529f\u80fd\u7686\u80fd\u6210\u529f\u64cd\u4f5c\u3002</li> <li><code>list_police_spy_names</code>\u5728\u5bc6\u78bc\u6b63\u78ba\u7684\u60c5\u6cc1\u4e0b\uff0c\u56de\u50b3\u542b\u6709\u8cc7\u8a0a\u7684<code>JSON</code>\u8cc7\u6599\uff0c\u5426\u5247\u56de\u50b3\u7a7a\u7684<code>JSON</code>\u8cc7\u6599\u3002</li> </ul> <p>\u9019\u6a23\u7684\u7d50\u679c\u7b26\u5408\u9700\u6c42\u4e8c\u53ca\u9700\u6c42\u4e09\u3002 scenes/scene09/query.edgeql<pre><code>insert PoliceSpyFile {\n    colleagues:= chen,\n    classified_info:= \"Handler: test_DCP...\",\n};\n\nselect PoliceSpyFile; \n\nselect list_police_spy_names(morse_code_of_undercover); # {Json(\"{\\\"names\\\": [\\\"\u9673\u6c38\u4ec1\\\"]}\")}\nselect list_police_spy_names(\"abc\"); # {Json(\"{\\\"names\\\": []}\")}\n\nupdate PoliceSpyFile filter .classified_info=\"Handler: test_DCP...\"\nset {\n    classified_info:= .classified_info ++ \"...\"\n};\n\ndelete PoliceSpyFile;\n</code></pre></p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#insert-chenlaucontact","title":"<code>insert</code> <code>ChenLauContact</code>","text":"scenes/scene09/query.edgeql<pre><code>insert ChenLauContact {\n    how:= \"\u96fb\u8a71\",\n    detail:= \"\u9ec3sir\u6b89\u8077\u5f8c\uff0c\u5efa\u660e\u4ee5\u9ec3sir\u624b\u6a5f\u806f\u7d61\u6c38\u4ec1\",\n    `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/23_HH24:MI:SS_ID\")),\n    where:= police_station union (insert Location {name:= \"\u96fb\u8eca\u7ad9\"}),\n};\n\ninsert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u5efa\u660e\u64ca\u6583\u97d3\u741b\u5f8c\uff0c\u7d42\u65bc\u5728\u8b66\u5c40\u8207\u6c38\u4ec1\u898b\u9762\uff0c\u4e26\u78ba\u8a8d\u5176\u81e5\u5e95\u8eab\u4efd\u3002\",\n    `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/23_HH24:MI:SS_ID\")),\n    where:= police_station,\n};\n</code></pre>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene09/query.edgeql<pre><code>insert Scene {\n      title:= \"\u771f\u76f8\u5927\u767d\", \n      detail:= \"\u5efa\u660e\u5f97\u77e5\u9ec3sir\u5c07\u8207\u8b66\u65b9\u81e5\u5e95\u65bc\u5927\u5ec8\u898b\u9762\uff0c\u901a\u77e5\u97d3\u741b\u3002\u97d3\u741b\u4e00\u9762\u6d3e\" ++\n               \"\u624b\u4e0b\u5230\u5927\u5ec8\uff0c\u4e00\u9762\u9032\u884c\u6bd2\u54c1\u4ea4\u6613\u3002\u9ec3sir\u70ba\u63a9\u8b77\u6c38\u4ec1\u96e2\u958b\uff0c\u88ab\u97d3\u741b\" ++\n               \"\u624b\u4e0b\u4e1f\u4e0b\u6a13\uff0c\u5be7\u9858\u6b89\u8077\u800c\u4e0d\u767c\u4e00\u8a00\u3002\u9ec3sir\u6b7b\u5f8c\uff0c\u5efa\u660e\u806f\u624b\u6c38\u4ec1\u65bc\" ++\n               \"\u505c\u8eca\u5834\u64ca\u6583\u97d3\u741b\uff0c\u6700\u7d42\u5169\u4eba\u65bc\u8b66\u5bdf\u5c40\u898b\u9762\u3002\u7576\u5efa\u660e\u6b63\u5e6b\u6c38\u4ec1\u8655\u7406\u81e5\" ++\n               \"\u5e95\u6a94\u6848\u6642\uff0c\u6c38\u4ec1\u767c\u73fe\u5176\u89aa\u624b\u6240\u5beb\u5e36\u6709\u300c\u6a19\u300d\u5b57\u7684\u4fe1\u5c01\u7adf\u7136\u5728\u5efa\u660e\u684c\u4e0a\uff0c\" ++\n               \"\u9192\u609f\u539f\u4f86\u5efa\u660e\u5c31\u662f\u97d3\u741b\u6d3e\u81f3\u8b66\u968a\u7684\u81e5\u5e95\uff0c\u7acb\u5373\u6084\u7136\u96e2\u958b\u3002\",\n      who:= (select Gangster filter .nickname in {\"\u8fea\u8def\", \"\u50bb\u5f37\"}) union {wong, chen, hon, lau},\n      `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/23_HH24:MI:SS_ID\")),\n      where:=  (select Location filter .name in {\"\u5929\u53f0\", \"\u96fb\u8eca\u7ad9\"}) union \n               police_station union\n               (select(insert Location {name:=\"\u505c\u8eca\u5834\"})),         \n};\n# --8\n</code></pre>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#_4","title":"\u6700\u5f8c\u6e05\u7406","text":"<p>\u522a\u9664<code>PoliceRank</code>\u70ba<code>DCP</code>\u7684\u6e2c\u8a66\u7528<code>Police object</code>\uff0c\u4e26\u56de\u5fa9<code>global current_user_id</code>\u70ba\u9810\u8a2d\u503c\u3002 scenes/scene09/query.edgeql<pre><code>delete Police filter .name=\"test_DCP\";\n\nreset global current_user_id;\n</code></pre></p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#query-review","title":"Query review","text":"Query review scenes/scene09/query.edgeql<pre><code>set global current_user_id:= (select Police filter .police_rank=PoliceRank.SP limit 1).id;\n\nselect test_alias();\n\nreset global current_user_id;\n\nselect validate_password(morse_code_of_undercover); # {true}\nselect validate_password(\"27149\"); # {false}\n\nset global current_user_id:= (select Police filter .police_rank=PoliceRank.SP limit 1).id;\n\nInsert PoliceSpy {name:= \"test_police_spy_by_SP\"}; # AccessPolicyError\n\nselect PoliceSpy;\n\nupdate PoliceSpy\nfilter .name=\"\u9673\u6c38\u4ec1\"\nset {\n    nickname:= .nickname ++ \"!\",\n}; # {}\n\ndelete PoliceSpy filter .name=\"\u9673\u6c38\u4ec1\"; # {}\n\ninsert PoliceSpyFile {\n    colleagues:= chen,\n    classified_info:= \"Handler: test_SP...\",\n};\n\nselect PoliceSpyFile; \n\nselect list_police_spy_names(morse_code_of_undercover); # {Json(\"{\\\"names\\\": [\\\"\u9673\u6c38\u4ec1\\\"]}\")}\nselect list_police_spy_names(\"abc\"); # {Json(\"{\\\"names\\\": []}\")}\n\nupdate PoliceSpyFile filter .classified_info=\"Handler: test_SP...\"\nset {\n    classified_info:= .classified_info ++ \"...\"\n};\n\ndelete PoliceSpyFile;\n\nreset global current_user_id;\n\ninsert Police {name:= \"test_DCP\", police_rank:=PoliceRank.DCP};\nset global current_user_id:= (select Police filter .police_rank=PoliceRank.DCP limit 1).id;\n\nInsert PoliceSpy {name:= \"test_police_spy_by_DPC\"};\n\nselect PoliceSpy;\n\nupdate PoliceSpy filter .name=\"test_police_spy_by_DPC\"\nset {\n    nickname:= \"test_police_spy_by_DPC\",\n};\n\ndelete PoliceSpy filter .nickname=\"test_police_spy_by_DPC\";\n\ninsert PoliceSpyFile {\n    colleagues:= chen,\n    classified_info:= \"Handler: test_DCP...\",\n};\n\nselect PoliceSpyFile; \n\nselect list_police_spy_names(morse_code_of_undercover); # {Json(\"{\\\"names\\\": [\\\"\u9673\u6c38\u4ec1\\\"]}\")}\nselect list_police_spy_names(\"abc\"); # {Json(\"{\\\"names\\\": []}\")}\n\nupdate PoliceSpyFile filter .classified_info=\"Handler: test_DCP...\"\nset {\n    classified_info:= .classified_info ++ \"...\"\n};\n\ndelete PoliceSpyFile;\n\n\ninsert ChenLauContact {\n    how:= \"\u96fb\u8a71\",\n    detail:= \"\u9ec3sir\u6b89\u8077\u5f8c\uff0c\u5efa\u660e\u4ee5\u9ec3sir\u624b\u6a5f\u806f\u7d61\u6c38\u4ec1\",\n    `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/23_HH24:MI:SS_ID\")),\n    where:= police_station union (insert Location {name:= \"\u96fb\u8eca\u7ad9\"}),\n};\n\n\ninsert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u5efa\u660e\u64ca\u6583\u97d3\u741b\u5f8c\uff0c\u7d42\u65bc\u5728\u8b66\u5c40\u8207\u6c38\u4ec1\u898b\u9762\uff0c\u4e26\u78ba\u8a8d\u5176\u81e5\u5e95\u8eab\u4efd\u3002\",\n    `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/23_HH24:MI:SS_ID\")),\n    where:= police_station,\n};\n\ninsert Scene {\n      title:= \"\u771f\u76f8\u5927\u767d\", \n      detail:= \"\u5efa\u660e\u5f97\u77e5\u9ec3sir\u5c07\u8207\u8b66\u65b9\u81e5\u5e95\u65bc\u5927\u5ec8\u898b\u9762\uff0c\u901a\u77e5\u97d3\u741b\u3002\u97d3\u741b\u4e00\u9762\u6d3e\" ++\n               \"\u624b\u4e0b\u5230\u5927\u5ec8\uff0c\u4e00\u9762\u9032\u884c\u6bd2\u54c1\u4ea4\u6613\u3002\u9ec3sir\u70ba\u63a9\u8b77\u6c38\u4ec1\u96e2\u958b\uff0c\u88ab\u97d3\u741b\" ++\n               \"\u624b\u4e0b\u4e1f\u4e0b\u6a13\uff0c\u5be7\u9858\u6b89\u8077\u800c\u4e0d\u767c\u4e00\u8a00\u3002\u9ec3sir\u6b7b\u5f8c\uff0c\u5efa\u660e\u806f\u624b\u6c38\u4ec1\u65bc\" ++\n               \"\u505c\u8eca\u5834\u64ca\u6583\u97d3\u741b\uff0c\u6700\u7d42\u5169\u4eba\u65bc\u8b66\u5bdf\u5c40\u898b\u9762\u3002\u7576\u5efa\u660e\u6b63\u5e6b\u6c38\u4ec1\u8655\u7406\u81e5\" ++\n               \"\u5e95\u6a94\u6848\u6642\uff0c\u6c38\u4ec1\u767c\u73fe\u5176\u89aa\u624b\u6240\u5beb\u5e36\u6709\u300c\u6a19\u300d\u5b57\u7684\u4fe1\u5c01\u7adf\u7136\u5728\u5efa\u660e\u684c\u4e0a\uff0c\" ++\n               \"\u9192\u609f\u539f\u4f86\u5efa\u660e\u5c31\u662f\u97d3\u741b\u6d3e\u81f3\u8b66\u968a\u7684\u81e5\u5e95\uff0c\u7acb\u5373\u6084\u7136\u96e2\u958b\u3002\",\n      who:= (select Gangster filter .nickname in {\"\u8fea\u8def\", \"\u50bb\u5f37\"}) union {wong, chen, hon, lau},\n      `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/23_HH24:MI:SS_ID\")),\n      where:=  (select Location filter .name in {\"\u5929\u53f0\", \"\u96fb\u8eca\u7ad9\"}) union \n               police_station union\n               (select(insert Location {name:=\"\u505c\u8eca\u5834\"})),         \n};\n\ndelete Police filter .name=\"test_DCP\";\n\nreset global current_user_id;\n</code></pre>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#_5","title":"\u7121\u9593\u5047\u8a2d","text":"<p>\u6211\u5011\u5047\u8a2d\u5287\u4e2d\u53ea\u6709\u4e00\u500b\u5929\u53f0<code>Location object</code>\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene09/scene09/#_6","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u5efa\u660e\u8981\u522a\u6389\u6c38\u4ec1\u81e5\u5e95\u6a94\u6848\u6642\uff0c\u93e1\u982d\u5167\u6240\u5e36\u5230\u7684\u8cc7\u8a0a\u53ca\u5176\u81e5\u5e95\u6642\u9593\uff0c\u591a\u8655\u90fd\u8207\u4e09\u90e8\u66f2\u5287\u60c5\u4e0d\u76f8\u543b\u5408\u3002</p>","tags":["access policies","global","ext::pgcrypto"]},{"location":"scenes/scene10/scene10/","title":"10 - \u6211\u60f3\u505a\u500b\u597d\u4eba","text":"","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#full-schema-preview","title":"Full schema preview","text":"Full schema preview startend migration scenes/scene09/schema.esdl<pre><code>using extension pg_trgm;\nusing extension pgcrypto;\n\nmodule default {\n    # global types\n    global current_user_id: uuid;\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Envelope {\n        name: str {\n            default:= \"\u6a19\";\n            readonly:= true\n        };\n        access policy allow_select_insert_delete\n            allow select, insert, delete;\n\n        access policy only_one_envelope_exists\n            deny insert\n            using (exists Envelope)\n            {\n                errmessage := 'Only one Envelope can be existed.'\n            };\n    }\n\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        lover: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy {\n        access policy authorized_allow_insert_update_delete\n            allow insert, update, delete\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.DCP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n            {\n                errmessage := \"PoliceRank required: PoliceRank.DCP\"\n            };\n\n        access policy authorized_allow_select\n            allow select\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n            {\n                errmessage := \"PoliceRank required: PoliceRank.SP\"\n            };\n\n    };\n\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type PoliceSpyFile extending Archive {\n        multi colleagues: PoliceSpy;\n        classified_info: str; \n\n        access policy authorized_allow_all\n            allow all\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n        {\n            errmessage := \"PoliceRank required: PoliceRank.SP\"\n        };\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    alias morse_code_of_undercover:= str_replace(\"..- -. -.. . .-. -.-. --- ...- . .-.\", \"-\", \"_\"); # undercover\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    function get_stored_encrypted_password() -&gt; str\n    #\n    # This function simulates retrieving the underlying stored encrypted password.\n    #\n    using (\n        with code:= morse_code_of_undercover,\n             module ext::pgcrypto, \n        select crypt(code, gen_salt())\n    );\n\n    function validate_password(code: str) -&gt; bool\n    #\n    # https://www.edgedb.com/docs/stdlib/pgcrypto\n    # \n    # Usage:\n    # db&gt; select validate_password(morse_code_of_undercover);\n    #\n    using (\n        with hash:= get_stored_encrypted_password(),\n             module ext::pgcrypto,\n        select crypt(code, hash) = hash\n    );\n\n    function list_police_spy_names(code: str) -&gt; json\n    #\n    # Noted that PoliceSpyFile is secured by the defined access policies.\n    # Usage:\n    # db&gt; select list_police_spy_names(morse_code_of_undercover);\n    # or \n    # wrapped in an api enpoint\n    #\n    using (\n        with police_spy_file:= PoliceSpyFile if validate_password(code)\n                               else &lt;PoliceSpyFile&gt;{},\n             names:= array_agg(police_spy_file.colleagues.name),\n        select json_object_pack({(\"names\", &lt;json&gt;(names))})\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n            test_scene09_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_scene09_alias() -&gt; bool\n    using (all({\n            (exists morse_code_of_undercover),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre> scenes/scene10/schema.esdl<pre><code>using extension pg_trgm;\nusing extension pgcrypto;\n\nmodule default {\n    # global types\n    global current_user_id: uuid;\n\n    # scalar types\n    scalar type PoliceRank extending enum&lt;Protected, Cadet, PC, SPC, SGT, SSGT, PI, IP, SIP, CIP, SP, SSP, CSP, ACP, SACP, DCP, CP&gt;;\n    scalar type GangsterRank extending enum&lt;Nobody, Leader, Boss&gt;;\n    scalar type DayOfWeek extending enum&lt;Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday&gt;;\n\n    scalar type FuzzyYear extending int64;\n    scalar type FuzzyMonth extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=12)}\n    scalar type FuzzyDay extending int64 {constraint expression on (__subject__ &gt;=1 and __subject__ &lt;=31)}\n    scalar type FuzzyHour extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=23)}\n    scalar type FuzzyMinute extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n    scalar type FuzzySecond extending int64 {constraint expression on (__subject__ &gt;=0 and __subject__ &lt;=59)}\n\n    scalar type SceneNumber extending sequence;\n    scalar type TeamTreatNumber extending sequence; \n\n    # abstract object types\n    abstract type Person {\n        required name: str;\n        nickname: str;\n        eng_name: str;\n    }\n\n    abstract type IsPolice {\n        police_rank: PoliceRank{\n            default:= PoliceRank.Cadet;\n        };\n        dept: str;\n        is_officer:= .police_rank &gt;= PoliceRank.PI;\n    }\n\n    abstract type IsGangster {\n        gangster_rank: GangsterRank {\n            default:= GangsterRank.Nobody;\n        };\n        gangster_boss: GangsterBoss;\n    }\n\n    abstract type IsSpy extending IsPolice, IsGangster;\n\n    abstract type Place {\n        required name: str {\n            delegated constraint exclusive;\n        };\n    }\n\n    abstract type Event {\n        detail: str;\n        multi who: Character;\n        multi `when`: FuzzyTime;\n        multi where: Place;\n    }\n\n    abstract type Archive;\n\n    # object types\n    type Envelope {\n        name: str {\n            default:= \"\u6a19\";\n            readonly:= true\n        };\n        access policy allow_select_insert_delete\n            allow select, insert, delete;\n\n        access policy only_one_envelope_exists\n            deny insert\n            using (exists Envelope)\n            {\n                errmessage := 'Only one Envelope can be existed.'\n            };\n    }\n\n    type Beverage {\n        required name: str;\n        produced_by: Store;\n        consumed_by: Character;\n        `when`: FuzzyTime;\n        where: Place;\n    }\n\n    type CIBTeamTreat {\n        required team_treat_number: TeamTreatNumber {\n            constraint exclusive;\n            default := sequence_next(introspect TeamTreatNumber);\n        }\n        multi colleagues: Police {\n            default:= (select Police filter .dept=\"\u5211\u4e8b\u60c5\u5831\u79d1(CIB)\");\n            readonly := true;\n            point: int64 {\n                default:= &lt;int64&gt;math::ceil(random()*10)\n            }\n        };\n        team_treat:= max(.colleagues@point) &gt;= 9\n    }\n\n    type Character extending Person {\n        classic_lines: array&lt;str&gt;;\n        multi lovers: Character;\n        multi actors: Actor;\n    }\n\n    type Actor extending Person;\n    type Police extending Character, IsPolice;\n    type Gangster extending Character, IsGangster;\n\n    type GangsterBoss extending Gangster {\n        overloaded gangster_rank: GangsterRank {\n            default:= GangsterRank.Boss;\n            constraint expression on (__subject__ = GangsterRank.Boss);\n        };\n\n        # excluding self\n        constraint expression on (__subject__ != .gangster_boss) { \n            errmessage := \"The boss can't be his/her own boss.\";\n        }\n    }\n\n    type PoliceSpy extending Character, IsSpy {\n        access policy authorized_allow_insert_update_delete\n            allow insert, update, delete\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.DCP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n            {\n                errmessage := \"PoliceRank required: PoliceRank.DCP\"\n            };\n\n        access policy authorized_allow_select\n            allow select\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n            {\n                errmessage := \"PoliceRank required: PoliceRank.SP\"\n            };\n\n    };\n\n    type GangsterSpy extending Character, IsSpy;\n\n    type Landmark extending Place;\n    type Location extending Place;\n    type Store extending Place;\n\n    type FuzzyTime {\n        fuzzy_year: FuzzyYear;\n        fuzzy_month: FuzzyMonth;\n        fuzzy_day: FuzzyDay;\n        fuzzy_hour: FuzzyHour;\n        fuzzy_minute: FuzzyMinute;\n        fuzzy_second: FuzzySecond;\n        fuzzy_dow: DayOfWeek; \n        fuzzy_fmt:= (\n            with Y:= &lt;str&gt;.fuzzy_year ?? \"YYYY\",\n                 m:= &lt;str&gt;.fuzzy_month ?? \"MM\",\n                 m:= m if len(m) &gt; 1 else \"0\" ++ m,\n                 d:= &lt;str&gt;.fuzzy_day ?? \"DD\",\n                 d:= d if len(d) &gt; 1 else \"0\" ++ d,\n                 H:= &lt;str&gt;.fuzzy_hour ?? \"HH24\",\n                 H:= H if len(H) &gt; 1 else \"0\" ++ H,\n                 M:= &lt;str&gt;.fuzzy_minute ?? \"MI\",\n                 M:= M if len(M) &gt; 1 else \"0\" ++ M,\n                 S:= &lt;str&gt;.fuzzy_second ?? \"SS\",\n                 S:= S if len(S) &gt; 1 else \"0\" ++ S,\n                 dow:= &lt;str&gt;.fuzzy_dow ?? \"ID\", \n            select Y ++ \"/\" ++ m ++ \"/\" ++ d ++ \"_\" ++\n                   H ++ \":\" ++ M ++ \":\" ++ S ++ \"_\" ++\n                   dow       \n        );\n\n        trigger fuzzy_month_day_check after insert, update for each \n        when (exists __new__.fuzzy_month and exists __new__.fuzzy_day) \n        do ( \n            assert_exists(\n                cal::to_local_date(__new__.fuzzy_year ?? 2002, __new__.fuzzy_month, __new__.fuzzy_day),\n                ) \n        );\n        constraint exclusive on (.fuzzy_fmt);\n    }\n\n    type CriminalRecord extending Archive {\n        required ref_no: str {\n            constraint exclusive;\n        };\n        required code: str;\n        multi involved: Character;\n        created_at: datetime {\n            readonly := true;\n            rewrite insert using (datetime_of_statement())\n        }\n        modified_at: datetime {\n            rewrite update using (datetime_of_statement())\n        }\n    }\n\n    type PoliceSpyFile extending Archive {\n        multi colleagues: PoliceSpy;\n        classified_info: str; \n\n        access policy authorized_allow_all\n            allow all\n            using (with police_officer:= (select IsPolice filter .id = global current_user_id),\n                select if exists police_officer then (\n                        police_officer.police_rank ?? PoliceRank.PC &gt;= PoliceRank.SP\n                    ) else (\n                        false\n                    )                                                                                                                  \n            )\n        {\n            errmessage := \"PoliceRank required: PoliceRank.SP\"\n        };\n    }\n\n    type ChenLauContact extending Event {\n        how: str;\n        overloaded who: Character {default:= {chen, lau}}\n    }\n\n    type Scene extending Event {\n        title: str;\n        remarks: str;\n        references: array&lt;tuple&lt;str, str&gt;&gt;;\n        required scene_number: SceneNumber {\n            constraint exclusive;\n            default := sequence_next(introspect SceneNumber);\n        }\n        index on (.scene_number);\n    }\n\n    # alias\n    alias hon:= assert_exists(assert_single((select GangsterBoss filter .name = \"\u97d3\u741b\")));\n    alias lau:= assert_exists(assert_single((select GangsterSpy filter .name = \"\u5289\u5efa\u660e\")));\n    alias chen:= assert_exists(assert_single((select PoliceSpy filter .name = \"\u9673\u6c38\u4ec1\")));\n    alias wong:= assert_exists(assert_single((select Police filter .name = \"\u9ec3\u5fd7\u8aa0\")));\n\n    alias police_station:= assert_exists(assert_single((select Landmark filter .name=\"\u8b66\u5bdf\u5c40\")));\n\n    alias year_1992:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1992 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_1994:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 1994 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n    alias year_2002:= assert_exists(assert_single((select FuzzyTime \n                                        filter .fuzzy_year = 2002 \n                                        and .fuzzy_month ?= &lt;FuzzyMonth&gt;{}\n                                        and .fuzzy_day ?= &lt;FuzzyDay&gt;{}\n                                        and .fuzzy_hour ?= &lt;FuzzyHour&gt;{}\n                                        and .fuzzy_minute ?= &lt;FuzzyMinute&gt;{}\n                                        and .fuzzy_second ?= &lt;FuzzySecond&gt;{}   \n                                        and .fuzzy_dow ?= &lt;DayOfWeek&gt;{}\n                    ))\n    );\n\n    alias morse_code_of_undercover:= str_replace(\"..- -. -.. . .-. -.-. --- ...- . .-.\", \"-\", \"_\"); # undercover\n\n    # functions\n    function is_hi_fi_store_open(dow: DayOfWeek, visit_hour: int64) -&gt; bool\n    #\n    # The store will open 11:00~22:00 everyday, except:\n    # will close on Wednesdays.\n    # will close during 13:00~14:00 and 19:00~20:00 everyday.\n    #\n    using (\n        with open_hours:= multirange([range(11, 13), range(14, 19), range(20, 22)])\n        select dow != DayOfWeek.Wednesday and contains(open_hours, visit_hour)\n    );\n\n    function get_stored_encrypted_password() -&gt; str\n    #\n    # This function simulates retrieving the underlying stored encrypted password.\n    #\n    using (\n        with code:= morse_code_of_undercover,\n             module ext::pgcrypto, \n        select crypt(code, gen_salt())\n    );\n\n    function validate_password(code: str) -&gt; bool\n    #\n    # https://www.edgedb.com/docs/stdlib/pgcrypto\n    # \n    # Usage:\n    # db&gt; select validate_password(morse_code_of_undercover);\n    #\n    using (\n        with hash:= get_stored_encrypted_password(),\n             module ext::pgcrypto,\n        select crypt(code, hash) = hash\n    );\n\n    function list_police_spy_names(code: str) -&gt; json\n    #\n    # Noted that PoliceSpyFile is secured by the defined access policies.\n    # Usage:\n    # db&gt; select list_police_spy_names(morse_code_of_undercover);\n    # or \n    # wrapped in an api enpoint\n    #\n    using (\n        with police_spy_file:= PoliceSpyFile if validate_password(code)\n                               else &lt;PoliceSpyFile&gt;{},\n             names:= array_agg(police_spy_file.colleagues.name),\n        select json_object_pack({(\"names\", &lt;json&gt;(names))})\n    );\n\n    # tests\n    function test_alias() -&gt; bool\n    using (all({\n            test_scene01_alias(),\n            test_scene02_alias(),\n            test_scene03_alias(),\n            test_scene05_alias(),\n            test_scene09_alias(),\n        })\n    );\n\n    function test_scene01_alias() -&gt; bool\n    using (all({\n            (exists hon),          \n            (exists lau),\n            (exists year_1992),   \n        })\n    );\n\n    function test_scene02_alias() -&gt; bool\n    using (all({\n            (exists chen),          \n            (exists wong), \n        })\n    );\n\n    function test_scene03_alias() -&gt; bool\n    using (all({\n            (exists year_1994),   \n            (exists police_station),   \n        })\n    );\n\n    function test_scene05_alias() -&gt; bool\n    using (all({\n            (exists year_1994),\n        })\n    );\n\n    function test_scene09_alias() -&gt; bool\n    using (all({\n            (exists morse_code_of_undercover),\n        })\n    );\n\n    function test_hi_fi_store_open() -&gt; bool\n    using (all({\n          is_hi_fi_store_open(DayOfWeek.Monday, 12),\n          is_hi_fi_store_open(DayOfWeek.Friday, 15),\n          is_hi_fi_store_open(DayOfWeek.Saturday, 21),\n        })\n    );\n\n    function test_hi_fi_store_close() -&gt; bool \n    using (not all({\n          is_hi_fi_store_open(DayOfWeek.Wednesday, 12),\n          is_hi_fi_store_open(DayOfWeek.Thursday, 13),\n          is_hi_fi_store_open(DayOfWeek.Sunday, 19),\n        })\n    );\n\n}\n</code></pre>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#_1","title":"\u5287\u60c5\u63d0\u8981","text":"\u6b64\u5287\u7167\u5f15\u7528\u81eaIMDb-\u7121\u9593\u9053 <p>\u5efa\u660e\u8207\u6c38\u4ec1\u65bc\u5929\u53f0\u76f8\u898b\uff0c\u4e0d\u6599\u570b\u5e73\u4e5f\u8d95\u5230\u3002\u6c38\u4ec1\u4e8b\u5148\u5df2\u5831\u8b66\uff0c\u60f3\u6301\u69cd\u58d3\u8457\u5efa\u660e\u5230\u6a13\u4e0b\u4ea4\u4e88\u8b66\u65b9\u3002\u4e0d\u6599\uff0c\u65bc\u9032\u96fb\u68af\u6642\u88ab\u570b\u5e73\u64ca\u6583\uff0c\u539f\u4f86\u4ed6\u4e5f\u662f\u97d3\u741b\u5b89\u88dd\u65bc\u8b66\u968a\u7684\u81e5\u5e95\u3002\u570b\u5e73\u5411\u5efa\u660e\u8868\u660e\u8eab\u4efd\uff0c\u5e0c\u671b\u4e4b\u5f8c\u4e00\u8d77\u5408\u4f5c\u3002\u4f46\u6700\u7d42\u5efa\u660e\u9078\u64c7\u65bc\u96fb\u68af\u4e2d\u6bba\u6b7b\u570b\u5e73\uff0c\u4e26\u71df\u9020\u6c38\u4ec1\u8207\u570b\u5e73\u96d9\u96d9\u6b7b\u65bc\u69cd\u6230\u7684\u5047\u8c61\u3002\u4e8b\u5f8c\uff0c\u5fc3\u5152\u65bc\u8449\u6821\u9577\u907a\u7269\u4e2d\u767c\u73fe\u6c38\u4ec1\u81e5\u5e95\u6a94\u6848\uff0c\u6062\u5fa9\u5176\u8b66\u5bdf\u8eab\u4efd\uff0c\u4e26\u7531\u5efa\u660e\u4ee3\u8868\u884c\u79ae\u3002</p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#_2","title":"\u91cd\u8981\u63d0\u9192","text":"<p><code>global</code> <code>current_user_id</code></p> <p>\u9700\u8981\u7279\u5225\u6ce8\u610f<code>global</code> <code>current_user_id</code>\u6240\u5c6c<code>object</code>\u7684<code>PoliceRank</code>\u662f\u5426\u5408\u4e4e<code>access policy</code>!</p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#edgeql-query","title":"EdgeQL query","text":"","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#global-current_user_id","title":"\u8a2d\u5b9a<code>global</code> <code>current_user_id</code>","text":"<p>\u7531\u65bc\u672c\u5834\u666f\u9700\u8981\u591a\u6b21\u64cd\u4f5c<code>PoliceSpy object</code>\uff0c\u6211\u5011\u53ef\u4ee5<code>insert</code>\u4e00\u500b<code>PoliceRank</code>\u70ba<code>DCP</code>\u7684<code>Police object</code>\uff0c\u4e26\u5c07\u5176<code>id</code>\u6307\u5b9a\u7d66<code>global current_user_id</code>\u3002 scenes/scene10/query.edgeql<pre><code>insert Police {name:= \"test_DCP\", police_rank:=PoliceRank.DCP};\nset global current_user_id:= (select Police filter .police_rank=PoliceRank.DCP limit 1).id;\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#update-chen","title":"<code>update</code> <code>chen</code>","text":"<p>\u5c07\u6c38\u4ec1\u7684\u7d93\u5178\u53f0\u8a5e\u52a0\u5165\u5230<code>classic_lines</code> <code>property</code>\u4e2d\u3002 scenes/scene10/query.edgeql<pre><code>update chen \nset {\n    classic_lines := .classic_lines ++ [\"\u5c0d\u5514\u4f4f\uff0c\u6211\u4fc2\u5dee\u4eba\u3002\"],\n};\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#update-lau","title":"<code>update</code> <code>lau</code>","text":"<p>\u5c07\u5efa\u660e\u7684\u7d93\u5178\u53f0\u8a5e\u52a0\u5165\u5230<code>classic_lines</code> <code>property</code>\u4e2d\u3002 scenes/scene10/query.edgeql<pre><code>update lau \nset {\n    classic_lines := [\"\u6211\u4ee5\u524d\u7121\u5f97\u63c0\uff0c\u6211\u800c\u5bb6\u60f3\u505a\u597d\u4eba\u3002\"],\n};\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#insert-chenlaucontact","title":"<code>insert</code> <code>ChenLauContact</code>","text":"<p>\u9019\u662f\u672c\u5287\u4e2d\uff0c\u5169\u4eba\u6700\u5f8c\u4e00\u6b21\u806f\u7d61\u4e86\u3002 scenes/scene10/query.edgeql<pre><code>insert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u5efa\u660e\u8207\u6c38\u4ec1\u76f8\u7d04\u65bc\u5929\u53f0\u4e0a\u8ac7\u5224\",\n    `when`:=  (insert FuzzyTime {\n                fuzzy_year:=2002,\n                fuzzy_month:=11,\n                fuzzy_day:=27,\n                fuzzy_hour:=15,\n                fuzzy_minute:=0,\n                fuzzy_second:=0,\n            }),\n    where:= (select Location filter .name=\"\u5929\u53f0\"),\n};\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#insert","title":"<code>insert</code>\u771f\uff0e\u6797\u570b\u5e73","text":"<p>\u771f\u6c92\u60f3\u5230\uff0c\u570b\u5e73\u7adf\u7136\u4e5f\u662f\u97d3\u741b\u7684\u81e5\u5e95\uff0c\u7b2c\u4e00\u6b21\u770b\u5230\u9019\u6bb5\u6642\uff0c\u771f\u662f\u9a5a\u8a1d\u4e0d\u5df2\uff01</p> <p>\u53ef\u662f\u9019\u9ebc\u4e00\u4f86\uff0c\u570b\u5e73\u5c31\u4e0d\u61c9\u8a72\u662f<code>Police</code>\u800c\u662f<code>PoliceSpy</code>\u56c9\uff1f\u6211\u5011\u61c9\u8a72\u522a\u6389<code>\u570b\u5e73 Police object</code>\uff0c\u4e26\u65b0\u589e\u4e00\u500b<code>\u570b\u5e73 PoliceSpy object</code>\u55ce\uff1f</p> <p>\u9019\u6a23\u7684\u8a71\uff0c\u4e4b\u524d<code>\u570b\u5e73 Police object</code>\u7684\u76f8\u95dc\u8a18\u9304\u90fd\u6703\u88ab\u522a\u9664\uff08\u4f8b\u5982\uff1a<code>CIBTeamTreat</code>\uff09\uff0c\u9019\u6a23\u5408\u7406\u55ce\uff1f\u53c8\u6216\u8005\u6211\u5011\u61c9\u8a72\u91cd\u65b0\u53bb\u78ba\u8a8d\u6240\u6709\u8ddf<code>\u570b\u5e73 Police object</code>\u6709\u95dc\u7684<code>object</code>\u5c07\u5176\u66ff\u63db\u70ba<code>\u570b\u5e73 PoliceSpy object</code>\uff1f</p> <p>\u8a72\u600e\u9ebc\u505a\u5176\u5be6\u6c92\u6709\u6a19\u6e96\u7684\u7b54\u6848\uff0c\u4e0d\u904e\u4e00\u500b\u6bd4\u8f03\u5e38\u898b\u7684\u65b9\u6cd5\u662f\u4f7f\u7528<code>soft delete</code>\u3002\u4f7f\u7528\u4e00\u500b\u985e\u4f3c<code>is_active</code>\u7684<code>property</code>\u4f86\u8868\u9054\u8a72<code>object</code>\u7684\u5b58\u53d6\u72c0\u614b\uff0c\u800c\u4e0d\u771f\u6b63\u5c07\u5176\u5f9e\u8cc7\u6599\u5eab\u4e2d\u522a\u9664\u3002\u7562\u7adf\u5728\u6700\u5f8c\u4e00\u5e55\u4e4b\u524d\uff0c\u6211\u5011\u7684\u78ba\u4e0d\u77e5\u9053\u570b\u5e73\u662f\u81e5\u5e95\uff0c<code>\u570b\u5e73 Police object</code>\u662f\u4e00\u500b\u5408\u9069\u7684\u8868\u9054\u3002</p> <p>\u6700\u5f8c\u6211\u5011<code>insert</code>\u570b\u5e73\u7684<code>PoliceSpy object</code>\u5982\u4e0b\uff1a scenes/scene10/query.edgeql<pre><code>with b:= assert_single((select Police filter .name=\"\u6797\u570b\u5e73\"))\ninsert PoliceSpy {\n      name:= b.name,\n      nickname:= b.nickname,\n      police_rank:= b.police_rank,\n      gangster_boss:= hon,\n      dept:= b.dept,\n      actors:= b.actors\n};\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#_3","title":"\u611f\u60c5\u7dda","text":"<p>\u5728\u7dca\u6e4a\u7684\u81e5\u5e95\u5c0d\u6c7a\u4e2d\uff0c\u5176\u5be6\u5c0e\u6f14\u8207\u7de8\u5287\u4e5f\u7a7f\u63d2\u4e86\u4e00\u4e9b\u611f\u60c5\u6232\u4efd\uff0c\u8b93\u6211\u5011\u4e00\u8d77\u4f86\u770b\u770b\u5427\u3002</p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#mary","title":"Mary &amp; \u5efa\u660e","text":"<p>\u6211\u5011<code>insert</code>Mary\uff0c\u4e26\u6307\u5b9a\u5176\u70ba\u5efa\u660e\u7684<code>lover</code>\u3002 scenes/scene10/query.edgeql<pre><code>insert Character {\n    name:= \"Mary\",\n    eng_name:= \"Mary\",\n    lover:= lau,\n    actors:= (insert Actor{\n        name:= \"\u912d\u79c0\u6587\",\n        eng_name:= \"Sammi\",\n    }),\n};\n\nupdate lau \nset {\n    lover:= assert_single((select Character filter .name=\"Mary\")),\n};\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#_4","title":"\u5fc3\u5152 &amp; \u6c38\u4ec1","text":"<p>\u6211\u5011<code>insert</code>\u674e\u5fc3\u5152\uff0c\u4e26\u6307\u5b9a\u5176\u70ba\u6c38\u4ec1\u7684<code>lover</code>\u3002 scenes/scene10/query.edgeql<pre><code>insert Character {\n    name:= \"\u674e\u5fc3\u5152\",\n    lover:= chen,\n    actors:= (insert Actor{\n        name:= \"\u9673\u6167\u7433\",\n        eng_name:= \"Kelly\",\n    }),\n};\n\nupdate chen \nset {\n    lover:= assert_single((select Character filter .name=\"\u674e\u5fc3\u5152\")),\n};\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#may","title":"May &amp; \u6c38\u4ec1","text":"<p>\u73fe\u5728\u6211\u5011\u9762\u81e8\u4e86\u4e00\u500b\u6709\u8da3\u7684\u60c5\u5f62\uff0c\u6c38\u4ec1\u770b\u8d77\u4f86\u6709\u5169\u500b<code>lover</code>\uff0c\u4f46\u662f\u6211\u5011\u7684\u521d\u59cbschema\u53ea\u8a2d\u8a08\u4e86\u4e00\u500b<code>single link</code>\u7684<code>lover</code>\u3002\u6211\u5011\u73fe\u5728\u9700\u8981\u5c07\u9019\u500b<code>single link</code>\u7684<code>lover</code>\u8f49\u8b8a\u70ba<code>multi link</code>\u7684<code>lovers</code>\u3002\u9019\u5176\u4e2d\u5176\u5be6\u5305\u542b\u4e86\u5169\u6b65\u7684\u8b8a\u66f4\uff0c\u7b2c\u4e00\u6b65\u662f\u5c07<code>lover</code>\u91cd\u65b0\u547d\u540d\u70ba<code>lovers</code>\uff0c\u7b2c\u4e8c\u6b65\u662f\u5c07<code>lovers</code>\u7531<code>single link</code>\u6539\u70ba<code>multi link</code>\u3002</p> <p>\u60a8\u53ef\u4ee5\u9078\u64c7\u505a\u5169\u6b21<code>migration</code>\uff0c\u4f46\u5176\u5be6EdgeDB\u76f8\u7576\u8070\u660e\uff0c\u5927\u90e8\u4efd\u6642\u9593\u80fd\u5920\u731c\u4e2d\u6211\u5011\u7684\u610f\u5716\uff0c\u8b93\u6211\u5011\u8a66\u8a66\u7528\u4e00\u6b65\u7684<code>migration</code>\u4f86\u5b8c\u6210\u9019\u500b\u8b8a\u5316\u5427\u3002\u6211\u5011\u8b8a\u66f4<code>Character</code>\u5982\u4e0b\uff1a scenes/scene10/schema.esdl<pre><code>type Character extending Person {\n    classic_lines: array&lt;str&gt;;\n    multi lovers: Character;\n    multi actors: Actor;\n}\n</code></pre> \u63a5\u8457\u65bc\u547d\u4ee4\u5217\u57f7\u884c<code>edgedb migration create</code>\u3002</p> <p>make end migration here\uff08<code>scenes/scene10/schema.esdl</code>\uff09</p> <p><pre><code>did you drop link 'lover' of object type 'default::Character'? [y,n,l,c,b,s,q,?]\n&gt; n\ndid you rename link 'lover' of object type 'default::Character' to 'lovers'? [y,n,l,c,b,s,q,?]\n&gt; y\ndid you convert link 'lovers' of object type 'default::Character' to 'multi' cardinality? [y,n,l,c,b,s,q,?]\n&gt; y\n</code></pre> \u7559\u610f\u7b2c\u4e00\u500b\u9078\u9805\u6211\u5011\u9078\u64c7\u4e86<code>n</code>\uff0c\u65bc\u662fEdgeDB\u8a66\u8457\u8a62\u554f\u6211\u5011\u3002\u5982\u679c\u4e0d\u662f\u8981<code>drop</code>\u7684\u8a71\uff0c\u662f\u5426\u662f\u8981<code>rename</code>\u3002\u5982\u679c\u662f\u8981<code>rename</code>\u7684\u8a71\uff0c\u662f\u5426\u7531<code>single link</code>\u6539\u70ba<code>multi link</code>\u3002\u5982\u6b64\u4e00\u4f86\uff0c\u6211\u5011\u539f\u4f86\u65bc<code>lover</code>\u4e2d\u6240\u6307\u5411\u7684<code>object</code>\uff0c\u5728\u65bc\u547d\u4ee4\u5217\u57f7\u884c<code>edgedb migrate</code>\u5f8c\u4e5f\u6703\u4e00\u4f75\u5e36\u5230<code>lovers</code>\u3002</p> <p>\u5982\u679c\u7b2c\u4e00\u500b\u9078\u9805\u6211\u5011\u9078\u64c7\u4e86<code>y</code>\uff0cEdgeDB\u6703\u8a8d\u70ba\u6211\u5011\u60f3\u5148<code>drop</code>\u6389<code>lover</code>\uff0c\u7136\u5019\u52a0\u4e0a\u4e00\u500b<code>multi link</code>\u7684<code>lovers</code>\u3002\u5982\u6b64\u4e00\u4f86<code>lovers</code>\u5c07\u6703\u662f\u7a7a<code>set</code>\uff0c\u6211\u5011\u9700\u8981\u5728\u65bc\u547d\u4ee4\u5217\u57f7\u884c\u5b8c<code>edgedb migrate</code>\u5f8c\uff0c\u624b\u52d5\u5c07\u539f\u4f86<code>lover</code>\u6240\u6307\u5411\u7684<code>object</code>\u52a0\u9032\u4f86\u3002</p> <p>\u7531\u9019\u500b\u4f8b\u5b50\u53ef\u4ee5\u77e5\u9053\uff0c<code>migration</code>\u6642\u4e0d\u4e00\u5b9a\u53ea\u80fd\u9078\u64c7<code>y</code>\uff0c\u61c9\u8a72\u8996\u7576\u4e0b\u9700\u6c42\u4f86\u6c7a\u5b9a\u3002</p> <p>\u6700\u5f8c\u6211\u5011<code>insert</code>May\uff0c\u4e26\u5c07May\u52a0\u5165\u5230<code>chen</code>\u7684<code>lovers</code>\u3002 scenes/scene10/query.edgeql<pre><code># end migration needs to be applied before running this query\ninsert Character{\n    name:= \"May\",\n    eng_name:= \"May\",\n    lover:= chen,\n    actors:= (insert Actor{\n        name:= \"\u856d\u4e9e\u8ed2\",\n        eng_name:= \"Elva\",\n    }),\n};\n\nupdate chen \nset {\n    lovers+= assert_single((select Character filter .name=\"May\")),\n};\n</code></pre> \u6211\u5011\u53ef\u4ee5\u78ba\u8a8d<code>chen</code>\u7684<code>lovers</code>\u5167\u78ba\u5be6\u6709\u5fc3\u5152\u53caMay\u3002 scenes/scene10/query.edgeql<pre><code>select chen.lovers.name;\n</code></pre> <pre><code>{'\u674e\u5fc3\u5152', 'May'}\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#detached","title":"\u65b7\u6368\u96e2\u8207<code>detached</code>","text":"<p>\u5047\u8a2d\u6c38\u4ec1\u89ba\u5f97\u81ea\u5df1\u6709\u592a\u591a<code>lovers</code>\uff0c\u60f3\u5229\u7528<code>update</code>\u5e6b\u4ed6\u65b7\u6368\u96e2\uff0c\u4f46\u537b\u767c\u73fe\u6709\u6642\u5019<code>lovers</code>\u6703\u88ab\u8a2d\u70ba\u7a7a<code>set</code>\uff0c\u4ed6\u767e\u601d\u4e0d\u5f97\u5176\u89e3\uff0c\u8b93\u6211\u5011\u4e00\u8d77\u4f86\u770b\u770b\u6c38\u4ec1\u9047\u5230\u7684\u60c5\u6cc1\u3002\u6c38\u4ec1\u4e00\u5171\u5617\u8a66\u4e86\u4e0b\u5217\u56db\u7a2equery\uff0c\u53ea\u6709\u7b2c\u4e00\u7a2e\u6703\u5c07<code>lovers</code>\u8a2d\u70ba\u7a7a<code>set</code>\uff0c\u5176\u5b83\u4e09\u7a2e\u90fd\u53ef\u4ee5\u6210\u529f\u5c07<code>lovers</code>\u8a2d\u5b9a\u70ba\u5fc3\u5152\u4e00\u4eba\uff1a</p> query1query2query3query4 scenes/scene10/query.edgeql<pre><code>update Character filter .name=\"\u9673\u6c38\u4ec1\"\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n</code></pre> scenes/scene10/query.edgeql<pre><code>update chen\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n</code></pre> scenes/scene10/query.edgeql<pre><code>with ch:= (select Character filter .name=\"\u9673\u6c38\u4ec1\")\nupdate ch\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n</code></pre> scenes/scene10/query.edgeql<pre><code>update PoliceSpy filter .name=\"\u9673\u6c38\u4ec1\"\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n</code></pre> <p>\u539f\u4f86\u554f\u984c\u51fa\u5728query1\u4e2d\uff0c\u6211\u5011\u5728<code>update Character</code>\u7684<code>set\uff08\u95dc\u9375\u5b57\uff09</code>\u5167\u518d\u6b21\u4f7f\u7528\u4e86<code>select Character</code>\u3002\u9019\u500b<code>Character</code>\u5c07\u6703\u662f\u5916\u9762<code>update Character filter .name=\"\u9673\u6c38\u4ec1\"</code>\u8a9e\u6cd5\u4e2d\u7684<code>set</code>\uff0c\u800c\u4e0d\u662f<code>Character</code>\u9019\u500b<code>object type</code>\u3002\u7576\u60f3\u8981\u5728\u5404\u7a2etop-level EdgeQL statements\uff08<code>select</code>, <code>insert</code>, <code>update</code>\u53ca<code>delete</code>\uff09\u5167\u518d\u6b21\u5f15\u7528\u540c\u4e00\u500b<code>object type</code>\u6642\uff0c\u9700\u8981\u4f7f\u7528<code>detached</code>\uff0c\u4f8b\u5982\uff1a</p> <p>scenes/scene10/query.edgeql<pre><code>update Character filter .name=\"\u9673\u6c38\u4ec1\"\nset {lovers:= (select detached Character filter .name=\"\u674e\u5fc3\u5152\")};\n</code></pre> \u5982\u679c\u8981\u60f3\u907f\u514d\u4f7f\u7528<code>detached</code>\u7684\u8a71\uff0c\u53ef\u4ee5\uff1a</p> <ul> <li>\u5982query2\uff0c\u4f7f\u7528<code>alias</code>\uff0c\u5982<code>chen</code> \u3002</li> <li>\u5982query3\uff0c\u65bc<code>with</code>\u5340\u584a\u5167\uff0c\u66ab\u6642\u547d\u540d\u4e00\u500b\u8b8a\u6578\uff0c\u5982<code>ch</code>\u3002</li> <li>\u5982query4\uff0c\u65bc<code>update</code>\u6642\u6539\u4f7f\u7528\u5176\u5b83<code>object type</code>\uff0c\u5982<code>PoliceSpy</code>\u3002</li> </ul>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#insertscene","title":"<code>insert</code>\u6b64\u5834\u666f\u7684<code>Scene</code>","text":"scenes/scene10/query.edgeql<pre><code>insert Scene {\n      title:= \"\u6211\u60f3\u505a\u500b\u597d\u4eba\", \n      detail:= \"\u5efa\u660e\u8207\u6c38\u4ec1\u65bc\u5929\u53f0\u76f8\u898b\uff0c\u4e0d\u6599\u570b\u5e73\u4e5f\u8d95\u5230\u3002\u6c38\u4ec1\u4e8b\u5148\u5df2\u5831\u8b66\uff0c\u60f3\u6301\u69cd\u58d3\u8457\u5efa\u660e\" ++\n               \"\u5230\u6a13\u4e0b\u4ea4\u4e88\u8b66\u65b9\u3002\u4e0d\u6599\uff0c\u65bc\u9032\u96fb\u68af\u6642\u88ab\u570b\u5e73\u64ca\u6583\uff0c\u539f\u4f86\u4ed6\u4e5f\u662f\u97d3\u741b\u5b89\u88dd\u65bc\u8b66\" ++ \n               \"\u968a\u7684\u81e5\u5e95\u3002\u570b\u5e73\u5411\u5efa\u660e\u8868\u660e\u8eab\u4efd\uff0c\u5e0c\u671b\u4e4b\u5f8c\u4e00\u8d77\u5408\u4f5c\u3002\u4f46\u6700\u7d42\u5efa\u660e\u9078\u64c7\u65bc\u96fb\u68af\" ++\n               \"\u4e2d\u6bba\u6b7b\u570b\u5e73\uff0c\u4e26\u71df\u9020\u6c38\u4ec1\u8207\u570b\u5e73\u96d9\u96d9\u6b7b\u65bc\u69cd\u6230\u7684\u5047\u8c61\u3002\u4e8b\u5f8c\uff0c\u5fc3\u5152\u65bc\u8449\u6821\u9577\u907a\" ++\n               \"\u7269\u4e2d\u767c\u73fe\u6c38\u4ec1\u81e5\u5e95\u6a94\u6848\uff0c\u6062\u5fa9\u5176\u8b66\u5bdf\u8eab\u4efd\uff0c\u4e26\u7531\u5efa\u660e\u4ee3\u8868\u884c\u79ae\u3002\",\n      who:=  (select Police filter .name=\"\u6797\u570b\u5e73\") union \n             (select PoliceSpy filter .name=\"\u6797\u570b\u5e73\") union\n             {chen, lau},\n      `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/27_15:00:00_ID\")),\n      where:= (select Location filter .name=\"\u5929\u53f0\"),    \n};\n</code></pre>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#uuidobject","title":"<code>uuid</code>\u9078\u53d6<code>object</code>\u7684\u6280\u5de7","text":"<p>\u5047\u8a2d\u6211\u5011\u60f3\u9078\u64c7\u4e00\u958b\u59cb\u5efa\u7acb\u7684<code>PoliceRank</code>\u70ba<code>DCP</code>\u7684<code>Police object</code>\uff0c\u8a72\u600e\u9ebc\u5bebquery\u5462\uff1f \u6700\u7c21\u55ae\u7684\u65b9\u6cd5\u61c9\u8a72\u662f<code>filter .name=\"test_DCP\"</code>\u4e86\u5427\uff0c\u50cf\u662f\uff1a scenes/scene10/query.edgeql<pre><code>select Police filter .name=\"test_DCP\";\n</code></pre> \u4f46\u662f\u5047\u8a2d\u6211\u5011\u53ea\u6709\u8a72<code>object</code> <code>str</code>\u578b\u614b\u7684<code>id</code>\u7684\u8a71\uff0c\u53c8\u8a72\u600e\u9ebc\u9078\u53d6\u5462\uff1f\u60a8\u53ef\u80fd\u6703\u5beb\u51fa\u4ee5\u4e0bquery\uff1a scenes/scene10/query.edgeql<pre><code>with pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect Police filter .id=&lt;uuid&gt;pid;\n</code></pre> \u4f46\u662f\u9664\u4e86\u9019\u7a2e\u7d93\u5178\u7684\u5beb\u6cd5\u5916\uff0cEdgeDB\u9084\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5beb\u6cd5\uff1a scenes/scene10/query.edgeql<pre><code>with pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect &lt;Police&gt;&lt;uuid&gt;pid;\n</code></pre> <code>pid</code>\u6b64\u6642\u70ba<code>str</code>\u578b\u614b\u7684<code>uuid</code>\uff0c\u6211\u5011\u53ef\u4ee5\u5728\u524d\u9762\u4f7f\u7528<code>&lt;Police&gt;&lt;uuid&gt;</code>\u4f86<code>casting</code>\u800c\u53d6\u5f97<code>object</code>\u3002</p> Shape construction <p>\u7576\u60f3\u8981\u4f7f\u7528\u4e0a\u8ff0\u5beb\u6cd5\u4e26\u642d\u914d<code>shape construction</code>\u6642\uff0c\u9700\u52a0\u4e0a<code>()</code>\uff0c\u4f8b\u5982\uff1a \u6b63\u78ba\u8a9e\u6cd5<pre><code># \u2705\nwith pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect (&lt;Police&gt;&lt;uuid&gt;pid) {*};\n</code></pre> \u800c\u4e0b\u9762\u9019\u5169\u7a2e\u5beb\u6cd5\u662f\u4e0d\u88ab\u5141\u8a31\u7684\uff1a</p> \u932f\u8aa4\u8a9e\u6cd51\u932f\u8aa4\u8a9e\u6cd52 <pre><code># \u274c\nwith pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect &lt;Police&gt;&lt;uuid&gt;pid {*};\n</code></pre> <pre><code># \u274c\nwith pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect {*} &lt;Police&gt;&lt;uuid&gt;pid;\n</code></pre> <p>\u53e6\u5916\uff0c\u5982\u679c\u60a8\u5df2\u7d93\u6709\u4e00\u500b<code>id</code> <code>set</code>\uff0c\u4e5f\u53ef\u4ee5\u9032\u884c\u985e\u4f3c\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a scenes/scene10/query.edgeql<pre><code>with pid:= (select Police filter .name=\"test_DCP\").id,\nselect &lt;Police&gt;pid;\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#_5","title":"\u6700\u5f8c\u6e05\u7406","text":"<p>\u8b93\u6211\u5011\u7528\u4e0a\u8ff0\u6280\u5de7\u4f86\u522a\u9664\u4e00\u958b\u59cb\u5efa\u7acb\u7684<code>PoliceRank</code>\u70ba<code>DCP</code>\u7684<code>Police object</code>\uff0c\u4e26<code>reset</code> <code>global</code> <code>current_user_id</code>\u3002 scenes/scene10/query.edgeql<pre><code>with pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\ndelete &lt;Police&gt;&lt;uuid&gt;pid;\n\nreset global current_user_id;\n</code></pre></p>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#query-review","title":"Query review","text":"Query review scenes/scene10/query.edgeql<pre><code>insert Police {name:= \"test_DCP\", police_rank:=PoliceRank.DCP};\nset global current_user_id:= (select Police filter .police_rank=PoliceRank.DCP limit 1).id;\n\nupdate chen \nset {\n    classic_lines := .classic_lines ++ [\"\u5c0d\u5514\u4f4f\uff0c\u6211\u4fc2\u5dee\u4eba\u3002\"],\n};\n\nupdate lau \nset {\n    classic_lines := [\"\u6211\u4ee5\u524d\u7121\u5f97\u63c0\uff0c\u6211\u800c\u5bb6\u60f3\u505a\u597d\u4eba\u3002\"],\n};\n\nwith b:= assert_single((select Police filter .name=\"\u6797\u570b\u5e73\"))\ninsert PoliceSpy {\n      name:= b.name,\n      nickname:= b.nickname,\n      police_rank:= b.police_rank,\n      gangster_boss:= hon,\n      dept:= b.dept,\n      actors:= b.actors\n};\n\n\ninsert ChenLauContact {\n    how:= \"\u9762\u5c0d\u9762\",\n    detail:= \"\u5efa\u660e\u8207\u6c38\u4ec1\u76f8\u7d04\u65bc\u5929\u53f0\u4e0a\u8ac7\u5224\",\n    `when`:=  (insert FuzzyTime {\n                fuzzy_year:=2002,\n                fuzzy_month:=11,\n                fuzzy_day:=27,\n                fuzzy_hour:=15,\n                fuzzy_minute:=0,\n                fuzzy_second:=0,\n            }),\n    where:= (select Location filter .name=\"\u5929\u53f0\"),\n};\n\n\n\ninsert Character {\n    name:= \"Mary\",\n    eng_name:= \"Mary\",\n    lover:= lau,\n    actors:= (insert Actor{\n        name:= \"\u912d\u79c0\u6587\",\n        eng_name:= \"Sammi\",\n    }),\n};\n\n\nupdate lau \nset {\n    lover:= assert_single((select Character filter .name=\"Mary\")),\n};\n\ninsert Character {\n    name:= \"\u674e\u5fc3\u5152\",\n    lover:= chen,\n    actors:= (insert Actor{\n        name:= \"\u9673\u6167\u7433\",\n        eng_name:= \"Kelly\",\n    }),\n};\n\nupdate chen \nset {\n    lover:= assert_single((select Character filter .name=\"\u674e\u5fc3\u5152\")),\n};\n\n\ninsert Character{\n    name:= \"May\",\n    eng_name:= \"May\",\n    lover:= chen,\n    actors:= (insert Actor{\n        name:= \"\u856d\u4e9e\u8ed2\",\n        eng_name:= \"Elva\",\n    }),\n};\n\nupdate chen \nset {\n    lovers+= assert_single((select Character filter .name=\"May\")),\n};\n\nselect chen.lovers.name;\n\nupdate Character filter .name=\"\u9673\u6c38\u4ec1\"\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n\nupdate chen\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n\nwith ch:= (select Character filter .name=\"\u9673\u6c38\u4ec1\")\nupdate ch\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n\nupdate PoliceSpy filter .name=\"\u9673\u6c38\u4ec1\"\nset {lovers:= (select Character filter .name=\"\u674e\u5fc3\u5152\")};\n\nupdate Character filter .name=\"\u9673\u6c38\u4ec1\"\nset {lovers:= (select detached Character filter .name=\"\u674e\u5fc3\u5152\")};\n\n\ninsert Scene {\n      title:= \"\u6211\u60f3\u505a\u500b\u597d\u4eba\", \n      detail:= \"\u5efa\u660e\u8207\u6c38\u4ec1\u65bc\u5929\u53f0\u76f8\u898b\uff0c\u4e0d\u6599\u570b\u5e73\u4e5f\u8d95\u5230\u3002\u6c38\u4ec1\u4e8b\u5148\u5df2\u5831\u8b66\uff0c\u60f3\u6301\u69cd\u58d3\u8457\u5efa\u660e\" ++\n               \"\u5230\u6a13\u4e0b\u4ea4\u4e88\u8b66\u65b9\u3002\u4e0d\u6599\uff0c\u65bc\u9032\u96fb\u68af\u6642\u88ab\u570b\u5e73\u64ca\u6583\uff0c\u539f\u4f86\u4ed6\u4e5f\u662f\u97d3\u741b\u5b89\u88dd\u65bc\u8b66\" ++ \n               \"\u968a\u7684\u81e5\u5e95\u3002\u570b\u5e73\u5411\u5efa\u660e\u8868\u660e\u8eab\u4efd\uff0c\u5e0c\u671b\u4e4b\u5f8c\u4e00\u8d77\u5408\u4f5c\u3002\u4f46\u6700\u7d42\u5efa\u660e\u9078\u64c7\u65bc\u96fb\u68af\" ++\n               \"\u4e2d\u6bba\u6b7b\u570b\u5e73\uff0c\u4e26\u71df\u9020\u6c38\u4ec1\u8207\u570b\u5e73\u96d9\u96d9\u6b7b\u65bc\u69cd\u6230\u7684\u5047\u8c61\u3002\u4e8b\u5f8c\uff0c\u5fc3\u5152\u65bc\u8449\u6821\u9577\u907a\" ++\n               \"\u7269\u4e2d\u767c\u73fe\u6c38\u4ec1\u81e5\u5e95\u6a94\u6848\uff0c\u6062\u5fa9\u5176\u8b66\u5bdf\u8eab\u4efd\uff0c\u4e26\u7531\u5efa\u660e\u4ee3\u8868\u884c\u79ae\u3002\",\n      who:=  (select Police filter .name=\"\u6797\u570b\u5e73\") union \n             (select PoliceSpy filter .name=\"\u6797\u570b\u5e73\") union\n             {chen, lau},\n      `when`:= assert_single((select FuzzyTime filter .fuzzy_fmt=\"2002/11/27_15:00:00_ID\")),\n      where:= (select Location filter .name=\"\u5929\u53f0\"),    \n};\n\nselect Police filter .name=\"test_DCP\";\n\nwith pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect Police filter .id=&lt;uuid&gt;pid;\n\nwith pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect &lt;Police&gt;&lt;uuid&gt;pid;\n\nwith pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\nselect (&lt;Police&gt;&lt;uuid&gt;pid) {*};\n\nwith pid:= (select Police filter .name=\"test_DCP\").id,\nselect &lt;Police&gt;pid;\n\nwith pid:= &lt;str&gt;(select Police filter .name=\"test_DCP\").id,\ndelete &lt;Police&gt;&lt;uuid&gt;pid;\n\nreset global current_user_id;\n</code></pre>","tags":["migration","uuid"]},{"location":"scenes/scene10/scene10/#_6","title":"\u7121\u9593\u5439\u6c34","text":"<p>\u6839\u64da\u8a2a\u8ac7\uff0c\u65bc\u62cd\u651d\u6642\u9593\u53ea\u6709\u83ef\u4ed4\u8207\u7de8\u5287\u5c0e\u6f14\u7b49\u5c11\u90e8\u4efd\u4eba\u77e5\u9053\uff0c\u570b\u5e73\u4e5f\u662f\u97d3\u741b\u6240\u6d3e\u81e5\u5e95\uff0c\u751a\u81f3\u9023\u98fe\u6f14\u570b\u5e73\u7684\u6797\u5bb6\u68df\u90fd\u662f\u5230\u6700\u5f8c\u4e00\u5e55\u5feb\u958b\u62cd\u524d\u624d\u77e5\u9053\u3002\u7576\u6642\u4ed6\u64d4\u5fc3\u524d\u9762\u7684\u6232\u4efd\u662f\u4e0d\u662f\u6709\u6f14\u5f97\u4e0d\u5408\u5287\u60c5\u7684\u5730\u65b9\uff0c\u83ef\u4ed4\u8aaa\u6c92\u554f\u984c\uff0c\u4ed6\u8981\u7684\u5c31\u662f\u9019\u7a2e\u53cd\u5dee\u611f\u3002</p>","tags":["migration","uuid"]}]}